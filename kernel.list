
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <reset_handler>
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <undefined_handler>
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <swi_handler>
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <prefetch_handler>
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <data_handler>
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <unused_handler>
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <irq_handler>
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <fiq_handler>

00008020 <reset_handler>:
    8020:	00008040 	andeq	r8, r0, r0, asr #32

00008024 <undefined_handler>:
    8024:	000142ec 	andeq	r4, r1, ip, ror #5

00008028 <swi_handler>:
    8028:	000103dc 	ldrdeq	r0, [r1], -ip

0000802c <prefetch_handler>:
    802c:	000142f0 	strdeq	r4, [r1], -r0

00008030 <data_handler>:
    8030:	000142f4 	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00008034 <unused_handler>:
    8034:	000142f8 	strdeq	r4, [r1], -r8

00008038 <irq_handler>:
    8038:	00010490 	muleq	r1, r0, r4

0000803c <fiq_handler>:
    803c:	000142fc 	strdeq	r4, [r1], -ip

00008040 <reset>:
    8040:	e3a00902 	mov	r0, #32768	; 0x8000
    8044:	e3a01000 	mov	r1, #0
    8048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    804c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    8058:	e3a000d2 	mov	r0, #210	; 0xd2
    805c:	e121f000 	msr	CPSR_c, r0
    8060:	e3a0d902 	mov	sp, #32768	; 0x8000
    8064:	e3a000d1 	mov	r0, #209	; 0xd1
    8068:	e121f000 	msr	CPSR_c, r0
    806c:	e3a0d901 	mov	sp, #16384	; 0x4000
    8070:	e3a000d3 	mov	r0, #211	; 0xd3
    8074:	e121f000 	msr	CPSR_c, r0
    8078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
    807c:	e59f0018 	ldr	r0, [pc, #24]	; 809c <zero_loop+0x14>
    8080:	e59f1018 	ldr	r1, [pc, #24]	; 80a0 <zero_loop+0x18>
    8084:	e3a02000 	mov	r2, #0

00008088 <zero_loop>:
    8088:	e1500001 	cmp	r0, r1
    808c:	b4802004 	strlt	r2, [r0], #4
    8090:	bafffffc 	blt	8088 <zero_loop>
    8094:	eb002d66 	bl	13634 <irqBlock>
    8098:	ea0030b9 	b	14384 <main>
    809c:	00014760 	andeq	r4, r1, r0, ror #14
    80a0:	00015b40 	andeq	r5, r1, r0, asr #22

Disassembly of section .text:

00010000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   10000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10004:	e28db000 	add	fp, sp, #0
   10008:	e24dd01c 	sub	sp, sp, #28
   1000c:	e50b0010 	str	r0, [fp, #-16]
   10010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   10018:	e51b3010 	ldr	r3, [fp, #-16]
   1001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   10020:	e51b3010 	ldr	r3, [fp, #-16]
   10024:	e2433004 	sub	r3, r3, #4
   10028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   1002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10030:	e2832004 	add	r2, r3, #4
   10034:	e51b3010 	ldr	r3, [fp, #-16]
   10038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1003c:	e51b3010 	ldr	r3, [fp, #-16]
   10040:	e2433004 	sub	r3, r3, #4
   10044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   10048:	e51b3010 	ldr	r3, [fp, #-16]
   1004c:	e59f21b8 	ldr	r2, [pc, #440]	; 1020c <pxPortInitialiseStack+0x20c>
   10050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10054:	e51b3010 	ldr	r3, [fp, #-16]
   10058:	e2433004 	sub	r3, r3, #4
   1005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   10060:	e51b2008 	ldr	r2, [fp, #-8]
   10064:	e51b3010 	ldr	r3, [fp, #-16]
   10068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   1006c:	e51b3010 	ldr	r3, [fp, #-16]
   10070:	e2433004 	sub	r3, r3, #4
   10074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   10078:	e51b3010 	ldr	r3, [fp, #-16]
   1007c:	e59f218c 	ldr	r2, [pc, #396]	; 10210 <pxPortInitialiseStack+0x210>
   10080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10084:	e51b3010 	ldr	r3, [fp, #-16]
   10088:	e2433004 	sub	r3, r3, #4
   1008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   10090:	e51b3010 	ldr	r3, [fp, #-16]
   10094:	e59f2178 	ldr	r2, [pc, #376]	; 10214 <pxPortInitialiseStack+0x214>
   10098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1009c:	e51b3010 	ldr	r3, [fp, #-16]
   100a0:	e2433004 	sub	r3, r3, #4
   100a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   100a8:	e51b3010 	ldr	r3, [fp, #-16]
   100ac:	e59f2164 	ldr	r2, [pc, #356]	; 10218 <pxPortInitialiseStack+0x218>
   100b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100b4:	e51b3010 	ldr	r3, [fp, #-16]
   100b8:	e2433004 	sub	r3, r3, #4
   100bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   100c0:	e51b3010 	ldr	r3, [fp, #-16]
   100c4:	e59f2150 	ldr	r2, [pc, #336]	; 1021c <pxPortInitialiseStack+0x21c>
   100c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100cc:	e51b3010 	ldr	r3, [fp, #-16]
   100d0:	e2433004 	sub	r3, r3, #4
   100d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   100d8:	e51b3010 	ldr	r3, [fp, #-16]
   100dc:	e59f213c 	ldr	r2, [pc, #316]	; 10220 <pxPortInitialiseStack+0x220>
   100e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100e4:	e51b3010 	ldr	r3, [fp, #-16]
   100e8:	e2433004 	sub	r3, r3, #4
   100ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   100f0:	e51b3010 	ldr	r3, [fp, #-16]
   100f4:	e59f2128 	ldr	r2, [pc, #296]	; 10224 <pxPortInitialiseStack+0x224>
   100f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   100fc:	e51b3010 	ldr	r3, [fp, #-16]
   10100:	e2433004 	sub	r3, r3, #4
   10104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   10108:	e51b3010 	ldr	r3, [fp, #-16]
   1010c:	e59f2114 	ldr	r2, [pc, #276]	; 10228 <pxPortInitialiseStack+0x228>
   10110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10114:	e51b3010 	ldr	r3, [fp, #-16]
   10118:	e2433004 	sub	r3, r3, #4
   1011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   10120:	e51b3010 	ldr	r3, [fp, #-16]
   10124:	e59f2100 	ldr	r2, [pc, #256]	; 1022c <pxPortInitialiseStack+0x22c>
   10128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1012c:	e51b3010 	ldr	r3, [fp, #-16]
   10130:	e2433004 	sub	r3, r3, #4
   10134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   10138:	e51b3010 	ldr	r3, [fp, #-16]
   1013c:	e59f20ec 	ldr	r2, [pc, #236]	; 10230 <pxPortInitialiseStack+0x230>
   10140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10144:	e51b3010 	ldr	r3, [fp, #-16]
   10148:	e2433004 	sub	r3, r3, #4
   1014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   10150:	e51b3010 	ldr	r3, [fp, #-16]
   10154:	e59f20d8 	ldr	r2, [pc, #216]	; 10234 <pxPortInitialiseStack+0x234>
   10158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1015c:	e51b3010 	ldr	r3, [fp, #-16]
   10160:	e2433004 	sub	r3, r3, #4
   10164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   10168:	e51b3010 	ldr	r3, [fp, #-16]
   1016c:	e59f20c4 	ldr	r2, [pc, #196]	; 10238 <pxPortInitialiseStack+0x238>
   10170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   10174:	e51b3010 	ldr	r3, [fp, #-16]
   10178:	e2433004 	sub	r3, r3, #4
   1017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   10180:	e51b3010 	ldr	r3, [fp, #-16]
   10184:	e59f20b0 	ldr	r2, [pc, #176]	; 1023c <pxPortInitialiseStack+0x23c>
   10188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   1018c:	e51b3010 	ldr	r3, [fp, #-16]
   10190:	e2433004 	sub	r3, r3, #4
   10194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   10198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1019c:	e51b3010 	ldr	r3, [fp, #-16]
   101a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   101a4:	e51b3010 	ldr	r3, [fp, #-16]
   101a8:	e2433004 	sub	r3, r3, #4
   101ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   101b0:	e51b3010 	ldr	r3, [fp, #-16]
   101b4:	e3a0201f 	mov	r2, #31
   101b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   101bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   101c0:	e2033001 	and	r3, r3, #1
   101c4:	e3530000 	cmp	r3, #0
   101c8:	0a000004 	beq	101e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   101cc:	e51b3010 	ldr	r3, [fp, #-16]
   101d0:	e5933000 	ldr	r3, [r3]
   101d4:	e3832020 	orr	r2, r3, #32
   101d8:	e51b3010 	ldr	r3, [fp, #-16]
   101dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   101e0:	e51b3010 	ldr	r3, [fp, #-16]
   101e4:	e2433004 	sub	r3, r3, #4
   101e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   101ec:	e51b3010 	ldr	r3, [fp, #-16]
   101f0:	e3a02000 	mov	r2, #0
   101f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   101f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   101fc:	e1a00003 	mov	r0, r3
   10200:	e28bd000 	add	sp, fp, #0
   10204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10208:	e12fff1e 	bx	lr
   1020c:	aaaaaaaa 	bge	feabacbc <_estack+0xf6aaacbc>
   10210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   10214:	11111111 	tstne	r1, r1, lsl r1
   10218:	10101010 	andsne	r1, r0, r0, lsl r0
   1021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   10220:	08080808 	stmdaeq	r8, {r3, fp}
   10224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   10228:	06060606 	streq	r0, [r6], -r6, lsl #12
   1022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   10230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   10234:	03030303 	movweq	r0, #13059	; 0x3303
   10238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   1023c:	01010101 	tsteq	r1, r1, lsl #2

00010240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   10240:	e92d4800 	push	{fp, lr}
   10244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   10248:	eb000017 	bl	102ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   1024c:	eb00003c 	bl	10344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   10250:	e3a03000 	mov	r3, #0
}
   10254:	e1a00003 	mov	r0, r3
   10258:	e8bd8800 	pop	{fp, pc}

0001025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   1025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   10264:	e320f000 	nop	{0}
   10268:	e28bd000 	add	sp, fp, #0
   1026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10270:	e12fff1e 	bx	lr

00010274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   10274:	e92d4800 	push	{fp, lr}
   10278:	e28db004 	add	fp, sp, #4
   1027c:	e24dd008 	sub	sp, sp, #8
   10280:	e50b0008 	str	r0, [fp, #-8]
   10284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   10288:	eb0009af 	bl	1294c <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   1028c:	eb000a82 	bl	12c9c <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   10290:	e59f3010 	ldr	r3, [pc, #16]	; 102a8 <vTickISR+0x34>
   10294:	e3a02000 	mov	r2, #0
   10298:	e583200c 	str	r2, [r3, #12]
}
   1029c:	e320f000 	nop	{0}
   102a0:	e24bd004 	sub	sp, fp, #4
   102a4:	e8bd8800 	pop	{fp, pc}
   102a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000102ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   102ac:	e92d4800 	push	{fp, lr}
   102b0:	e28db004 	add	fp, sp, #4
   102b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   102b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   102bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   102c0:	eb000cdb 	bl	13634 <irqBlock>

	pRegs->CTL = 0x003E0000;
   102c4:	e59f3068 	ldr	r3, [pc, #104]	; 10334 <prvSetupTimerInterrupt+0x88>
   102c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   102cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   102d0:	e59f305c 	ldr	r3, [pc, #92]	; 10334 <prvSetupTimerInterrupt+0x88>
   102d4:	e59f205c 	ldr	r2, [pc, #92]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   102dc:	e59f3050 	ldr	r3, [pc, #80]	; 10334 <prvSetupTimerInterrupt+0x88>
   102e0:	e59f2050 	ldr	r2, [pc, #80]	; 10338 <prvSetupTimerInterrupt+0x8c>
   102e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   102e8:	e59f3044 	ldr	r3, [pc, #68]	; 10334 <prvSetupTimerInterrupt+0x88>
   102ec:	e3a020f9 	mov	r2, #249	; 0xf9
   102f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   102f4:	e59f3038 	ldr	r3, [pc, #56]	; 10334 <prvSetupTimerInterrupt+0x88>
   102f8:	e3a02000 	mov	r2, #0
   102fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   10300:	e59f302c 	ldr	r3, [pc, #44]	; 10334 <prvSetupTimerInterrupt+0x88>
   10304:	e59f2030 	ldr	r2, [pc, #48]	; 1033c <prvSetupTimerInterrupt+0x90>
   10308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   1030c:	e3a02000 	mov	r2, #0
   10310:	e59f1028 	ldr	r1, [pc, #40]	; 10340 <prvSetupTimerInterrupt+0x94>
   10314:	e3a00040 	mov	r0, #64	; 0x40
   10318:	eb000ccc 	bl	13650 <irqRegister>

	irqEnable(64);
   1031c:	e3a00040 	mov	r0, #64	; 0x40
   10320:	eb000ce3 	bl	136b4 <irqEnable>

	irqUnblock();
   10324:	eb000cbb 	bl	13618 <irqUnblock>
}
   10328:	e320f000 	nop	{0}
   1032c:	e24bd004 	sub	sp, fp, #4
   10330:	e8bd8800 	pop	{fp, pc}
   10334:	2000b400 	andcs	fp, r0, r0, lsl #8
   10338:	000003e7 	andeq	r0, r0, r7, ror #7
   1033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   10340:	00010274 	andeq	r0, r1, r4, ror r2

00010344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   10344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   1034c:	e59f307c 	ldr	r3, [pc, #124]	; 103d0 <vPortISRStartFirstTask+0x8c>
   10350:	e5933000 	ldr	r3, [r3]
   10354:	e2833001 	add	r3, r3, #1
   10358:	e59f2070 	ldr	r2, [pc, #112]	; 103d0 <vPortISRStartFirstTask+0x8c>
   1035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   10360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   10364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   10368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   1036c:	e59f0274 	ldr	r0, [pc, #628]	; 105e8 <vPortExitCritical+0x64>
   10370:	e5900000 	ldr	r0, [r0]
   10374:	e590e000 	ldr	lr, [r0]
   10378:	e59f026c 	ldr	r0, [pc, #620]	; 105ec <vPortExitCritical+0x68>
   1037c:	e8be0002 	ldm	lr!, {r1}
   10380:	e5801000 	str	r1, [r0]
   10384:	e8be0001 	ldm	lr!, {r0}
   10388:	e16ff000 	msr	SPSR_fsxc, r0
   1038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10390:	e320f000 	nop	{0}
   10394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10398:	e25ef004 	subs	pc, lr, #4
   1039c:	e320f000 	nop	{0}
   103a0:	e320f000 	nop	{0}
   103a4:	e59f3028 	ldr	r3, [pc, #40]	; 103d4 <vPortISRStartFirstTask+0x90>
   103a8:	e5933000 	ldr	r3, [r3]
   103ac:	e59f3024 	ldr	r3, [pc, #36]	; 103d8 <vPortISRStartFirstTask+0x94>
   103b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   103b4:	e8bd4000 	ldmfd	sp!, {lr}
   103b8:	e24ee004 	sub	lr, lr, #4
   103bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   103c0:	e320f000 	nop	{0}
   103c4:	e28bd000 	add	sp, fp, #0
   103c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   103cc:	e12fff1e 	bx	lr
   103d0:	00014760 	andeq	r4, r1, r0, ror #14
   103d4:	00014750 	andeq	r4, r1, r0, asr r7
   103d8:	000147e4 	andeq	r4, r1, r4, ror #15

000103dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   103dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   103e0:	e92d0001 	stmfd	sp!, {r0}
   103e4:	e94d2000 	stmdb	sp, {sp}^
   103e8:	e24dd004 	sub	sp, sp, #4
   103ec:	e8bd0001 	ldmfd	sp!, {r0}
   103f0:	e9204000 	stmdb	r0!, {lr}
   103f4:	e1a0e000 	mov	lr, r0
   103f8:	e8bd0001 	ldmfd	sp!, {r0}
   103fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10400:	e320f000 	nop	{0}
   10404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   10408:	e14f0000 	mrs	r0, SPSR
   1040c:	e92e0001 	stmdb	lr!, {r0}
   10410:	e59f01d4 	ldr	r0, [pc, #468]	; 105ec <vPortExitCritical+0x68>
   10414:	e5900000 	ldr	r0, [r0]
   10418:	e92e0001 	stmdb	lr!, {r0}
   1041c:	e59f01c4 	ldr	r0, [pc, #452]	; 105e8 <vPortExitCritical+0x64>
   10420:	e5900000 	ldr	r0, [r0]
   10424:	e580e000 	str	lr, [r0]
   10428:	e59f3058 	ldr	r3, [pc, #88]	; 10488 <vPortYieldProcessor+0xac>
   1042c:	e5933000 	ldr	r3, [r3]
   10430:	e59f3054 	ldr	r3, [pc, #84]	; 1048c <vPortYieldProcessor+0xb0>
   10434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   10438:	eb000a17 	bl	12c9c <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   1043c:	e59f01a4 	ldr	r0, [pc, #420]	; 105e8 <vPortExitCritical+0x64>
   10440:	e5900000 	ldr	r0, [r0]
   10444:	e590e000 	ldr	lr, [r0]
   10448:	e59f019c 	ldr	r0, [pc, #412]	; 105ec <vPortExitCritical+0x68>
   1044c:	e8be0002 	ldm	lr!, {r1}
   10450:	e5801000 	str	r1, [r0]
   10454:	e8be0001 	ldm	lr!, {r0}
   10458:	e16ff000 	msr	SPSR_fsxc, r0
   1045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10460:	e320f000 	nop	{0}
   10464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10468:	e25ef004 	subs	pc, lr, #4
   1046c:	e320f000 	nop	{0}
   10470:	e320f000 	nop	{0}
   10474:	e59f300c 	ldr	r3, [pc, #12]	; 10488 <vPortYieldProcessor+0xac>
   10478:	e5933000 	ldr	r3, [r3]
   1047c:	e59f3008 	ldr	r3, [pc, #8]	; 1048c <vPortYieldProcessor+0xb0>
   10480:	e5933000 	ldr	r3, [r3]
}
   10484:	e320f000 	nop	{0}
   10488:	00014750 	andeq	r4, r1, r0, asr r7
   1048c:	000147e4 	andeq	r4, r1, r4, ror #15

00010490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   10490:	e92d0001 	stmfd	sp!, {r0}
   10494:	e94d2000 	stmdb	sp, {sp}^
   10498:	e24dd004 	sub	sp, sp, #4
   1049c:	e8bd0001 	ldmfd	sp!, {r0}
   104a0:	e9204000 	stmdb	r0!, {lr}
   104a4:	e1a0e000 	mov	lr, r0
   104a8:	e8bd0001 	ldmfd	sp!, {r0}
   104ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   104b0:	e320f000 	nop	{0}
   104b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   104b8:	e14f0000 	mrs	r0, SPSR
   104bc:	e92e0001 	stmdb	lr!, {r0}
   104c0:	e59f0124 	ldr	r0, [pc, #292]	; 105ec <vPortExitCritical+0x68>
   104c4:	e5900000 	ldr	r0, [r0]
   104c8:	e92e0001 	stmdb	lr!, {r0}
   104cc:	e59f0114 	ldr	r0, [pc, #276]	; 105e8 <vPortExitCritical+0x64>
   104d0:	e5900000 	ldr	r0, [r0]
   104d4:	e580e000 	str	lr, [r0]
   104d8:	e59f3058 	ldr	r3, [pc, #88]	; 10538 <vFreeRTOS_ISR+0xa8>
   104dc:	e5933000 	ldr	r3, [r3]
   104e0:	e59f3054 	ldr	r3, [pc, #84]	; 1053c <vFreeRTOS_ISR+0xac>
   104e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   104e8:	eb000c22 	bl	13578 <irqHandler>
	portRESTORE_CONTEXT();	
   104ec:	e59f00f4 	ldr	r0, [pc, #244]	; 105e8 <vPortExitCritical+0x64>
   104f0:	e5900000 	ldr	r0, [r0]
   104f4:	e590e000 	ldr	lr, [r0]
   104f8:	e59f00ec 	ldr	r0, [pc, #236]	; 105ec <vPortExitCritical+0x68>
   104fc:	e8be0002 	ldm	lr!, {r1}
   10500:	e5801000 	str	r1, [r0]
   10504:	e8be0001 	ldm	lr!, {r0}
   10508:	e16ff000 	msr	SPSR_fsxc, r0
   1050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10510:	e320f000 	nop	{0}
   10514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   10518:	e25ef004 	subs	pc, lr, #4
   1051c:	e320f000 	nop	{0}
   10520:	e320f000 	nop	{0}
   10524:	e59f300c 	ldr	r3, [pc, #12]	; 10538 <vFreeRTOS_ISR+0xa8>
   10528:	e5933000 	ldr	r3, [r3]
   1052c:	e59f3008 	ldr	r3, [pc, #8]	; 1053c <vFreeRTOS_ISR+0xac>
   10530:	e5933000 	ldr	r3, [r3]
}
   10534:	e320f000 	nop	{0}
   10538:	00014750 	andeq	r4, r1, r0, asr r7
   1053c:	000147e4 	andeq	r4, r1, r4, ror #15

00010540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   10540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   10548:	e92d0001 	stmfd	sp!, {r0}
   1054c:	e10f0000 	mrs	r0, CPSR
   10550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10554:	e129f000 	msr	CPSR_fc, r0
   10558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   1055c:	e59f301c 	ldr	r3, [pc, #28]	; 10580 <vPortEnterCritical+0x40>
   10560:	e5933000 	ldr	r3, [r3]
   10564:	e2833001 	add	r3, r3, #1
   10568:	e59f2010 	ldr	r2, [pc, #16]	; 10580 <vPortEnterCritical+0x40>
   1056c:	e5823000 	str	r3, [r2]
}
   10570:	e320f000 	nop	{0}
   10574:	e28bd000 	add	sp, fp, #0
   10578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1057c:	e12fff1e 	bx	lr
   10580:	00014750 	andeq	r4, r1, r0, asr r7

00010584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   10584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   1058c:	e59f3050 	ldr	r3, [pc, #80]	; 105e4 <vPortExitCritical+0x60>
   10590:	e5933000 	ldr	r3, [r3]
   10594:	e3530000 	cmp	r3, #0
   10598:	0a00000d 	beq	105d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   1059c:	e59f3040 	ldr	r3, [pc, #64]	; 105e4 <vPortExitCritical+0x60>
   105a0:	e5933000 	ldr	r3, [r3]
   105a4:	e2433001 	sub	r3, r3, #1
   105a8:	e59f2034 	ldr	r2, [pc, #52]	; 105e4 <vPortExitCritical+0x60>
   105ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   105b0:	e59f302c 	ldr	r3, [pc, #44]	; 105e4 <vPortExitCritical+0x60>
   105b4:	e5933000 	ldr	r3, [r3]
   105b8:	e3530000 	cmp	r3, #0
   105bc:	1a000004 	bne	105d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   105c0:	e92d0001 	stmfd	sp!, {r0}
   105c4:	e10f0000 	mrs	r0, CPSR
   105c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   105cc:	e129f000 	msr	CPSR_fc, r0
   105d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   105d4:	e320f000 	nop	{0}
   105d8:	e28bd000 	add	sp, fp, #0
   105dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   105e0:	e12fff1e 	bx	lr
   105e4:	00014750 	andeq	r4, r1, r0, asr r7
   105e8:	000147e4 	andeq	r4, r1, r4, ror #15
   105ec:	00014750 	andeq	r4, r1, r0, asr r7

000105f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   105f0:	e92d4800 	push	{fp, lr}
   105f4:	e28db004 	add	fp, sp, #4
   105f8:	e24dd018 	sub	sp, sp, #24
   105fc:	e50b0010 	str	r0, [fp, #-16]
   10600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   10604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   10608:	e3a00038 	mov	r0, #56	; 0x38
   1060c:	eb000e0b 	bl	13e40 <pvPortMalloc>
   10610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   10614:	e51b300c 	ldr	r3, [fp, #-12]
   10618:	e3530000 	cmp	r3, #0
   1061c:	0a000044 	beq	10734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   10620:	e59f3124 	ldr	r3, [pc, #292]	; 1074c <xCoRoutineCreate+0x15c>
   10624:	e5933000 	ldr	r3, [r3]
   10628:	e3530000 	cmp	r3, #0
   1062c:	1a000003 	bne	10640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   10630:	e59f2114 	ldr	r2, [pc, #276]	; 1074c <xCoRoutineCreate+0x15c>
   10634:	e51b300c 	ldr	r3, [fp, #-12]
   10638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   1063c:	eb000177 	bl	10c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   10640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10644:	e3530001 	cmp	r3, #1
   10648:	9a000001 	bls	10654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   1064c:	e3a03001 	mov	r3, #1
   10650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   10654:	e51b300c 	ldr	r3, [fp, #-12]
   10658:	e3a02000 	mov	r2, #0
   1065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   10660:	e51b300c 	ldr	r3, [fp, #-12]
   10664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10668:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   1066c:	e51b300c 	ldr	r3, [fp, #-12]
   10670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   10674:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   10678:	e51b300c 	ldr	r3, [fp, #-12]
   1067c:	e51b2010 	ldr	r2, [fp, #-16]
   10680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   10684:	e51b300c 	ldr	r3, [fp, #-12]
   10688:	e2833004 	add	r3, r3, #4
   1068c:	e1a00003 	mov	r0, r3
   10690:	eb0001c9 	bl	10dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   10694:	e51b300c 	ldr	r3, [fp, #-12]
   10698:	e2833018 	add	r3, r3, #24
   1069c:	e1a00003 	mov	r0, r3
   106a0:	eb0001c5 	bl	10dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   106a4:	e51b300c 	ldr	r3, [fp, #-12]
   106a8:	e51b200c 	ldr	r2, [fp, #-12]
   106ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   106b0:	e51b300c 	ldr	r3, [fp, #-12]
   106b4:	e51b200c 	ldr	r2, [fp, #-12]
   106b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   106bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   106c0:	e2632005 	rsb	r2, r3, #5
   106c4:	e51b300c 	ldr	r3, [fp, #-12]
   106c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   106cc:	e51b300c 	ldr	r3, [fp, #-12]
   106d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106d4:	e59f3074 	ldr	r3, [pc, #116]	; 10750 <xCoRoutineCreate+0x160>
   106d8:	e5933000 	ldr	r3, [r3]
   106dc:	e1520003 	cmp	r2, r3
   106e0:	9a000003 	bls	106f4 <xCoRoutineCreate+0x104>
   106e4:	e51b300c 	ldr	r3, [fp, #-12]
   106e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   106ec:	e59f205c 	ldr	r2, [pc, #92]	; 10750 <xCoRoutineCreate+0x160>
   106f0:	e5823000 	str	r3, [r2]
   106f4:	e51b300c 	ldr	r3, [fp, #-12]
   106f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   106fc:	e1a03002 	mov	r3, r2
   10700:	e1a03103 	lsl	r3, r3, #2
   10704:	e0833002 	add	r3, r3, r2
   10708:	e1a03103 	lsl	r3, r3, #2
   1070c:	e59f2040 	ldr	r2, [pc, #64]	; 10754 <xCoRoutineCreate+0x164>
   10710:	e0832002 	add	r2, r3, r2
   10714:	e51b300c 	ldr	r3, [fp, #-12]
   10718:	e2833004 	add	r3, r3, #4
   1071c:	e1a01003 	mov	r1, r3
   10720:	e1a00002 	mov	r0, r2
   10724:	eb0001af 	bl	10de8 <vListInsertEnd>

		xReturn = pdPASS;
   10728:	e3a03001 	mov	r3, #1
   1072c:	e50b3008 	str	r3, [fp, #-8]
   10730:	ea000001 	b	1073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   10734:	e3e03000 	mvn	r3, #0
   10738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   1073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10740:	e1a00003 	mov	r0, r3
   10744:	e24bd004 	sub	sp, fp, #4
   10748:	e8bd8800 	pop	{fp, pc}
   1074c:	000147d0 	ldrdeq	r4, [r1], -r0
   10750:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10754:	00014764 	andeq	r4, r1, r4, ror #14

00010758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   10758:	e92d4800 	push	{fp, lr}
   1075c:	e28db004 	add	fp, sp, #4
   10760:	e24dd010 	sub	sp, sp, #16
   10764:	e50b0010 	str	r0, [fp, #-16]
   10768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   1076c:	e59f30b8 	ldr	r3, [pc, #184]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   10770:	e5933000 	ldr	r3, [r3]
   10774:	e51b2010 	ldr	r2, [fp, #-16]
   10778:	e0823003 	add	r3, r2, r3
   1077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   10780:	e59f30a8 	ldr	r3, [pc, #168]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10784:	e5933000 	ldr	r3, [r3]
   10788:	e2833004 	add	r3, r3, #4
   1078c:	e1a00003 	mov	r0, r3
   10790:	eb0001f0 	bl	10f58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   10794:	e59f3094 	ldr	r3, [pc, #148]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   10798:	e5933000 	ldr	r3, [r3]
   1079c:	e51b2008 	ldr	r2, [fp, #-8]
   107a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   107a4:	e59f3080 	ldr	r3, [pc, #128]	; 1082c <vCoRoutineAddToDelayedList+0xd4>
   107a8:	e5933000 	ldr	r3, [r3]
   107ac:	e51b2008 	ldr	r2, [fp, #-8]
   107b0:	e1520003 	cmp	r2, r3
   107b4:	2a000008 	bcs	107dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107b8:	e59f3074 	ldr	r3, [pc, #116]	; 10834 <vCoRoutineAddToDelayedList+0xdc>
   107bc:	e5932000 	ldr	r2, [r3]
   107c0:	e59f3068 	ldr	r3, [pc, #104]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107c4:	e5933000 	ldr	r3, [r3]
   107c8:	e2833004 	add	r3, r3, #4
   107cc:	e1a01003 	mov	r1, r3
   107d0:	e1a00002 	mov	r0, r2
   107d4:	eb0001a9 	bl	10e80 <vListInsert>
   107d8:	ea000007 	b	107fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   107dc:	e59f3054 	ldr	r3, [pc, #84]	; 10838 <vCoRoutineAddToDelayedList+0xe0>
   107e0:	e5932000 	ldr	r2, [r3]
   107e4:	e59f3044 	ldr	r3, [pc, #68]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   107e8:	e5933000 	ldr	r3, [r3]
   107ec:	e2833004 	add	r3, r3, #4
   107f0:	e1a01003 	mov	r1, r3
   107f4:	e1a00002 	mov	r0, r2
   107f8:	eb0001a0 	bl	10e80 <vListInsert>
	}

	if( pxEventList )
   107fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10800:	e3530000 	cmp	r3, #0
   10804:	0a000005 	beq	10820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   10808:	e59f3020 	ldr	r3, [pc, #32]	; 10830 <vCoRoutineAddToDelayedList+0xd8>
   1080c:	e5933000 	ldr	r3, [r3]
   10810:	e2833018 	add	r3, r3, #24
   10814:	e1a01003 	mov	r1, r3
   10818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1081c:	eb000197 	bl	10e80 <vListInsert>
	}
}
   10820:	e320f000 	nop	{0}
   10824:	e24bd004 	sub	sp, fp, #4
   10828:	e8bd8800 	pop	{fp, pc}
   1082c:	000147d8 	ldrdeq	r4, [r1], -r8
   10830:	000147d0 	ldrdeq	r4, [r1], -r0
   10834:	000147b8 			; <UNDEFINED> instruction: 0x000147b8
   10838:	000147b4 			; <UNDEFINED> instruction: 0x000147b4

0001083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   1083c:	e92d4800 	push	{fp, lr}
   10840:	e28db004 	add	fp, sp, #4
   10844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10848:	ea00002c 	b	10900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   1084c:	e92d0001 	stmfd	sp!, {r0}
   10850:	e10f0000 	mrs	r0, CPSR
   10854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   10858:	e129f000 	msr	CPSR_fc, r0
   1085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   10860:	e59f30b8 	ldr	r3, [pc, #184]	; 10920 <prvCheckPendingReadyList+0xe4>
   10864:	e593300c 	ldr	r3, [r3, #12]
   10868:	e593300c 	ldr	r3, [r3, #12]
   1086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10870:	e51b3008 	ldr	r3, [fp, #-8]
   10874:	e2833018 	add	r3, r3, #24
   10878:	e1a00003 	mov	r0, r3
   1087c:	eb0001b5 	bl	10f58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   10880:	e92d0001 	stmfd	sp!, {r0}
   10884:	e10f0000 	mrs	r0, CPSR
   10888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   1088c:	e129f000 	msr	CPSR_fc, r0
   10890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   10894:	e51b3008 	ldr	r3, [fp, #-8]
   10898:	e2833004 	add	r3, r3, #4
   1089c:	e1a00003 	mov	r0, r3
   108a0:	eb0001ac 	bl	10f58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   108a4:	e51b3008 	ldr	r3, [fp, #-8]
   108a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108ac:	e59f3070 	ldr	r3, [pc, #112]	; 10924 <prvCheckPendingReadyList+0xe8>
   108b0:	e5933000 	ldr	r3, [r3]
   108b4:	e1520003 	cmp	r2, r3
   108b8:	9a000003 	bls	108cc <prvCheckPendingReadyList+0x90>
   108bc:	e51b3008 	ldr	r3, [fp, #-8]
   108c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   108c4:	e59f2058 	ldr	r2, [pc, #88]	; 10924 <prvCheckPendingReadyList+0xe8>
   108c8:	e5823000 	str	r3, [r2]
   108cc:	e51b3008 	ldr	r3, [fp, #-8]
   108d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   108d4:	e1a03002 	mov	r3, r2
   108d8:	e1a03103 	lsl	r3, r3, #2
   108dc:	e0833002 	add	r3, r3, r2
   108e0:	e1a03103 	lsl	r3, r3, #2
   108e4:	e59f203c 	ldr	r2, [pc, #60]	; 10928 <prvCheckPendingReadyList+0xec>
   108e8:	e0832002 	add	r2, r3, r2
   108ec:	e51b3008 	ldr	r3, [fp, #-8]
   108f0:	e2833004 	add	r3, r3, #4
   108f4:	e1a01003 	mov	r1, r3
   108f8:	e1a00002 	mov	r0, r2
   108fc:	eb000139 	bl	10de8 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   10900:	e59f3018 	ldr	r3, [pc, #24]	; 10920 <prvCheckPendingReadyList+0xe4>
   10904:	e5933000 	ldr	r3, [r3]
   10908:	e3530000 	cmp	r3, #0
   1090c:	1affffce 	bne	1084c <prvCheckPendingReadyList+0x10>
	}
}
   10910:	e320f000 	nop	{0}
   10914:	e320f000 	nop	{0}
   10918:	e24bd004 	sub	sp, fp, #4
   1091c:	e8bd8800 	pop	{fp, pc}
   10920:	000147bc 			; <UNDEFINED> instruction: 0x000147bc
   10924:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10928:	00014764 	andeq	r4, r1, r4, ror #14

0001092c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   1092c:	e92d4800 	push	{fp, lr}
   10930:	e28db004 	add	fp, sp, #4
   10934:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   10938:	eb0007df 	bl	128bc <xTaskGetTickCount>
   1093c:	e1a02000 	mov	r2, r0
   10940:	e59f3198 	ldr	r3, [pc, #408]	; 10ae0 <prvCheckDelayedList+0x1b4>
   10944:	e5933000 	ldr	r3, [r3]
   10948:	e0423003 	sub	r3, r2, r3
   1094c:	e59f2190 	ldr	r2, [pc, #400]	; 10ae4 <prvCheckDelayedList+0x1b8>
   10950:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   10954:	ea000056 	b	10ab4 <prvCheckDelayedList+0x188>
	{
		xCoRoutineTickCount++;
   10958:	e59f3188 	ldr	r3, [pc, #392]	; 10ae8 <prvCheckDelayedList+0x1bc>
   1095c:	e5933000 	ldr	r3, [r3]
   10960:	e2833001 	add	r3, r3, #1
   10964:	e59f217c 	ldr	r2, [pc, #380]	; 10ae8 <prvCheckDelayedList+0x1bc>
   10968:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   1096c:	e59f3170 	ldr	r3, [pc, #368]	; 10ae4 <prvCheckDelayedList+0x1b8>
   10970:	e5933000 	ldr	r3, [r3]
   10974:	e2433001 	sub	r3, r3, #1
   10978:	e59f2164 	ldr	r2, [pc, #356]	; 10ae4 <prvCheckDelayedList+0x1b8>
   1097c:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   10980:	e59f3160 	ldr	r3, [pc, #352]	; 10ae8 <prvCheckDelayedList+0x1bc>
   10984:	e5933000 	ldr	r3, [r3]
   10988:	e3530000 	cmp	r3, #0
   1098c:	1a000043 	bne	10aa0 <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   10990:	e59f3154 	ldr	r3, [pc, #340]	; 10aec <prvCheckDelayedList+0x1c0>
   10994:	e5933000 	ldr	r3, [r3]
   10998:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   1099c:	e59f314c 	ldr	r3, [pc, #332]	; 10af0 <prvCheckDelayedList+0x1c4>
   109a0:	e5933000 	ldr	r3, [r3]
   109a4:	e59f2140 	ldr	r2, [pc, #320]	; 10aec <prvCheckDelayedList+0x1c0>
   109a8:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   109ac:	e59f213c 	ldr	r2, [pc, #316]	; 10af0 <prvCheckDelayedList+0x1c4>
   109b0:	e51b3008 	ldr	r3, [fp, #-8]
   109b4:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   109b8:	ea000038 	b	10aa0 <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   109bc:	e59f3128 	ldr	r3, [pc, #296]	; 10aec <prvCheckDelayedList+0x1c0>
   109c0:	e5933000 	ldr	r3, [r3]
   109c4:	e593300c 	ldr	r3, [r3, #12]
   109c8:	e593300c 	ldr	r3, [r3, #12]
   109cc:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   109d0:	e51b300c 	ldr	r3, [fp, #-12]
   109d4:	e5932004 	ldr	r2, [r3, #4]
   109d8:	e59f3108 	ldr	r3, [pc, #264]	; 10ae8 <prvCheckDelayedList+0x1bc>
   109dc:	e5933000 	ldr	r3, [r3]
   109e0:	e1520003 	cmp	r2, r3
   109e4:	9a000000 	bls	109ec <prvCheckDelayedList+0xc0>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   109e8:	ea000031 	b	10ab4 <prvCheckDelayedList+0x188>
			}																						

			portDISABLE_INTERRUPTS();
   109ec:	e92d0001 	stmfd	sp!, {r0}
   109f0:	e10f0000 	mrs	r0, CPSR
   109f4:	e38000c0 	orr	r0, r0, #192	; 0xc0
   109f8:	e129f000 	msr	CPSR_fc, r0
   109fc:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   10a00:	e51b300c 	ldr	r3, [fp, #-12]
   10a04:	e2833004 	add	r3, r3, #4
   10a08:	e1a00003 	mov	r0, r3
   10a0c:	eb000151 	bl	10f58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   10a10:	e51b300c 	ldr	r3, [fp, #-12]
   10a14:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   10a18:	e3530000 	cmp	r3, #0
   10a1c:	0a000003 	beq	10a30 <prvCheckDelayedList+0x104>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   10a20:	e51b300c 	ldr	r3, [fp, #-12]
   10a24:	e2833018 	add	r3, r3, #24
   10a28:	e1a00003 	mov	r0, r3
   10a2c:	eb000149 	bl	10f58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   10a30:	e92d0001 	stmfd	sp!, {r0}
   10a34:	e10f0000 	mrs	r0, CPSR
   10a38:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   10a3c:	e129f000 	msr	CPSR_fc, r0
   10a40:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   10a44:	e51b300c 	ldr	r3, [fp, #-12]
   10a48:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a4c:	e59f30a0 	ldr	r3, [pc, #160]	; 10af4 <prvCheckDelayedList+0x1c8>
   10a50:	e5933000 	ldr	r3, [r3]
   10a54:	e1520003 	cmp	r2, r3
   10a58:	9a000003 	bls	10a6c <prvCheckDelayedList+0x140>
   10a5c:	e51b300c 	ldr	r3, [fp, #-12]
   10a60:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10a64:	e59f2088 	ldr	r2, [pc, #136]	; 10af4 <prvCheckDelayedList+0x1c8>
   10a68:	e5823000 	str	r3, [r2]
   10a6c:	e51b300c 	ldr	r3, [fp, #-12]
   10a70:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10a74:	e1a03002 	mov	r3, r2
   10a78:	e1a03103 	lsl	r3, r3, #2
   10a7c:	e0833002 	add	r3, r3, r2
   10a80:	e1a03103 	lsl	r3, r3, #2
   10a84:	e59f206c 	ldr	r2, [pc, #108]	; 10af8 <prvCheckDelayedList+0x1cc>
   10a88:	e0832002 	add	r2, r3, r2
   10a8c:	e51b300c 	ldr	r3, [fp, #-12]
   10a90:	e2833004 	add	r3, r3, #4
   10a94:	e1a01003 	mov	r1, r3
   10a98:	e1a00002 	mov	r0, r2
   10a9c:	eb0000d1 	bl	10de8 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   10aa0:	e59f3044 	ldr	r3, [pc, #68]	; 10aec <prvCheckDelayedList+0x1c0>
   10aa4:	e5933000 	ldr	r3, [r3]
   10aa8:	e5933000 	ldr	r3, [r3]
   10aac:	e3530000 	cmp	r3, #0
   10ab0:	1affffc1 	bne	109bc <prvCheckDelayedList+0x90>
	while( xPassedTicks )
   10ab4:	e59f3028 	ldr	r3, [pc, #40]	; 10ae4 <prvCheckDelayedList+0x1b8>
   10ab8:	e5933000 	ldr	r3, [r3]
   10abc:	e3530000 	cmp	r3, #0
   10ac0:	1affffa4 	bne	10958 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   10ac4:	e59f301c 	ldr	r3, [pc, #28]	; 10ae8 <prvCheckDelayedList+0x1bc>
   10ac8:	e5933000 	ldr	r3, [r3]
   10acc:	e59f200c 	ldr	r2, [pc, #12]	; 10ae0 <prvCheckDelayedList+0x1b4>
   10ad0:	e5823000 	str	r3, [r2]
}
   10ad4:	e320f000 	nop	{0}
   10ad8:	e24bd004 	sub	sp, fp, #4
   10adc:	e8bd8800 	pop	{fp, pc}
   10ae0:	000147dc 	ldrdeq	r4, [r1], -ip
   10ae4:	000147e0 	andeq	r4, r1, r0, ror #15
   10ae8:	000147d8 	ldrdeq	r4, [r1], -r8
   10aec:	000147b4 			; <UNDEFINED> instruction: 0x000147b4
   10af0:	000147b8 			; <UNDEFINED> instruction: 0x000147b8
   10af4:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10af8:	00014764 	andeq	r4, r1, r4, ror #14

00010afc <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   10afc:	e92d4800 	push	{fp, lr}
   10b00:	e28db004 	add	fp, sp, #4
   10b04:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   10b08:	ebffff4b 	bl	1083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   10b0c:	ebffff86 	bl	1092c <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b10:	ea000008 	b	10b38 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   10b14:	e59f30f8 	ldr	r3, [pc, #248]	; 10c14 <vCoRoutineSchedule+0x118>
   10b18:	e5933000 	ldr	r3, [r3]
   10b1c:	e3530000 	cmp	r3, #0
   10b20:	0a000038 	beq	10c08 <vCoRoutineSchedule+0x10c>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   10b24:	e59f30e8 	ldr	r3, [pc, #232]	; 10c14 <vCoRoutineSchedule+0x118>
   10b28:	e5933000 	ldr	r3, [r3]
   10b2c:	e2433001 	sub	r3, r3, #1
   10b30:	e59f20dc 	ldr	r2, [pc, #220]	; 10c14 <vCoRoutineSchedule+0x118>
   10b34:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   10b38:	e59f30d4 	ldr	r3, [pc, #212]	; 10c14 <vCoRoutineSchedule+0x118>
   10b3c:	e5932000 	ldr	r2, [r3]
   10b40:	e59f10d0 	ldr	r1, [pc, #208]	; 10c18 <vCoRoutineSchedule+0x11c>
   10b44:	e1a03002 	mov	r3, r2
   10b48:	e1a03103 	lsl	r3, r3, #2
   10b4c:	e0833002 	add	r3, r3, r2
   10b50:	e1a03103 	lsl	r3, r3, #2
   10b54:	e0813003 	add	r3, r1, r3
   10b58:	e5933000 	ldr	r3, [r3]
   10b5c:	e3530000 	cmp	r3, #0
   10b60:	0affffeb 	beq	10b14 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   10b64:	e59f30a8 	ldr	r3, [pc, #168]	; 10c14 <vCoRoutineSchedule+0x118>
   10b68:	e5932000 	ldr	r2, [r3]
   10b6c:	e1a03002 	mov	r3, r2
   10b70:	e1a03103 	lsl	r3, r3, #2
   10b74:	e0833002 	add	r3, r3, r2
   10b78:	e1a03103 	lsl	r3, r3, #2
   10b7c:	e59f2094 	ldr	r2, [pc, #148]	; 10c18 <vCoRoutineSchedule+0x11c>
   10b80:	e0833002 	add	r3, r3, r2
   10b84:	e50b3008 	str	r3, [fp, #-8]
   10b88:	e51b3008 	ldr	r3, [fp, #-8]
   10b8c:	e5933004 	ldr	r3, [r3, #4]
   10b90:	e5932004 	ldr	r2, [r3, #4]
   10b94:	e51b3008 	ldr	r3, [fp, #-8]
   10b98:	e5832004 	str	r2, [r3, #4]
   10b9c:	e51b3008 	ldr	r3, [fp, #-8]
   10ba0:	e5932004 	ldr	r2, [r3, #4]
   10ba4:	e51b3008 	ldr	r3, [fp, #-8]
   10ba8:	e2833008 	add	r3, r3, #8
   10bac:	e1520003 	cmp	r2, r3
   10bb0:	1a000004 	bne	10bc8 <vCoRoutineSchedule+0xcc>
   10bb4:	e51b3008 	ldr	r3, [fp, #-8]
   10bb8:	e5933004 	ldr	r3, [r3, #4]
   10bbc:	e5932004 	ldr	r2, [r3, #4]
   10bc0:	e51b3008 	ldr	r3, [fp, #-8]
   10bc4:	e5832004 	str	r2, [r3, #4]
   10bc8:	e51b3008 	ldr	r3, [fp, #-8]
   10bcc:	e5933004 	ldr	r3, [r3, #4]
   10bd0:	e593300c 	ldr	r3, [r3, #12]
   10bd4:	e59f2040 	ldr	r2, [pc, #64]	; 10c1c <vCoRoutineSchedule+0x120>
   10bd8:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   10bdc:	e59f3038 	ldr	r3, [pc, #56]	; 10c1c <vCoRoutineSchedule+0x120>
   10be0:	e5933000 	ldr	r3, [r3]
   10be4:	e5933000 	ldr	r3, [r3]
   10be8:	e59f202c 	ldr	r2, [pc, #44]	; 10c1c <vCoRoutineSchedule+0x120>
   10bec:	e5920000 	ldr	r0, [r2]
   10bf0:	e59f2024 	ldr	r2, [pc, #36]	; 10c1c <vCoRoutineSchedule+0x120>
   10bf4:	e5922000 	ldr	r2, [r2]
   10bf8:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   10bfc:	e1a01002 	mov	r1, r2
   10c00:	e12fff33 	blx	r3

	return;
   10c04:	ea000000 	b	10c0c <vCoRoutineSchedule+0x110>
			return;
   10c08:	e320f000 	nop	{0}
}
   10c0c:	e24bd004 	sub	sp, fp, #4
   10c10:	e8bd8800 	pop	{fp, pc}
   10c14:	000147d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   10c18:	00014764 	andeq	r4, r1, r4, ror #14
   10c1c:	000147d0 	ldrdeq	r4, [r1], -r0

00010c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   10c20:	e92d4800 	push	{fp, lr}
   10c24:	e28db004 	add	fp, sp, #4
   10c28:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c2c:	e3a03000 	mov	r3, #0
   10c30:	e50b3008 	str	r3, [fp, #-8]
   10c34:	ea00000b 	b	10c68 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   10c38:	e51b2008 	ldr	r2, [fp, #-8]
   10c3c:	e1a03002 	mov	r3, r2
   10c40:	e1a03103 	lsl	r3, r3, #2
   10c44:	e0833002 	add	r3, r3, r2
   10c48:	e1a03103 	lsl	r3, r3, #2
   10c4c:	e59f205c 	ldr	r2, [pc, #92]	; 10cb0 <prvInitialiseCoRoutineLists+0x90>
   10c50:	e0833002 	add	r3, r3, r2
   10c54:	e1a00003 	mov	r0, r3
   10c58:	eb00003d 	bl	10d54 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   10c5c:	e51b3008 	ldr	r3, [fp, #-8]
   10c60:	e2833001 	add	r3, r3, #1
   10c64:	e50b3008 	str	r3, [fp, #-8]
   10c68:	e51b3008 	ldr	r3, [fp, #-8]
   10c6c:	e3530001 	cmp	r3, #1
   10c70:	9afffff0 	bls	10c38 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   10c74:	e59f0038 	ldr	r0, [pc, #56]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c78:	eb000035 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   10c7c:	e59f0034 	ldr	r0, [pc, #52]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10c80:	eb000033 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   10c84:	e59f0030 	ldr	r0, [pc, #48]	; 10cbc <prvInitialiseCoRoutineLists+0x9c>
   10c88:	eb000031 	bl	10d54 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   10c8c:	e59f302c 	ldr	r3, [pc, #44]	; 10cc0 <prvInitialiseCoRoutineLists+0xa0>
   10c90:	e59f201c 	ldr	r2, [pc, #28]	; 10cb4 <prvInitialiseCoRoutineLists+0x94>
   10c94:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   10c98:	e59f3024 	ldr	r3, [pc, #36]	; 10cc4 <prvInitialiseCoRoutineLists+0xa4>
   10c9c:	e59f2014 	ldr	r2, [pc, #20]	; 10cb8 <prvInitialiseCoRoutineLists+0x98>
   10ca0:	e5832000 	str	r2, [r3]
}
   10ca4:	e320f000 	nop	{0}
   10ca8:	e24bd004 	sub	sp, fp, #4
   10cac:	e8bd8800 	pop	{fp, pc}
   10cb0:	00014764 	andeq	r4, r1, r4, ror #14
   10cb4:	0001478c 	andeq	r4, r1, ip, lsl #15
   10cb8:	000147a0 	andeq	r4, r1, r0, lsr #15
   10cbc:	000147bc 			; <UNDEFINED> instruction: 0x000147bc
   10cc0:	000147b4 			; <UNDEFINED> instruction: 0x000147b4
   10cc4:	000147b8 			; <UNDEFINED> instruction: 0x000147b8

00010cc8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   10cc8:	e92d4800 	push	{fp, lr}
   10ccc:	e28db004 	add	fp, sp, #4
   10cd0:	e24dd010 	sub	sp, sp, #16
   10cd4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   10cd8:	e51b3010 	ldr	r3, [fp, #-16]
   10cdc:	e593300c 	ldr	r3, [r3, #12]
   10ce0:	e593300c 	ldr	r3, [r3, #12]
   10ce4:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   10ce8:	e51b300c 	ldr	r3, [fp, #-12]
   10cec:	e2833018 	add	r3, r3, #24
   10cf0:	e1a00003 	mov	r0, r3
   10cf4:	eb000097 	bl	10f58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   10cf8:	e51b300c 	ldr	r3, [fp, #-12]
   10cfc:	e2833018 	add	r3, r3, #24
   10d00:	e1a01003 	mov	r1, r3
   10d04:	e59f0040 	ldr	r0, [pc, #64]	; 10d4c <xCoRoutineRemoveFromEventList+0x84>
   10d08:	eb000036 	bl	10de8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   10d0c:	e51b300c 	ldr	r3, [fp, #-12]
   10d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   10d14:	e59f3034 	ldr	r3, [pc, #52]	; 10d50 <xCoRoutineRemoveFromEventList+0x88>
   10d18:	e5933000 	ldr	r3, [r3]
   10d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   10d20:	e1520003 	cmp	r2, r3
   10d24:	3a000002 	bcc	10d34 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   10d28:	e3a03001 	mov	r3, #1
   10d2c:	e50b3008 	str	r3, [fp, #-8]
   10d30:	ea000001 	b	10d3c <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   10d34:	e3a03000 	mov	r3, #0
   10d38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   10d3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   10d40:	e1a00003 	mov	r0, r3
   10d44:	e24bd004 	sub	sp, fp, #4
   10d48:	e8bd8800 	pop	{fp, pc}
   10d4c:	000147bc 			; <UNDEFINED> instruction: 0x000147bc
   10d50:	000147d0 	ldrdeq	r4, [r1], -r0

00010d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   10d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10d58:	e28db000 	add	fp, sp, #0
   10d5c:	e24dd00c 	sub	sp, sp, #12
   10d60:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   10d64:	e51b3008 	ldr	r3, [fp, #-8]
   10d68:	e2832008 	add	r2, r3, #8
   10d6c:	e51b3008 	ldr	r3, [fp, #-8]
   10d70:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   10d74:	e51b3008 	ldr	r3, [fp, #-8]
   10d78:	e3e02000 	mvn	r2, #0
   10d7c:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   10d80:	e51b3008 	ldr	r3, [fp, #-8]
   10d84:	e2832008 	add	r2, r3, #8
   10d88:	e51b3008 	ldr	r3, [fp, #-8]
   10d8c:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   10d90:	e51b3008 	ldr	r3, [fp, #-8]
   10d94:	e2832008 	add	r2, r3, #8
   10d98:	e51b3008 	ldr	r3, [fp, #-8]
   10d9c:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   10da0:	e51b3008 	ldr	r3, [fp, #-8]
   10da4:	e3a02000 	mov	r2, #0
   10da8:	e5832000 	str	r2, [r3]
}
   10dac:	e320f000 	nop	{0}
   10db0:	e28bd000 	add	sp, fp, #0
   10db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10db8:	e12fff1e 	bx	lr

00010dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   10dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dc0:	e28db000 	add	fp, sp, #0
   10dc4:	e24dd00c 	sub	sp, sp, #12
   10dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   10dcc:	e51b3008 	ldr	r3, [fp, #-8]
   10dd0:	e3a02000 	mov	r2, #0
   10dd4:	e5832010 	str	r2, [r3, #16]
}
   10dd8:	e320f000 	nop	{0}
   10ddc:	e28bd000 	add	sp, fp, #0
   10de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10de4:	e12fff1e 	bx	lr

00010de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   10de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10dec:	e28db000 	add	fp, sp, #0
   10df0:	e24dd014 	sub	sp, sp, #20
   10df4:	e50b0010 	str	r0, [fp, #-16]
   10df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   10dfc:	e51b3010 	ldr	r3, [fp, #-16]
   10e00:	e5933004 	ldr	r3, [r3, #4]
   10e04:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   10e08:	e51b3008 	ldr	r3, [fp, #-8]
   10e0c:	e5932004 	ldr	r2, [r3, #4]
   10e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e14:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   10e18:	e51b3010 	ldr	r3, [fp, #-16]
   10e1c:	e5932004 	ldr	r2, [r3, #4]
   10e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e24:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10e28:	e51b3008 	ldr	r3, [fp, #-8]
   10e2c:	e5933004 	ldr	r3, [r3, #4]
   10e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e34:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   10e38:	e51b3008 	ldr	r3, [fp, #-8]
   10e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e40:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   10e44:	e51b3010 	ldr	r3, [fp, #-16]
   10e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10e4c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e54:	e51b2010 	ldr	r2, [fp, #-16]
   10e58:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10e5c:	e51b3010 	ldr	r3, [fp, #-16]
   10e60:	e5933000 	ldr	r3, [r3]
   10e64:	e2832001 	add	r2, r3, #1
   10e68:	e51b3010 	ldr	r3, [fp, #-16]
   10e6c:	e5832000 	str	r2, [r3]
}
   10e70:	e320f000 	nop	{0}
   10e74:	e28bd000 	add	sp, fp, #0
   10e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10e7c:	e12fff1e 	bx	lr

00010e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   10e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10e84:	e28db000 	add	fp, sp, #0
   10e88:	e24dd014 	sub	sp, sp, #20
   10e8c:	e50b0010 	str	r0, [fp, #-16]
   10e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   10e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10e98:	e5933000 	ldr	r3, [r3]
   10e9c:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   10ea0:	e51b300c 	ldr	r3, [fp, #-12]
   10ea4:	e3730001 	cmn	r3, #1
   10ea8:	1a000003 	bne	10ebc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   10eac:	e51b3010 	ldr	r3, [fp, #-16]
   10eb0:	e5933010 	ldr	r3, [r3, #16]
   10eb4:	e50b3008 	str	r3, [fp, #-8]
   10eb8:	ea00000c 	b	10ef0 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   10ebc:	e51b3010 	ldr	r3, [fp, #-16]
   10ec0:	e2833008 	add	r3, r3, #8
   10ec4:	e50b3008 	str	r3, [fp, #-8]
   10ec8:	ea000002 	b	10ed8 <vListInsert+0x58>
   10ecc:	e51b3008 	ldr	r3, [fp, #-8]
   10ed0:	e5933004 	ldr	r3, [r3, #4]
   10ed4:	e50b3008 	str	r3, [fp, #-8]
   10ed8:	e51b3008 	ldr	r3, [fp, #-8]
   10edc:	e5933004 	ldr	r3, [r3, #4]
   10ee0:	e5933000 	ldr	r3, [r3]
   10ee4:	e51b200c 	ldr	r2, [fp, #-12]
   10ee8:	e1520003 	cmp	r2, r3
   10eec:	2afffff6 	bcs	10ecc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   10ef0:	e51b3008 	ldr	r3, [fp, #-8]
   10ef4:	e5932004 	ldr	r2, [r3, #4]
   10ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10efc:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   10f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f04:	e5933004 	ldr	r3, [r3, #4]
   10f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f0c:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   10f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f14:	e51b2008 	ldr	r2, [fp, #-8]
   10f18:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   10f1c:	e51b3008 	ldr	r3, [fp, #-8]
   10f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   10f24:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   10f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   10f2c:	e51b2010 	ldr	r2, [fp, #-16]
   10f30:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   10f34:	e51b3010 	ldr	r3, [fp, #-16]
   10f38:	e5933000 	ldr	r3, [r3]
   10f3c:	e2832001 	add	r2, r3, #1
   10f40:	e51b3010 	ldr	r3, [fp, #-16]
   10f44:	e5832000 	str	r2, [r3]
}
   10f48:	e320f000 	nop	{0}
   10f4c:	e28bd000 	add	sp, fp, #0
   10f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f54:	e12fff1e 	bx	lr

00010f58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   10f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f5c:	e28db000 	add	fp, sp, #0
   10f60:	e24dd014 	sub	sp, sp, #20
   10f64:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   10f68:	e51b3010 	ldr	r3, [fp, #-16]
   10f6c:	e5933004 	ldr	r3, [r3, #4]
   10f70:	e51b2010 	ldr	r2, [fp, #-16]
   10f74:	e5922008 	ldr	r2, [r2, #8]
   10f78:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   10f7c:	e51b3010 	ldr	r3, [fp, #-16]
   10f80:	e5933008 	ldr	r3, [r3, #8]
   10f84:	e51b2010 	ldr	r2, [fp, #-16]
   10f88:	e5922004 	ldr	r2, [r2, #4]
   10f8c:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   10f90:	e51b3010 	ldr	r3, [fp, #-16]
   10f94:	e5933010 	ldr	r3, [r3, #16]
   10f98:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   10f9c:	e51b3008 	ldr	r3, [fp, #-8]
   10fa0:	e5933004 	ldr	r3, [r3, #4]
   10fa4:	e51b2010 	ldr	r2, [fp, #-16]
   10fa8:	e1520003 	cmp	r2, r3
   10fac:	1a000003 	bne	10fc0 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   10fb0:	e51b3010 	ldr	r3, [fp, #-16]
   10fb4:	e5932008 	ldr	r2, [r3, #8]
   10fb8:	e51b3008 	ldr	r3, [fp, #-8]
   10fbc:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   10fc0:	e51b3010 	ldr	r3, [fp, #-16]
   10fc4:	e3a02000 	mov	r2, #0
   10fc8:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   10fcc:	e51b3008 	ldr	r3, [fp, #-8]
   10fd0:	e5933000 	ldr	r3, [r3]
   10fd4:	e2432001 	sub	r2, r3, #1
   10fd8:	e51b3008 	ldr	r3, [fp, #-8]
   10fdc:	e5832000 	str	r2, [r3]
}
   10fe0:	e320f000 	nop	{0}
   10fe4:	e28bd000 	add	sp, fp, #0
   10fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10fec:	e12fff1e 	bx	lr

00010ff0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   10ff0:	e92d4800 	push	{fp, lr}
   10ff4:	e28db004 	add	fp, sp, #4
   10ff8:	e24dd008 	sub	sp, sp, #8
   10ffc:	e50b0008 	str	r0, [fp, #-8]
   11000:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11004:	ebfffd4d 	bl	10540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   11008:	e51b3008 	ldr	r3, [fp, #-8]
   1100c:	e5932000 	ldr	r2, [r3]
   11010:	e51b3008 	ldr	r3, [fp, #-8]
   11014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11018:	e51b1008 	ldr	r1, [fp, #-8]
   1101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11020:	e0030391 	mul	r3, r1, r3
   11024:	e0822003 	add	r2, r2, r3
   11028:	e51b3008 	ldr	r3, [fp, #-8]
   1102c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   11030:	e51b3008 	ldr	r3, [fp, #-8]
   11034:	e3a02000 	mov	r2, #0
   11038:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1103c:	e51b3008 	ldr	r3, [fp, #-8]
   11040:	e5932000 	ldr	r2, [r3]
   11044:	e51b3008 	ldr	r3, [fp, #-8]
   11048:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   1104c:	e51b3008 	ldr	r3, [fp, #-8]
   11050:	e5932000 	ldr	r2, [r3]
   11054:	e51b3008 	ldr	r3, [fp, #-8]
   11058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   1105c:	e2433001 	sub	r3, r3, #1
   11060:	e51b1008 	ldr	r1, [fp, #-8]
   11064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   11068:	e0030391 	mul	r3, r1, r3
   1106c:	e0822003 	add	r2, r2, r3
   11070:	e51b3008 	ldr	r3, [fp, #-8]
   11074:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   11078:	e51b3008 	ldr	r3, [fp, #-8]
   1107c:	e3e02000 	mvn	r2, #0
   11080:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   11084:	e51b3008 	ldr	r3, [fp, #-8]
   11088:	e3e02000 	mvn	r2, #0
   1108c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   11090:	e51b300c 	ldr	r3, [fp, #-12]
   11094:	e3530000 	cmp	r3, #0
   11098:	1a00000c 	bne	110d0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1109c:	e51b3008 	ldr	r3, [fp, #-8]
   110a0:	e5933010 	ldr	r3, [r3, #16]
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0a000010 	beq	110f0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   110ac:	e51b3008 	ldr	r3, [fp, #-8]
   110b0:	e2833010 	add	r3, r3, #16
   110b4:	e1a00003 	mov	r0, r3
   110b8:	eb000760 	bl	12e40 <xTaskRemoveFromEventList>
   110bc:	e1a03000 	mov	r3, r0
   110c0:	e3530001 	cmp	r3, #1
   110c4:	1a000009 	bne	110f0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   110c8:	ef000000 	svc	0x00000000
   110cc:	ea000007 	b	110f0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   110d0:	e51b3008 	ldr	r3, [fp, #-8]
   110d4:	e2833010 	add	r3, r3, #16
   110d8:	e1a00003 	mov	r0, r3
   110dc:	ebffff1c 	bl	10d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   110e0:	e51b3008 	ldr	r3, [fp, #-8]
   110e4:	e2833024 	add	r3, r3, #36	; 0x24
   110e8:	e1a00003 	mov	r0, r3
   110ec:	ebffff18 	bl	10d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   110f0:	ebfffd23 	bl	10584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   110f4:	e3a03001 	mov	r3, #1
}
   110f8:	e1a00003 	mov	r0, r3
   110fc:	e24bd004 	sub	sp, fp, #4
   11100:	e8bd8800 	pop	{fp, pc}

00011104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   11104:	e92d4800 	push	{fp, lr}
   11108:	e28db004 	add	fp, sp, #4
   1110c:	e24dd020 	sub	sp, sp, #32
   11110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11118:	e1a03002 	mov	r3, r2
   1111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   11120:	e3a03000 	mov	r3, #0
   11124:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   11128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1112c:	e3530000 	cmp	r3, #0
   11130:	0a000021 	beq	111bc <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   11134:	e3a0004c 	mov	r0, #76	; 0x4c
   11138:	eb000b40 	bl	13e40 <pvPortMalloc>
   1113c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   11140:	e51b300c 	ldr	r3, [fp, #-12]
   11144:	e3530000 	cmp	r3, #0
   11148:	0a00001b 	beq	111bc <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   1114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11154:	e0030392 	mul	r3, r2, r3
   11158:	e2833001 	add	r3, r3, #1
   1115c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   11160:	e51b0010 	ldr	r0, [fp, #-16]
   11164:	eb000b35 	bl	13e40 <pvPortMalloc>
   11168:	e1a02000 	mov	r2, r0
   1116c:	e51b300c 	ldr	r3, [fp, #-12]
   11170:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   11174:	e51b300c 	ldr	r3, [fp, #-12]
   11178:	e5933000 	ldr	r3, [r3]
   1117c:	e3530000 	cmp	r3, #0
   11180:	0a00000b 	beq	111b4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   11184:	e51b300c 	ldr	r3, [fp, #-12]
   11188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   11190:	e51b300c 	ldr	r3, [fp, #-12]
   11194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11198:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   1119c:	e3a01001 	mov	r1, #1
   111a0:	e51b000c 	ldr	r0, [fp, #-12]
   111a4:	ebffff91 	bl	10ff0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   111a8:	e51b300c 	ldr	r3, [fp, #-12]
   111ac:	e50b3008 	str	r3, [fp, #-8]
   111b0:	ea000001 	b	111bc <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   111b4:	e51b000c 	ldr	r0, [fp, #-12]
   111b8:	eb000b92 	bl	14008 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   111bc:	e51b3008 	ldr	r3, [fp, #-8]
}
   111c0:	e1a00003 	mov	r0, r3
   111c4:	e24bd004 	sub	sp, fp, #4
   111c8:	e8bd8800 	pop	{fp, pc}

000111cc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   111cc:	e92d4800 	push	{fp, lr}
   111d0:	e28db004 	add	fp, sp, #4
   111d4:	e24dd020 	sub	sp, sp, #32
   111d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   111dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   111e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   111e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   111e8:	e3a03000 	mov	r3, #0
   111ec:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   111f0:	ebfffcd2 	bl	10540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   111f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   111f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   111fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11204:	e1520003 	cmp	r2, r3
   11208:	2a000012 	bcs	11258 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11218:	eb00016a 	bl	117c8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11224:	e3530000 	cmp	r3, #0
   11228:	0a000007 	beq	1124c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   1122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11230:	e2833024 	add	r3, r3, #36	; 0x24
   11234:	e1a00003 	mov	r0, r3
   11238:	eb000700 	bl	12e40 <xTaskRemoveFromEventList>
   1123c:	e1a03000 	mov	r3, r0
   11240:	e3530001 	cmp	r3, #1
   11244:	1a000000 	bne	1124c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   11248:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   1124c:	ebfffccc 	bl	10584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   11250:	e3a03001 	mov	r3, #1
   11254:	ea000042 	b	11364 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1125c:	e3530000 	cmp	r3, #0
   11260:	1a000002 	bne	11270 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11264:	ebfffcc6 	bl	10584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   11268:	e3a03000 	mov	r3, #0
   1126c:	ea00003c 	b	11364 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   11270:	e51b3008 	ldr	r3, [fp, #-8]
   11274:	e3530000 	cmp	r3, #0
   11278:	1a000004 	bne	11290 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1127c:	e24b3010 	sub	r3, fp, #16
   11280:	e1a00003 	mov	r0, r3
   11284:	eb000733 	bl	12f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11288:	e3a03001 	mov	r3, #1
   1128c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11290:	ebfffcbb 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11294:	eb000513 	bl	126e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11298:	ebfffca8 	bl	10540 <vPortEnterCritical>
   1129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   112a4:	e3730001 	cmn	r3, #1
   112a8:	1a000002 	bne	112b8 <xQueueGenericSend+0xec>
   112ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112b0:	e3a02000 	mov	r2, #0
   112b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   112b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   112c0:	e3730001 	cmn	r3, #1
   112c4:	1a000002 	bne	112d4 <xQueueGenericSend+0x108>
   112c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   112cc:	e3a02000 	mov	r2, #0
   112d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   112d4:	ebfffcaa 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   112d8:	e24b2020 	sub	r2, fp, #32
   112dc:	e24b3010 	sub	r3, fp, #16
   112e0:	e1a01002 	mov	r1, r2
   112e4:	e1a00003 	mov	r0, r3
   112e8:	eb00072c 	bl	12fa0 <xTaskCheckForTimeOut>
   112ec:	e1a03000 	mov	r3, r0
   112f0:	e3530000 	cmp	r3, #0
   112f4:	1a000016 	bne	11354 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   112f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   112fc:	eb000202 	bl	11b0c <prvIsQueueFull>
   11300:	e1a03000 	mov	r3, r0
   11304:	e3530000 	cmp	r3, #0
   11308:	0a00000d 	beq	11344 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11310:	e2833010 	add	r3, r3, #16
   11314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   11318:	e1a01002 	mov	r1, r2
   1131c:	e1a00003 	mov	r0, r3
   11320:	eb00069f 	bl	12da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   11324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11328:	eb000195 	bl	11984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1132c:	eb0004f9 	bl	12718 <xTaskResumeAll>
   11330:	e1a03000 	mov	r3, r0
   11334:	e3530000 	cmp	r3, #0
   11338:	1affffac 	bne	111f0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   1133c:	ef000000 	svc	0x00000000
   11340:	eaffffaa 	b	111f0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11348:	eb00018d 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1134c:	eb0004f1 	bl	12718 <xTaskResumeAll>
   11350:	eaffffa6 	b	111f0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   11354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11358:	eb000189 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1135c:	eb0004ed 	bl	12718 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   11360:	e3a03000 	mov	r3, #0
		}
	}
}
   11364:	e1a00003 	mov	r0, r3
   11368:	e24bd004 	sub	sp, fp, #4
   1136c:	e8bd8800 	pop	{fp, pc}

00011370 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   11370:	e92d4800 	push	{fp, lr}
   11374:	e28db004 	add	fp, sp, #4
   11378:	e24dd018 	sub	sp, sp, #24
   1137c:	e50b0010 	str	r0, [fp, #-16]
   11380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1138c:	e3a03000 	mov	r3, #0
   11390:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   11394:	e51b3010 	ldr	r3, [fp, #-16]
   11398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1139c:	e51b3010 	ldr	r3, [fp, #-16]
   113a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   113a4:	e1520003 	cmp	r2, r3
   113a8:	2a000021 	bcs	11434 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   113ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   113b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   113b4:	e51b0010 	ldr	r0, [fp, #-16]
   113b8:	eb000102 	bl	117c8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   113bc:	e51b3010 	ldr	r3, [fp, #-16]
   113c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   113c4:	e3730001 	cmn	r3, #1
   113c8:	1a000011 	bne	11414 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   113cc:	e51b3010 	ldr	r3, [fp, #-16]
   113d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   113d4:	e3530000 	cmp	r3, #0
   113d8:	0a000012 	beq	11428 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   113dc:	e51b3010 	ldr	r3, [fp, #-16]
   113e0:	e2833024 	add	r3, r3, #36	; 0x24
   113e4:	e1a00003 	mov	r0, r3
   113e8:	eb000694 	bl	12e40 <xTaskRemoveFromEventList>
   113ec:	e1a03000 	mov	r3, r0
   113f0:	e3530000 	cmp	r3, #0
   113f4:	0a00000b 	beq	11428 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   113f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   113fc:	e3530000 	cmp	r3, #0
   11400:	0a000008 	beq	11428 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   11404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11408:	e3a02001 	mov	r2, #1
   1140c:	e5832000 	str	r2, [r3]
   11410:	ea000004 	b	11428 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   11414:	e51b3010 	ldr	r3, [fp, #-16]
   11418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   1141c:	e2832001 	add	r2, r3, #1
   11420:	e51b3010 	ldr	r3, [fp, #-16]
   11424:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   11428:	e3a03001 	mov	r3, #1
   1142c:	e50b3008 	str	r3, [fp, #-8]
   11430:	ea000001 	b	1143c <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   11434:	e3a03000 	mov	r3, #0
   11438:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1143c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11440:	e1a00003 	mov	r0, r3
   11444:	e24bd004 	sub	sp, fp, #4
   11448:	e8bd8800 	pop	{fp, pc}

0001144c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   1144c:	e92d4800 	push	{fp, lr}
   11450:	e28db004 	add	fp, sp, #4
   11454:	e24dd020 	sub	sp, sp, #32
   11458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   11464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   11468:	e3a03000 	mov	r3, #0
   1146c:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   11470:	ebfffc32 	bl	10540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1147c:	e3530000 	cmp	r3, #0
   11480:	0a00002c 	beq	11538 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   11484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11488:	e593300c 	ldr	r3, [r3, #12]
   1148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   11490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11498:	eb000115 	bl	118f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   1149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	e3530000 	cmp	r3, #0
   114a4:	1a000011 	bne	114f0 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   114a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   114b0:	e2432001 	sub	r2, r3, #1
   114b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   114bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c0:	e5933010 	ldr	r3, [r3, #16]
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000017 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   114cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114d0:	e2833010 	add	r3, r3, #16
   114d4:	e1a00003 	mov	r0, r3
   114d8:	eb000658 	bl	12e40 <xTaskRemoveFromEventList>
   114dc:	e1a03000 	mov	r3, r0
   114e0:	e3530001 	cmp	r3, #1
   114e4:	1a000010 	bne	1152c <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   114e8:	ef000000 	svc	0x00000000
   114ec:	ea00000e 	b	1152c <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   114f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   114f4:	e51b200c 	ldr	r2, [fp, #-12]
   114f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   114fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11504:	e3530000 	cmp	r3, #0
   11508:	0a000007 	beq	1152c <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11510:	e2833024 	add	r3, r3, #36	; 0x24
   11514:	e1a00003 	mov	r0, r3
   11518:	eb000648 	bl	12e40 <xTaskRemoveFromEventList>
   1151c:	e1a03000 	mov	r3, r0
   11520:	e3530000 	cmp	r3, #0
   11524:	0a000000 	beq	1152c <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   11528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   1152c:	ebfffc14 	bl	10584 <vPortExitCritical>
				return pdPASS;
   11530:	e3a03001 	mov	r3, #1
   11534:	ea000042 	b	11644 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   11538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1153c:	e3530000 	cmp	r3, #0
   11540:	1a000002 	bne	11550 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   11544:	ebfffc0e 	bl	10584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   11548:	e3a03000 	mov	r3, #0
   1154c:	ea00003c 	b	11644 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   11550:	e51b3008 	ldr	r3, [fp, #-8]
   11554:	e3530000 	cmp	r3, #0
   11558:	1a000004 	bne	11570 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   1155c:	e24b3014 	sub	r3, fp, #20
   11560:	e1a00003 	mov	r0, r3
   11564:	eb00067b 	bl	12f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   11568:	e3a03001 	mov	r3, #1
   1156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   11570:	ebfffc03 	bl	10584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   11574:	eb00045b 	bl	126e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   11578:	ebfffbf0 	bl	10540 <vPortEnterCritical>
   1157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11584:	e3730001 	cmn	r3, #1
   11588:	1a000002 	bne	11598 <xQueueGenericReceive+0x14c>
   1158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11590:	e3a02000 	mov	r2, #0
   11594:	e5832044 	str	r2, [r3, #68]	; 0x44
   11598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   115a0:	e3730001 	cmn	r3, #1
   115a4:	1a000002 	bne	115b4 <xQueueGenericReceive+0x168>
   115a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115ac:	e3a02000 	mov	r2, #0
   115b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   115b4:	ebfffbf2 	bl	10584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   115b8:	e24b2020 	sub	r2, fp, #32
   115bc:	e24b3014 	sub	r3, fp, #20
   115c0:	e1a01002 	mov	r1, r2
   115c4:	e1a00003 	mov	r0, r3
   115c8:	eb000674 	bl	12fa0 <xTaskCheckForTimeOut>
   115cc:	e1a03000 	mov	r3, r0
   115d0:	e3530000 	cmp	r3, #0
   115d4:	1a000016 	bne	11634 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   115d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   115dc:	eb000129 	bl	11a88 <prvIsQueueEmpty>
   115e0:	e1a03000 	mov	r3, r0
   115e4:	e3530000 	cmp	r3, #0
   115e8:	0a00000d 	beq	11624 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   115ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	e2833024 	add	r3, r3, #36	; 0x24
   115f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   115f8:	e1a01002 	mov	r1, r2
   115fc:	e1a00003 	mov	r0, r3
   11600:	eb0005e7 	bl	12da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   11604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11608:	eb0000dd 	bl	11984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1160c:	eb000441 	bl	12718 <xTaskResumeAll>
   11610:	e1a03000 	mov	r3, r0
   11614:	e3530000 	cmp	r3, #0
   11618:	1affff94 	bne	11470 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   1161c:	ef000000 	svc	0x00000000
   11620:	eaffff92 	b	11470 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   11624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11628:	eb0000d5 	bl	11984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1162c:	eb000439 	bl	12718 <xTaskResumeAll>
   11630:	eaffff8e 	b	11470 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   11634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11638:	eb0000d1 	bl	11984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1163c:	eb000435 	bl	12718 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   11640:	e3a03000 	mov	r3, #0
		}
	}
}
   11644:	e1a00003 	mov	r0, r3
   11648:	e24bd004 	sub	sp, fp, #4
   1164c:	e8bd8800 	pop	{fp, pc}

00011650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   11650:	e92d4800 	push	{fp, lr}
   11654:	e28db004 	add	fp, sp, #4
   11658:	e24dd018 	sub	sp, sp, #24
   1165c:	e50b0010 	str	r0, [fp, #-16]
   11660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   11664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   11668:	e3a03000 	mov	r3, #0
   1166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   11670:	e51b3010 	ldr	r3, [fp, #-16]
   11674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11678:	e3530000 	cmp	r3, #0
   1167c:	0a000025 	beq	11718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   11680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   11684:	e51b0010 	ldr	r0, [fp, #-16]
   11688:	eb000099 	bl	118f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   1168c:	e51b3010 	ldr	r3, [fp, #-16]
   11690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11694:	e2432001 	sub	r2, r3, #1
   11698:	e51b3010 	ldr	r3, [fp, #-16]
   1169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   116a0:	e51b3010 	ldr	r3, [fp, #-16]
   116a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   116a8:	e3730001 	cmn	r3, #1
   116ac:	1a000011 	bne	116f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   116b0:	e51b3010 	ldr	r3, [fp, #-16]
   116b4:	e5933010 	ldr	r3, [r3, #16]
   116b8:	e3530000 	cmp	r3, #0
   116bc:	0a000012 	beq	1170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   116c0:	e51b3010 	ldr	r3, [fp, #-16]
   116c4:	e2833010 	add	r3, r3, #16
   116c8:	e1a00003 	mov	r0, r3
   116cc:	eb0005db 	bl	12e40 <xTaskRemoveFromEventList>
   116d0:	e1a03000 	mov	r3, r0
   116d4:	e3530000 	cmp	r3, #0
   116d8:	0a00000b 	beq	1170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   116dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e0:	e3530000 	cmp	r3, #0
   116e4:	0a000008 	beq	1170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   116e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ec:	e3a02001 	mov	r2, #1
   116f0:	e5832000 	str	r2, [r3]
   116f4:	ea000004 	b	1170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   116f8:	e51b3010 	ldr	r3, [fp, #-16]
   116fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11700:	e2832001 	add	r2, r3, #1
   11704:	e51b3010 	ldr	r3, [fp, #-16]
   11708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   1170c:	e3a03001 	mov	r3, #1
   11710:	e50b3008 	str	r3, [fp, #-8]
   11714:	ea000001 	b	11720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   11718:	e3a03000 	mov	r3, #0
   1171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   11720:	e51b3008 	ldr	r3, [fp, #-8]
}
   11724:	e1a00003 	mov	r0, r3
   11728:	e24bd004 	sub	sp, fp, #4
   1172c:	e8bd8800 	pop	{fp, pc}

00011730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   11730:	e92d4800 	push	{fp, lr}
   11734:	e28db004 	add	fp, sp, #4
   11738:	e24dd010 	sub	sp, sp, #16
   1173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   11740:	ebfffb7e 	bl	10540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   11744:	e51b3010 	ldr	r3, [fp, #-16]
   11748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11750:	ebfffb8b 	bl	10584 <vPortExitCritical>

	return uxReturn;
   11754:	e51b3008 	ldr	r3, [fp, #-8]
}
   11758:	e1a00003 	mov	r0, r3
   1175c:	e24bd004 	sub	sp, fp, #4
   11760:	e8bd8800 	pop	{fp, pc}

00011764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   11764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11768:	e28db000 	add	fp, sp, #0
   1176c:	e24dd014 	sub	sp, sp, #20
   11770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   11774:	e51b3010 	ldr	r3, [fp, #-16]
   11778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   1177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   11780:	e51b3008 	ldr	r3, [fp, #-8]
}
   11784:	e1a00003 	mov	r0, r3
   11788:	e28bd000 	add	sp, fp, #0
   1178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11790:	e12fff1e 	bx	lr

00011794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   11794:	e92d4800 	push	{fp, lr}
   11798:	e28db004 	add	fp, sp, #4
   1179c:	e24dd008 	sub	sp, sp, #8
   117a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   117a4:	e51b3008 	ldr	r3, [fp, #-8]
   117a8:	e5933000 	ldr	r3, [r3]
   117ac:	e1a00003 	mov	r0, r3
   117b0:	eb000a14 	bl	14008 <vPortFree>
	vPortFree( pxQueue );
   117b4:	e51b0008 	ldr	r0, [fp, #-8]
   117b8:	eb000a12 	bl	14008 <vPortFree>
}
   117bc:	e320f000 	nop	{0}
   117c0:	e24bd004 	sub	sp, fp, #4
   117c4:	e8bd8800 	pop	{fp, pc}

000117c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   117c8:	e92d4800 	push	{fp, lr}
   117cc:	e28db004 	add	fp, sp, #4
   117d0:	e24dd010 	sub	sp, sp, #16
   117d4:	e50b0008 	str	r0, [fp, #-8]
   117d8:	e50b100c 	str	r1, [fp, #-12]
   117dc:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   117e0:	e51b3008 	ldr	r3, [fp, #-8]
   117e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   117e8:	e3530000 	cmp	r3, #0
   117ec:	0a000038 	beq	118d4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   117f0:	e51b3010 	ldr	r3, [fp, #-16]
   117f4:	e3530000 	cmp	r3, #0
   117f8:	1a000018 	bne	11860 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   117fc:	e51b3008 	ldr	r3, [fp, #-8]
   11800:	e5930008 	ldr	r0, [r3, #8]
   11804:	e51b3008 	ldr	r3, [fp, #-8]
   11808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1180c:	e1a02003 	mov	r2, r3
   11810:	e51b100c 	ldr	r1, [fp, #-12]
   11814:	eb000b0b 	bl	14448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   11818:	e51b3008 	ldr	r3, [fp, #-8]
   1181c:	e5932008 	ldr	r2, [r3, #8]
   11820:	e51b3008 	ldr	r3, [fp, #-8]
   11824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11828:	e0822003 	add	r2, r2, r3
   1182c:	e51b3008 	ldr	r3, [fp, #-8]
   11830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   11834:	e51b3008 	ldr	r3, [fp, #-8]
   11838:	e5932008 	ldr	r2, [r3, #8]
   1183c:	e51b3008 	ldr	r3, [fp, #-8]
   11840:	e5933004 	ldr	r3, [r3, #4]
   11844:	e1520003 	cmp	r2, r3
   11848:	3a000021 	bcc	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1184c:	e51b3008 	ldr	r3, [fp, #-8]
   11850:	e5932000 	ldr	r2, [r3]
   11854:	e51b3008 	ldr	r3, [fp, #-8]
   11858:	e5832008 	str	r2, [r3, #8]
   1185c:	ea00001c 	b	118d4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   11860:	e51b3008 	ldr	r3, [fp, #-8]
   11864:	e593000c 	ldr	r0, [r3, #12]
   11868:	e51b3008 	ldr	r3, [fp, #-8]
   1186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11870:	e1a02003 	mov	r2, r3
   11874:	e51b100c 	ldr	r1, [fp, #-12]
   11878:	eb000af2 	bl	14448 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   1187c:	e51b3008 	ldr	r3, [fp, #-8]
   11880:	e593200c 	ldr	r2, [r3, #12]
   11884:	e51b3008 	ldr	r3, [fp, #-8]
   11888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1188c:	e2633000 	rsb	r3, r3, #0
   11890:	e0822003 	add	r2, r2, r3
   11894:	e51b3008 	ldr	r3, [fp, #-8]
   11898:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   1189c:	e51b3008 	ldr	r3, [fp, #-8]
   118a0:	e593200c 	ldr	r2, [r3, #12]
   118a4:	e51b3008 	ldr	r3, [fp, #-8]
   118a8:	e5933000 	ldr	r3, [r3]
   118ac:	e1520003 	cmp	r2, r3
   118b0:	2a000007 	bcs	118d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   118b4:	e51b3008 	ldr	r3, [fp, #-8]
   118b8:	e5932004 	ldr	r2, [r3, #4]
   118bc:	e51b3008 	ldr	r3, [fp, #-8]
   118c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   118c4:	e2633000 	rsb	r3, r3, #0
   118c8:	e0822003 	add	r2, r2, r3
   118cc:	e51b3008 	ldr	r3, [fp, #-8]
   118d0:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   118d4:	e51b3008 	ldr	r3, [fp, #-8]
   118d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   118dc:	e2832001 	add	r2, r3, #1
   118e0:	e51b3008 	ldr	r3, [fp, #-8]
   118e4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   118e8:	e320f000 	nop	{0}
   118ec:	e24bd004 	sub	sp, fp, #4
   118f0:	e8bd8800 	pop	{fp, pc}

000118f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   118f4:	e92d4800 	push	{fp, lr}
   118f8:	e28db004 	add	fp, sp, #4
   118fc:	e24dd008 	sub	sp, sp, #8
   11900:	e50b0008 	str	r0, [fp, #-8]
   11904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   11908:	e51b3008 	ldr	r3, [fp, #-8]
   1190c:	e5933000 	ldr	r3, [r3]
   11910:	e3530000 	cmp	r3, #0
   11914:	0a000017 	beq	11978 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   11918:	e51b3008 	ldr	r3, [fp, #-8]
   1191c:	e593200c 	ldr	r2, [r3, #12]
   11920:	e51b3008 	ldr	r3, [fp, #-8]
   11924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11928:	e0822003 	add	r2, r2, r3
   1192c:	e51b3008 	ldr	r3, [fp, #-8]
   11930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   11934:	e51b3008 	ldr	r3, [fp, #-8]
   11938:	e593200c 	ldr	r2, [r3, #12]
   1193c:	e51b3008 	ldr	r3, [fp, #-8]
   11940:	e5933004 	ldr	r3, [r3, #4]
   11944:	e1520003 	cmp	r2, r3
   11948:	3a000003 	bcc	1195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   1194c:	e51b3008 	ldr	r3, [fp, #-8]
   11950:	e5932000 	ldr	r2, [r3]
   11954:	e51b3008 	ldr	r3, [fp, #-8]
   11958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   1195c:	e51b3008 	ldr	r3, [fp, #-8]
   11960:	e593100c 	ldr	r1, [r3, #12]
   11964:	e51b3008 	ldr	r3, [fp, #-8]
   11968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1196c:	e1a02003 	mov	r2, r3
   11970:	e51b000c 	ldr	r0, [fp, #-12]
   11974:	eb000ab3 	bl	14448 <memcpy>
	}
}
   11978:	e320f000 	nop	{0}
   1197c:	e24bd004 	sub	sp, fp, #4
   11980:	e8bd8800 	pop	{fp, pc}

00011984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   11984:	e92d4800 	push	{fp, lr}
   11988:	e28db004 	add	fp, sp, #4
   1198c:	e24dd008 	sub	sp, sp, #8
   11990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   11994:	ebfffae9 	bl	10540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   11998:	ea000010 	b	119e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1199c:	e51b3008 	ldr	r3, [fp, #-8]
   119a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   119a4:	e3530000 	cmp	r3, #0
   119a8:	0a000011 	beq	119f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   119ac:	e51b3008 	ldr	r3, [fp, #-8]
   119b0:	e2833024 	add	r3, r3, #36	; 0x24
   119b4:	e1a00003 	mov	r0, r3
   119b8:	eb000520 	bl	12e40 <xTaskRemoveFromEventList>
   119bc:	e1a03000 	mov	r3, r0
   119c0:	e3530000 	cmp	r3, #0
   119c4:	0a000000 	beq	119cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   119c8:	eb0005b1 	bl	13094 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   119cc:	e51b3008 	ldr	r3, [fp, #-8]
   119d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119d4:	e2432001 	sub	r2, r3, #1
   119d8:	e51b3008 	ldr	r3, [fp, #-8]
   119dc:	e5832048 	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   119e0:	e51b3008 	ldr	r3, [fp, #-8]
   119e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   119e8:	e3530000 	cmp	r3, #0
   119ec:	caffffea 	bgt	1199c <prvUnlockQueue+0x18>
   119f0:	ea000000 	b	119f8 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   119f4:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   119f8:	e51b3008 	ldr	r3, [fp, #-8]
   119fc:	e3e02000 	mvn	r2, #0
   11a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   11a04:	ebfffade 	bl	10584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   11a08:	ebfffacc 	bl	10540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a0c:	ea000010 	b	11a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   11a10:	e51b3008 	ldr	r3, [fp, #-8]
   11a14:	e5933010 	ldr	r3, [r3, #16]
   11a18:	e3530000 	cmp	r3, #0
   11a1c:	0a000011 	beq	11a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   11a20:	e51b3008 	ldr	r3, [fp, #-8]
   11a24:	e2833010 	add	r3, r3, #16
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	eb000503 	bl	12e40 <xTaskRemoveFromEventList>
   11a30:	e1a03000 	mov	r3, r0
   11a34:	e3530000 	cmp	r3, #0
   11a38:	0a000000 	beq	11a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   11a3c:	eb000594 	bl	13094 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   11a40:	e51b3008 	ldr	r3, [fp, #-8]
   11a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a48:	e2432001 	sub	r2, r3, #1
   11a4c:	e51b3008 	ldr	r3, [fp, #-8]
   11a50:	e5832044 	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   11a54:	e51b3008 	ldr	r3, [fp, #-8]
   11a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   11a5c:	e3530000 	cmp	r3, #0
   11a60:	caffffea 	bgt	11a10 <prvUnlockQueue+0x8c>
   11a64:	ea000000 	b	11a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   11a68:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   11a6c:	e51b3008 	ldr	r3, [fp, #-8]
   11a70:	e3e02000 	mvn	r2, #0
   11a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   11a78:	ebfffac1 	bl	10584 <vPortExitCritical>
}
   11a7c:	e320f000 	nop	{0}
   11a80:	e24bd004 	sub	sp, fp, #4
   11a84:	e8bd8800 	pop	{fp, pc}

00011a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   11a88:	e92d4800 	push	{fp, lr}
   11a8c:	e28db004 	add	fp, sp, #4
   11a90:	e24dd010 	sub	sp, sp, #16
   11a94:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11a98:	ebfffaa8 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11a9c:	e51b3010 	ldr	r3, [fp, #-16]
   11aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11aa4:	e3530000 	cmp	r3, #0
   11aa8:	03a03001 	moveq	r3, #1
   11aac:	13a03000 	movne	r3, #0
   11ab0:	e6ef3073 	uxtb	r3, r3
   11ab4:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11ab8:	ebfffab1 	bl	10584 <vPortExitCritical>

	return xReturn;
   11abc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11ac0:	e1a00003 	mov	r0, r3
   11ac4:	e24bd004 	sub	sp, fp, #4
   11ac8:	e8bd8800 	pop	{fp, pc}

00011acc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   11acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11ad0:	e28db000 	add	fp, sp, #0
   11ad4:	e24dd014 	sub	sp, sp, #20
   11ad8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   11adc:	e51b3010 	ldr	r3, [fp, #-16]
   11ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   11ae4:	e3530000 	cmp	r3, #0
   11ae8:	03a03001 	moveq	r3, #1
   11aec:	13a03000 	movne	r3, #0
   11af0:	e6ef3073 	uxtb	r3, r3
   11af4:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11af8:	e51b3008 	ldr	r3, [fp, #-8]
}
   11afc:	e1a00003 	mov	r0, r3
   11b00:	e28bd000 	add	sp, fp, #0
   11b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b08:	e12fff1e 	bx	lr

00011b0c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   11b0c:	e92d4800 	push	{fp, lr}
   11b10:	e28db004 	add	fp, sp, #4
   11b14:	e24dd010 	sub	sp, sp, #16
   11b18:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   11b1c:	ebfffa87 	bl	10540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b20:	e51b3010 	ldr	r3, [fp, #-16]
   11b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b28:	e51b3010 	ldr	r3, [fp, #-16]
   11b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b30:	e1520003 	cmp	r2, r3
   11b34:	03a03001 	moveq	r3, #1
   11b38:	13a03000 	movne	r3, #0
   11b3c:	e6ef3073 	uxtb	r3, r3
   11b40:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   11b44:	ebfffa8e 	bl	10584 <vPortExitCritical>

	return xReturn;
   11b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b4c:	e1a00003 	mov	r0, r3
   11b50:	e24bd004 	sub	sp, fp, #4
   11b54:	e8bd8800 	pop	{fp, pc}

00011b58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   11b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11b5c:	e28db000 	add	fp, sp, #0
   11b60:	e24dd014 	sub	sp, sp, #20
   11b64:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   11b68:	e51b3010 	ldr	r3, [fp, #-16]
   11b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   11b70:	e51b3010 	ldr	r3, [fp, #-16]
   11b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11b78:	e1520003 	cmp	r2, r3
   11b7c:	03a03001 	moveq	r3, #1
   11b80:	13a03000 	movne	r3, #0
   11b84:	e6ef3073 	uxtb	r3, r3
   11b88:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   11b8c:	e51b3008 	ldr	r3, [fp, #-8]
}
   11b90:	e1a00003 	mov	r0, r3
   11b94:	e28bd000 	add	sp, fp, #0
   11b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11b9c:	e12fff1e 	bx	lr

00011ba0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   11ba0:	e92d4800 	push	{fp, lr}
   11ba4:	e28db004 	add	fp, sp, #4
   11ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   11bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   11bb8:	e1a03002 	mov	r3, r2
   11bbc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   11bc0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bc4:	e59b100c 	ldr	r1, [fp, #12]
   11bc8:	e1a00003 	mov	r0, r3
   11bcc:	eb000603 	bl	133e0 <prvAllocateTCBAndStack>
   11bd0:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   11bd4:	e51b300c 	ldr	r3, [fp, #-12]
   11bd8:	e3530000 	cmp	r3, #0
   11bdc:	0a000067 	beq	11d80 <xTaskGenericCreate+0x1e0>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   11be0:	e51b300c 	ldr	r3, [fp, #-12]
   11be4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   11be8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11bec:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   11bf0:	e1a03103 	lsl	r3, r3, #2
   11bf4:	e0823003 	add	r3, r2, r3
   11bf8:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   11bfc:	e51b3010 	ldr	r3, [fp, #-16]
   11c00:	e3c33007 	bic	r3, r3, #7
   11c04:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   11c08:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   11c0c:	e58d3000 	str	r3, [sp]
   11c10:	e59b3010 	ldr	r3, [fp, #16]
   11c14:	e59b2004 	ldr	r2, [fp, #4]
   11c18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   11c1c:	e51b000c 	ldr	r0, [fp, #-12]
   11c20:	eb000531 	bl	130ec <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   11c24:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   11c28:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   11c2c:	e51b0010 	ldr	r0, [fp, #-16]
   11c30:	ebfff8f2 	bl	10000 <pxPortInitialiseStack>
   11c34:	e1a02000 	mov	r2, r0
   11c38:	e51b300c 	ldr	r3, [fp, #-12]
   11c3c:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   11c40:	e59b3008 	ldr	r3, [fp, #8]
   11c44:	e3530000 	cmp	r3, #0
   11c48:	0a000002 	beq	11c58 <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   11c4c:	e59b3008 	ldr	r3, [fp, #8]
   11c50:	e51b200c 	ldr	r2, [fp, #-12]
   11c54:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   11c58:	ebfffa38 	bl	10540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   11c5c:	e59f316c 	ldr	r3, [pc, #364]	; 11dd0 <xTaskGenericCreate+0x230>
   11c60:	e5933000 	ldr	r3, [r3]
   11c64:	e2833001 	add	r3, r3, #1
   11c68:	e59f2160 	ldr	r2, [pc, #352]	; 11dd0 <xTaskGenericCreate+0x230>
   11c6c:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   11c70:	e59f315c 	ldr	r3, [pc, #348]	; 11dd4 <xTaskGenericCreate+0x234>
   11c74:	e5933000 	ldr	r3, [r3]
   11c78:	e3530000 	cmp	r3, #0
   11c7c:	1a000008 	bne	11ca4 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   11c80:	e59f214c 	ldr	r2, [pc, #332]	; 11dd4 <xTaskGenericCreate+0x234>
   11c84:	e51b300c 	ldr	r3, [fp, #-12]
   11c88:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   11c8c:	e59f313c 	ldr	r3, [pc, #316]	; 11dd0 <xTaskGenericCreate+0x230>
   11c90:	e5933000 	ldr	r3, [r3]
   11c94:	e3530001 	cmp	r3, #1
   11c98:	1a00000e 	bne	11cd8 <xTaskGenericCreate+0x138>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   11c9c:	eb000542 	bl	131ac <prvInitialiseTaskLists>
   11ca0:	ea00000c 	b	11cd8 <xTaskGenericCreate+0x138>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   11ca4:	e59f312c 	ldr	r3, [pc, #300]	; 11dd8 <xTaskGenericCreate+0x238>
   11ca8:	e5933000 	ldr	r3, [r3]
   11cac:	e3530000 	cmp	r3, #0
   11cb0:	1a000008 	bne	11cd8 <xTaskGenericCreate+0x138>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   11cb4:	e59f3118 	ldr	r3, [pc, #280]	; 11dd4 <xTaskGenericCreate+0x234>
   11cb8:	e5933000 	ldr	r3, [r3]
   11cbc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cc0:	e59b2004 	ldr	r2, [fp, #4]
   11cc4:	e1520003 	cmp	r2, r3
   11cc8:	3a000002 	bcc	11cd8 <xTaskGenericCreate+0x138>
					{
						pxCurrentTCB = pxNewTCB;
   11ccc:	e59f2100 	ldr	r2, [pc, #256]	; 11dd4 <xTaskGenericCreate+0x234>
   11cd0:	e51b300c 	ldr	r3, [fp, #-12]
   11cd4:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   11cd8:	e51b300c 	ldr	r3, [fp, #-12]
   11cdc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11ce0:	e59f30f4 	ldr	r3, [pc, #244]	; 11ddc <xTaskGenericCreate+0x23c>
   11ce4:	e5933000 	ldr	r3, [r3]
   11ce8:	e1520003 	cmp	r2, r3
   11cec:	9a000003 	bls	11d00 <xTaskGenericCreate+0x160>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   11cf0:	e51b300c 	ldr	r3, [fp, #-12]
   11cf4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11cf8:	e59f20dc 	ldr	r2, [pc, #220]	; 11ddc <xTaskGenericCreate+0x23c>
   11cfc:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   11d00:	e59f30d8 	ldr	r3, [pc, #216]	; 11de0 <xTaskGenericCreate+0x240>
   11d04:	e5933000 	ldr	r3, [r3]
   11d08:	e2833001 	add	r3, r3, #1
   11d0c:	e59f20cc 	ldr	r2, [pc, #204]	; 11de0 <xTaskGenericCreate+0x240>
   11d10:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   11d14:	e51b300c 	ldr	r3, [fp, #-12]
   11d18:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d1c:	e59f30c0 	ldr	r3, [pc, #192]	; 11de4 <xTaskGenericCreate+0x244>
   11d20:	e5933000 	ldr	r3, [r3]
   11d24:	e1520003 	cmp	r2, r3
   11d28:	9a000003 	bls	11d3c <xTaskGenericCreate+0x19c>
   11d2c:	e51b300c 	ldr	r3, [fp, #-12]
   11d30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11d34:	e59f20a8 	ldr	r2, [pc, #168]	; 11de4 <xTaskGenericCreate+0x244>
   11d38:	e5823000 	str	r3, [r2]
   11d3c:	e51b300c 	ldr	r3, [fp, #-12]
   11d40:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   11d44:	e1a03002 	mov	r3, r2
   11d48:	e1a03103 	lsl	r3, r3, #2
   11d4c:	e0833002 	add	r3, r3, r2
   11d50:	e1a03103 	lsl	r3, r3, #2
   11d54:	e59f208c 	ldr	r2, [pc, #140]	; 11de8 <xTaskGenericCreate+0x248>
   11d58:	e0832002 	add	r2, r3, r2
   11d5c:	e51b300c 	ldr	r3, [fp, #-12]
   11d60:	e2833004 	add	r3, r3, #4
   11d64:	e1a01003 	mov	r1, r3
   11d68:	e1a00002 	mov	r0, r2
   11d6c:	ebfffc1d 	bl	10de8 <vListInsertEnd>

			xReturn = pdPASS;
   11d70:	e3a03001 	mov	r3, #1
   11d74:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   11d78:	ebfffa01 	bl	10584 <vPortExitCritical>
   11d7c:	ea000001 	b	11d88 <xTaskGenericCreate+0x1e8>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   11d80:	e3e03000 	mvn	r3, #0
   11d84:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   11d88:	e51b3008 	ldr	r3, [fp, #-8]
   11d8c:	e3530001 	cmp	r3, #1
   11d90:	1a00000a 	bne	11dc0 <xTaskGenericCreate+0x220>
	{
		if( xSchedulerRunning != pdFALSE )
   11d94:	e59f303c 	ldr	r3, [pc, #60]	; 11dd8 <xTaskGenericCreate+0x238>
   11d98:	e5933000 	ldr	r3, [r3]
   11d9c:	e3530000 	cmp	r3, #0
   11da0:	0a000006 	beq	11dc0 <xTaskGenericCreate+0x220>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   11da4:	e59f3028 	ldr	r3, [pc, #40]	; 11dd4 <xTaskGenericCreate+0x234>
   11da8:	e5933000 	ldr	r3, [r3]
   11dac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   11db0:	e59b2004 	ldr	r2, [fp, #4]
   11db4:	e1520003 	cmp	r2, r3
   11db8:	9a000000 	bls	11dc0 <xTaskGenericCreate+0x220>
			{
				portYIELD_WITHIN_API();
   11dbc:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   11dc0:	e51b3008 	ldr	r3, [fp, #-8]
}
   11dc4:	e1a00003 	mov	r0, r3
   11dc8:	e24bd004 	sub	sp, fp, #4
   11dcc:	e8bd8800 	pop	{fp, pc}
   11dd0:	000148bc 			; <UNDEFINED> instruction: 0x000148bc
   11dd4:	000147e4 	andeq	r4, r1, r4, ror #15
   11dd8:	000148cc 	andeq	r4, r1, ip, asr #17
   11ddc:	000148c4 	andeq	r4, r1, r4, asr #17
   11de0:	000148e0 	andeq	r4, r1, r0, ror #17
   11de4:	000148c8 	andeq	r4, r1, r8, asr #17
   11de8:	000147e8 	andeq	r4, r1, r8, ror #15

00011dec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   11dec:	e92d4800 	push	{fp, lr}
   11df0:	e28db004 	add	fp, sp, #4
   11df4:	e24dd010 	sub	sp, sp, #16
   11df8:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   11dfc:	ebfff9cf 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   11e00:	e59f30d0 	ldr	r3, [pc, #208]	; 11ed8 <vTaskDelete+0xec>
   11e04:	e5933000 	ldr	r3, [r3]
   11e08:	e51b2010 	ldr	r2, [fp, #-16]
   11e0c:	e1520003 	cmp	r2, r3
   11e10:	1a000001 	bne	11e1c <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   11e14:	e3a03000 	mov	r3, #0
   11e18:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   11e1c:	e51b3010 	ldr	r3, [fp, #-16]
   11e20:	e3530000 	cmp	r3, #0
   11e24:	1a000002 	bne	11e34 <vTaskDelete+0x48>
   11e28:	e59f30a8 	ldr	r3, [pc, #168]	; 11ed8 <vTaskDelete+0xec>
   11e2c:	e5933000 	ldr	r3, [r3]
   11e30:	ea000000 	b	11e38 <vTaskDelete+0x4c>
   11e34:	e51b3010 	ldr	r3, [fp, #-16]
   11e38:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   11e3c:	e51b3008 	ldr	r3, [fp, #-8]
   11e40:	e2833004 	add	r3, r3, #4
   11e44:	e1a00003 	mov	r0, r3
   11e48:	ebfffc42 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   11e4c:	e51b3008 	ldr	r3, [fp, #-8]
   11e50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   11e54:	e3530000 	cmp	r3, #0
   11e58:	0a000003 	beq	11e6c <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   11e5c:	e51b3008 	ldr	r3, [fp, #-8]
   11e60:	e2833018 	add	r3, r3, #24
   11e64:	e1a00003 	mov	r0, r3
   11e68:	ebfffc3a 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   11e6c:	e51b3008 	ldr	r3, [fp, #-8]
   11e70:	e2833004 	add	r3, r3, #4
   11e74:	e1a01003 	mov	r1, r3
   11e78:	e59f005c 	ldr	r0, [pc, #92]	; 11edc <vTaskDelete+0xf0>
   11e7c:	ebfffbd9 	bl	10de8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   11e80:	e59f3058 	ldr	r3, [pc, #88]	; 11ee0 <vTaskDelete+0xf4>
   11e84:	e5933000 	ldr	r3, [r3]
   11e88:	e2833001 	add	r3, r3, #1
   11e8c:	e59f204c 	ldr	r2, [pc, #76]	; 11ee0 <vTaskDelete+0xf4>
   11e90:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   11e94:	e59f3048 	ldr	r3, [pc, #72]	; 11ee4 <vTaskDelete+0xf8>
   11e98:	e5933000 	ldr	r3, [r3]
   11e9c:	e2833001 	add	r3, r3, #1
   11ea0:	e59f203c 	ldr	r2, [pc, #60]	; 11ee4 <vTaskDelete+0xf8>
   11ea4:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   11ea8:	ebfff9b5 	bl	10584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   11eac:	e59f3034 	ldr	r3, [pc, #52]	; 11ee8 <vTaskDelete+0xfc>
   11eb0:	e5933000 	ldr	r3, [r3]
   11eb4:	e3530000 	cmp	r3, #0
   11eb8:	0a000003 	beq	11ecc <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   11ebc:	e51b3010 	ldr	r3, [fp, #-16]
   11ec0:	e3530000 	cmp	r3, #0
   11ec4:	1a000000 	bne	11ecc <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   11ec8:	ef000000 	svc	0x00000000
			}
		}
	}
   11ecc:	e320f000 	nop	{0}
   11ed0:	e24bd004 	sub	sp, fp, #4
   11ed4:	e8bd8800 	pop	{fp, pc}
   11ed8:	000147e4 	andeq	r4, r1, r4, ror #15
   11edc:	00014890 	muleq	r1, r0, r8
   11ee0:	000148a4 	andeq	r4, r1, r4, lsr #17
   11ee4:	000148e0 	andeq	r4, r1, r0, ror #17
   11ee8:	000148cc 	andeq	r4, r1, ip, asr #17

00011eec <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   11eec:	e92d4800 	push	{fp, lr}
   11ef0:	e28db004 	add	fp, sp, #4
   11ef4:	e24dd018 	sub	sp, sp, #24
   11ef8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11efc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   11f00:	e3a03000 	mov	r3, #0
   11f04:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   11f08:	eb0001f6 	bl	126e8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   11f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f10:	e5933000 	ldr	r3, [r3]
   11f14:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11f18:	e0823003 	add	r3, r2, r3
   11f1c:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   11f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f24:	e5932000 	ldr	r2, [r3]
   11f28:	e59f30c4 	ldr	r3, [pc, #196]	; 11ff4 <vTaskDelayUntil+0x108>
   11f2c:	e5933000 	ldr	r3, [r3]
   11f30:	e1520003 	cmp	r2, r3
   11f34:	9a00000c 	bls	11f6c <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   11f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f3c:	e5933000 	ldr	r3, [r3]
   11f40:	e51b200c 	ldr	r2, [fp, #-12]
   11f44:	e1520003 	cmp	r2, r3
   11f48:	2a000013 	bcs	11f9c <vTaskDelayUntil+0xb0>
   11f4c:	e59f30a0 	ldr	r3, [pc, #160]	; 11ff4 <vTaskDelayUntil+0x108>
   11f50:	e5933000 	ldr	r3, [r3]
   11f54:	e51b200c 	ldr	r2, [fp, #-12]
   11f58:	e1520003 	cmp	r2, r3
   11f5c:	9a00000e 	bls	11f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f60:	e3a03001 	mov	r3, #1
   11f64:	e50b3008 	str	r3, [fp, #-8]
   11f68:	ea00000b 	b	11f9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   11f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f70:	e5933000 	ldr	r3, [r3]
   11f74:	e51b200c 	ldr	r2, [fp, #-12]
   11f78:	e1520003 	cmp	r2, r3
   11f7c:	3a000004 	bcc	11f94 <vTaskDelayUntil+0xa8>
   11f80:	e59f306c 	ldr	r3, [pc, #108]	; 11ff4 <vTaskDelayUntil+0x108>
   11f84:	e5933000 	ldr	r3, [r3]
   11f88:	e51b200c 	ldr	r2, [fp, #-12]
   11f8c:	e1520003 	cmp	r2, r3
   11f90:	9a000001 	bls	11f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   11f94:	e3a03001 	mov	r3, #1
   11f98:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   11f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fa0:	e51b200c 	ldr	r2, [fp, #-12]
   11fa4:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   11fa8:	e51b3008 	ldr	r3, [fp, #-8]
   11fac:	e3530000 	cmp	r3, #0
   11fb0:	0a000006 	beq	11fd0 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   11fb4:	e59f303c 	ldr	r3, [pc, #60]	; 11ff8 <vTaskDelayUntil+0x10c>
   11fb8:	e5933000 	ldr	r3, [r3]
   11fbc:	e2833004 	add	r3, r3, #4
   11fc0:	e1a00003 	mov	r0, r3
   11fc4:	ebfffbe3 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   11fc8:	e51b000c 	ldr	r0, [fp, #-12]
   11fcc:	eb0004d5 	bl	13328 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   11fd0:	eb0001d0 	bl	12718 <xTaskResumeAll>
   11fd4:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   11fd8:	e51b3010 	ldr	r3, [fp, #-16]
   11fdc:	e3530000 	cmp	r3, #0
   11fe0:	1a000000 	bne	11fe8 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   11fe4:	ef000000 	svc	0x00000000
		}
	}
   11fe8:	e320f000 	nop	{0}
   11fec:	e24bd004 	sub	sp, fp, #4
   11ff0:	e8bd8800 	pop	{fp, pc}
   11ff4:	000148c0 	andeq	r4, r1, r0, asr #17
   11ff8:	000147e4 	andeq	r4, r1, r4, ror #15

00011ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   11ffc:	e92d4800 	push	{fp, lr}
   12000:	e28db004 	add	fp, sp, #4
   12004:	e24dd010 	sub	sp, sp, #16
   12008:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   1200c:	e3a03000 	mov	r3, #0
   12010:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   12014:	e51b3010 	ldr	r3, [fp, #-16]
   12018:	e3530000 	cmp	r3, #0
   1201c:	0a00000e 	beq	1205c <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   12020:	eb0001b0 	bl	126e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   12024:	e59f304c 	ldr	r3, [pc, #76]	; 12078 <vTaskDelay+0x7c>
   12028:	e5933000 	ldr	r3, [r3]
   1202c:	e51b2010 	ldr	r2, [fp, #-16]
   12030:	e0823003 	add	r3, r2, r3
   12034:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12038:	e59f303c 	ldr	r3, [pc, #60]	; 1207c <vTaskDelay+0x80>
   1203c:	e5933000 	ldr	r3, [r3]
   12040:	e2833004 	add	r3, r3, #4
   12044:	e1a00003 	mov	r0, r3
   12048:	ebfffbc2 	bl	10f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   1204c:	e51b000c 	ldr	r0, [fp, #-12]
   12050:	eb0004b4 	bl	13328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   12054:	eb0001af 	bl	12718 <xTaskResumeAll>
   12058:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1205c:	e51b3008 	ldr	r3, [fp, #-8]
   12060:	e3530000 	cmp	r3, #0
   12064:	1a000000 	bne	1206c <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   12068:	ef000000 	svc	0x00000000
		}
	}
   1206c:	e320f000 	nop	{0}
   12070:	e24bd004 	sub	sp, fp, #4
   12074:	e8bd8800 	pop	{fp, pc}
   12078:	000148c0 	andeq	r4, r1, r0, asr #17
   1207c:	000147e4 	andeq	r4, r1, r4, ror #15

00012080 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   12080:	e92d4800 	push	{fp, lr}
   12084:	e28db004 	add	fp, sp, #4
   12088:	e24dd010 	sub	sp, sp, #16
   1208c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   12090:	ebfff92a 	bl	10540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12094:	e51b3010 	ldr	r3, [fp, #-16]
   12098:	e3530000 	cmp	r3, #0
   1209c:	1a000002 	bne	120ac <uxTaskPriorityGet+0x2c>
   120a0:	e59f302c 	ldr	r3, [pc, #44]	; 120d4 <uxTaskPriorityGet+0x54>
   120a4:	e5933000 	ldr	r3, [r3]
   120a8:	ea000000 	b	120b0 <uxTaskPriorityGet+0x30>
   120ac:	e51b3010 	ldr	r3, [fp, #-16]
   120b0:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   120b4:	e51b3008 	ldr	r3, [fp, #-8]
   120b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   120bc:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   120c0:	ebfff92f 	bl	10584 <vPortExitCritical>

		return uxReturn;
   120c4:	e51b300c 	ldr	r3, [fp, #-12]
	}
   120c8:	e1a00003 	mov	r0, r3
   120cc:	e24bd004 	sub	sp, fp, #4
   120d0:	e8bd8800 	pop	{fp, pc}
   120d4:	000147e4 	andeq	r4, r1, r4, ror #15

000120d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   120d8:	e92d4800 	push	{fp, lr}
   120dc:	e28db004 	add	fp, sp, #4
   120e0:	e24dd018 	sub	sp, sp, #24
   120e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   120e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   120ec:	e3a03000 	mov	r3, #0
   120f0:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   120f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   120f8:	e3530004 	cmp	r3, #4
   120fc:	9a000001 	bls	12108 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   12100:	e3a03004 	mov	r3, #4
   12104:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		taskENTER_CRITICAL();
   12108:	ebfff90c 	bl	10540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   1210c:	e59f3160 	ldr	r3, [pc, #352]	; 12274 <vTaskPrioritySet+0x19c>
   12110:	e5933000 	ldr	r3, [r3]
   12114:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   12118:	e1520003 	cmp	r2, r3
   1211c:	1a000001 	bne	12128 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   12120:	e3a03000 	mov	r3, #0
   12124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   12128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1212c:	e3530000 	cmp	r3, #0
   12130:	1a000002 	bne	12140 <vTaskPrioritySet+0x68>
   12134:	e59f3138 	ldr	r3, [pc, #312]	; 12274 <vTaskPrioritySet+0x19c>
   12138:	e5933000 	ldr	r3, [r3]
   1213c:	ea000000 	b	12144 <vTaskPrioritySet+0x6c>
   12140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12144:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   12148:	e51b300c 	ldr	r3, [fp, #-12]
   1214c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12150:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   12154:	e51b2010 	ldr	r2, [fp, #-16]
   12158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   1215c:	e1520003 	cmp	r2, r3
   12160:	0a00003f 	beq	12264 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   12164:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   12168:	e51b3010 	ldr	r3, [fp, #-16]
   1216c:	e1520003 	cmp	r2, r3
   12170:	9a000005 	bls	1218c <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   12174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12178:	e3530000 	cmp	r3, #0
   1217c:	0a000007 	beq	121a0 <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   12180:	e3a03001 	mov	r3, #1
   12184:	e50b3008 	str	r3, [fp, #-8]
   12188:	ea000004 	b	121a0 <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   1218c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12190:	e3530000 	cmp	r3, #0
   12194:	1a000001 	bne	121a0 <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   12198:	e3a03001 	mov	r3, #1
   1219c:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   121a0:	e51b300c 	ldr	r3, [fp, #-12]
   121a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   121a8:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   121ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   121b0:	e2632005 	rsb	r2, r3, #5
   121b4:	e51b300c 	ldr	r3, [fp, #-12]
   121b8:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   121bc:	e51b300c 	ldr	r3, [fp, #-12]
   121c0:	e5931014 	ldr	r1, [r3, #20]
   121c4:	e51b2010 	ldr	r2, [fp, #-16]
   121c8:	e1a03002 	mov	r3, r2
   121cc:	e1a03103 	lsl	r3, r3, #2
   121d0:	e0833002 	add	r3, r3, r2
   121d4:	e1a03103 	lsl	r3, r3, #2
   121d8:	e59f2098 	ldr	r2, [pc, #152]	; 12278 <vTaskPrioritySet+0x1a0>
   121dc:	e0833002 	add	r3, r3, r2
   121e0:	e1510003 	cmp	r1, r3
   121e4:	1a00001a 	bne	12254 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   121e8:	e51b300c 	ldr	r3, [fp, #-12]
   121ec:	e2833004 	add	r3, r3, #4
   121f0:	e1a00003 	mov	r0, r3
   121f4:	ebfffb57 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   121f8:	e51b300c 	ldr	r3, [fp, #-12]
   121fc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12200:	e59f3074 	ldr	r3, [pc, #116]	; 1227c <vTaskPrioritySet+0x1a4>
   12204:	e5933000 	ldr	r3, [r3]
   12208:	e1520003 	cmp	r2, r3
   1220c:	9a000003 	bls	12220 <vTaskPrioritySet+0x148>
   12210:	e51b300c 	ldr	r3, [fp, #-12]
   12214:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12218:	e59f205c 	ldr	r2, [pc, #92]	; 1227c <vTaskPrioritySet+0x1a4>
   1221c:	e5823000 	str	r3, [r2]
   12220:	e51b300c 	ldr	r3, [fp, #-12]
   12224:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12228:	e1a03002 	mov	r3, r2
   1222c:	e1a03103 	lsl	r3, r3, #2
   12230:	e0833002 	add	r3, r3, r2
   12234:	e1a03103 	lsl	r3, r3, #2
   12238:	e59f2038 	ldr	r2, [pc, #56]	; 12278 <vTaskPrioritySet+0x1a0>
   1223c:	e0832002 	add	r2, r3, r2
   12240:	e51b300c 	ldr	r3, [fp, #-12]
   12244:	e2833004 	add	r3, r3, #4
   12248:	e1a01003 	mov	r1, r3
   1224c:	e1a00002 	mov	r0, r2
   12250:	ebfffae4 	bl	10de8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   12254:	e51b3008 	ldr	r3, [fp, #-8]
   12258:	e3530001 	cmp	r3, #1
   1225c:	1a000000 	bne	12264 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   12260:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   12264:	ebfff8c6 	bl	10584 <vPortExitCritical>
	}
   12268:	e320f000 	nop	{0}
   1226c:	e24bd004 	sub	sp, fp, #4
   12270:	e8bd8800 	pop	{fp, pc}
   12274:	000147e4 	andeq	r4, r1, r4, ror #15
   12278:	000147e8 	andeq	r4, r1, r8, ror #15
   1227c:	000148c8 	andeq	r4, r1, r8, asr #17

00012280 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   12280:	e92d4800 	push	{fp, lr}
   12284:	e28db004 	add	fp, sp, #4
   12288:	e24dd010 	sub	sp, sp, #16
   1228c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   12290:	ebfff8aa 	bl	10540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   12294:	e59f30d8 	ldr	r3, [pc, #216]	; 12374 <vTaskSuspend+0xf4>
   12298:	e5933000 	ldr	r3, [r3]
   1229c:	e51b2010 	ldr	r2, [fp, #-16]
   122a0:	e1520003 	cmp	r2, r3
   122a4:	1a000001 	bne	122b0 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   122a8:	e3a03000 	mov	r3, #0
   122ac:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   122b0:	e51b3010 	ldr	r3, [fp, #-16]
   122b4:	e3530000 	cmp	r3, #0
   122b8:	1a000002 	bne	122c8 <vTaskSuspend+0x48>
   122bc:	e59f30b0 	ldr	r3, [pc, #176]	; 12374 <vTaskSuspend+0xf4>
   122c0:	e5933000 	ldr	r3, [r3]
   122c4:	ea000000 	b	122cc <vTaskSuspend+0x4c>
   122c8:	e51b3010 	ldr	r3, [fp, #-16]
   122cc:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   122d0:	e51b3008 	ldr	r3, [fp, #-8]
   122d4:	e2833004 	add	r3, r3, #4
   122d8:	e1a00003 	mov	r0, r3
   122dc:	ebfffb1d 	bl	10f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   122e0:	e51b3008 	ldr	r3, [fp, #-8]
   122e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   122e8:	e3530000 	cmp	r3, #0
   122ec:	0a000003 	beq	12300 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   122f0:	e51b3008 	ldr	r3, [fp, #-8]
   122f4:	e2833018 	add	r3, r3, #24
   122f8:	e1a00003 	mov	r0, r3
   122fc:	ebfffb15 	bl	10f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   12300:	e51b3008 	ldr	r3, [fp, #-8]
   12304:	e2833004 	add	r3, r3, #4
   12308:	e1a01003 	mov	r1, r3
   1230c:	e59f0064 	ldr	r0, [pc, #100]	; 12378 <vTaskSuspend+0xf8>
   12310:	ebfffab4 	bl	10de8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   12314:	ebfff89a 	bl	10584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   12318:	e51b3010 	ldr	r3, [fp, #-16]
   1231c:	e3530000 	cmp	r3, #0
   12320:	1a000010 	bne	12368 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   12324:	e59f3050 	ldr	r3, [pc, #80]	; 1237c <vTaskSuspend+0xfc>
   12328:	e5933000 	ldr	r3, [r3]
   1232c:	e3530000 	cmp	r3, #0
   12330:	0a000001 	beq	1233c <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   12334:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   12338:	ea00000a 	b	12368 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1233c:	e59f3034 	ldr	r3, [pc, #52]	; 12378 <vTaskSuspend+0xf8>
   12340:	e5932000 	ldr	r2, [r3]
   12344:	e59f3034 	ldr	r3, [pc, #52]	; 12380 <vTaskSuspend+0x100>
   12348:	e5933000 	ldr	r3, [r3]
   1234c:	e1520003 	cmp	r2, r3
   12350:	1a000003 	bne	12364 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   12354:	e59f3018 	ldr	r3, [pc, #24]	; 12374 <vTaskSuspend+0xf4>
   12358:	e3a02000 	mov	r2, #0
   1235c:	e5832000 	str	r2, [r3]
	}
   12360:	ea000000 	b	12368 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   12364:	eb00024c 	bl	12c9c <vTaskSwitchContext>
	}
   12368:	e320f000 	nop	{0}
   1236c:	e24bd004 	sub	sp, fp, #4
   12370:	e8bd8800 	pop	{fp, pc}
   12374:	000147e4 	andeq	r4, r1, r4, ror #15
   12378:	000148a8 	andeq	r4, r1, r8, lsr #17
   1237c:	000148cc 	andeq	r4, r1, ip, asr #17
   12380:	000148bc 			; <UNDEFINED> instruction: 0x000148bc

00012384 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   12384:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12388:	e28db000 	add	fp, sp, #0
   1238c:	e24dd014 	sub	sp, sp, #20
   12390:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   12394:	e3a03000 	mov	r3, #0
   12398:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   1239c:	e51b3010 	ldr	r3, [fp, #-16]
   123a0:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   123a4:	e51b300c 	ldr	r3, [fp, #-12]
   123a8:	e5933014 	ldr	r3, [r3, #20]
   123ac:	e59f2044 	ldr	r2, [pc, #68]	; 123f8 <xTaskIsTaskSuspended+0x74>
   123b0:	e1530002 	cmp	r3, r2
   123b4:	1a00000a 	bne	123e4 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   123b8:	e51b300c 	ldr	r3, [fp, #-12]
   123bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123c0:	e59f2034 	ldr	r2, [pc, #52]	; 123fc <xTaskIsTaskSuspended+0x78>
   123c4:	e1530002 	cmp	r3, r2
   123c8:	0a000005 	beq	123e4 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   123cc:	e51b300c 	ldr	r3, [fp, #-12]
   123d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   123d4:	e3530000 	cmp	r3, #0
   123d8:	1a000001 	bne	123e4 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   123dc:	e3a03001 	mov	r3, #1
   123e0:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   123e4:	e51b3008 	ldr	r3, [fp, #-8]
	}
   123e8:	e1a00003 	mov	r0, r3
   123ec:	e28bd000 	add	sp, fp, #0
   123f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   123f4:	e12fff1e 	bx	lr
   123f8:	000148a8 	andeq	r4, r1, r8, lsr #17
   123fc:	0001487c 	andeq	r4, r1, ip, ror r8

00012400 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   12400:	e92d4800 	push	{fp, lr}
   12404:	e28db004 	add	fp, sp, #4
   12408:	e24dd010 	sub	sp, sp, #16
   1240c:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   12410:	e51b3010 	ldr	r3, [fp, #-16]
   12414:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   12418:	e51b3008 	ldr	r3, [fp, #-8]
   1241c:	e3530000 	cmp	r3, #0
   12420:	0a00002e 	beq	124e0 <vTaskResume+0xe0>
   12424:	e59f30c0 	ldr	r3, [pc, #192]	; 124ec <vTaskResume+0xec>
   12428:	e5933000 	ldr	r3, [r3]
   1242c:	e51b2008 	ldr	r2, [fp, #-8]
   12430:	e1520003 	cmp	r2, r3
   12434:	0a000029 	beq	124e0 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   12438:	ebfff840 	bl	10540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   1243c:	e51b0008 	ldr	r0, [fp, #-8]
   12440:	ebffffcf 	bl	12384 <xTaskIsTaskSuspended>
   12444:	e1a03000 	mov	r3, r0
   12448:	e3530001 	cmp	r3, #1
   1244c:	1a000022 	bne	124dc <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   12450:	e51b3008 	ldr	r3, [fp, #-8]
   12454:	e2833004 	add	r3, r3, #4
   12458:	e1a00003 	mov	r0, r3
   1245c:	ebfffabd 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12460:	e51b3008 	ldr	r3, [fp, #-8]
   12464:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12468:	e59f3080 	ldr	r3, [pc, #128]	; 124f0 <vTaskResume+0xf0>
   1246c:	e5933000 	ldr	r3, [r3]
   12470:	e1520003 	cmp	r2, r3
   12474:	9a000003 	bls	12488 <vTaskResume+0x88>
   12478:	e51b3008 	ldr	r3, [fp, #-8]
   1247c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12480:	e59f2068 	ldr	r2, [pc, #104]	; 124f0 <vTaskResume+0xf0>
   12484:	e5823000 	str	r3, [r2]
   12488:	e51b3008 	ldr	r3, [fp, #-8]
   1248c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12490:	e1a03002 	mov	r3, r2
   12494:	e1a03103 	lsl	r3, r3, #2
   12498:	e0833002 	add	r3, r3, r2
   1249c:	e1a03103 	lsl	r3, r3, #2
   124a0:	e59f204c 	ldr	r2, [pc, #76]	; 124f4 <vTaskResume+0xf4>
   124a4:	e0832002 	add	r2, r3, r2
   124a8:	e51b3008 	ldr	r3, [fp, #-8]
   124ac:	e2833004 	add	r3, r3, #4
   124b0:	e1a01003 	mov	r1, r3
   124b4:	e1a00002 	mov	r0, r2
   124b8:	ebfffa4a 	bl	10de8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   124bc:	e51b3008 	ldr	r3, [fp, #-8]
   124c0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   124c4:	e59f3020 	ldr	r3, [pc, #32]	; 124ec <vTaskResume+0xec>
   124c8:	e5933000 	ldr	r3, [r3]
   124cc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   124d0:	e1520003 	cmp	r2, r3
   124d4:	3a000000 	bcc	124dc <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   124d8:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   124dc:	ebfff828 	bl	10584 <vPortExitCritical>
		}
	}
   124e0:	e320f000 	nop	{0}
   124e4:	e24bd004 	sub	sp, fp, #4
   124e8:	e8bd8800 	pop	{fp, pc}
   124ec:	000147e4 	andeq	r4, r1, r4, ror #15
   124f0:	000148c8 	andeq	r4, r1, r8, asr #17
   124f4:	000147e8 	andeq	r4, r1, r8, ror #15

000124f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   124f8:	e92d4800 	push	{fp, lr}
   124fc:	e28db004 	add	fp, sp, #4
   12500:	e24dd018 	sub	sp, sp, #24
   12504:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   12508:	e3a03000 	mov	r3, #0
   1250c:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   12510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12514:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   12518:	e3a03000 	mov	r3, #0
   1251c:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   12520:	e51b000c 	ldr	r0, [fp, #-12]
   12524:	ebffff96 	bl	12384 <xTaskIsTaskSuspended>
   12528:	e1a03000 	mov	r3, r0
   1252c:	e3530001 	cmp	r3, #1
   12530:	1a00002e 	bne	125f0 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12534:	e59f30c4 	ldr	r3, [pc, #196]	; 12600 <xTaskResumeFromISR+0x108>
   12538:	e5933000 	ldr	r3, [r3]
   1253c:	e3530000 	cmp	r3, #0
   12540:	1a000025 	bne	125dc <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   12544:	e51b300c 	ldr	r3, [fp, #-12]
   12548:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   1254c:	e59f30b0 	ldr	r3, [pc, #176]	; 12604 <xTaskResumeFromISR+0x10c>
   12550:	e5933000 	ldr	r3, [r3]
   12554:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12558:	e1520003 	cmp	r2, r3
   1255c:	23a03001 	movcs	r3, #1
   12560:	33a03000 	movcc	r3, #0
   12564:	e6ef3073 	uxtb	r3, r3
   12568:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   1256c:	e51b300c 	ldr	r3, [fp, #-12]
   12570:	e2833004 	add	r3, r3, #4
   12574:	e1a00003 	mov	r0, r3
   12578:	ebfffa76 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   1257c:	e51b300c 	ldr	r3, [fp, #-12]
   12580:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12584:	e59f307c 	ldr	r3, [pc, #124]	; 12608 <xTaskResumeFromISR+0x110>
   12588:	e5933000 	ldr	r3, [r3]
   1258c:	e1520003 	cmp	r2, r3
   12590:	9a000003 	bls	125a4 <xTaskResumeFromISR+0xac>
   12594:	e51b300c 	ldr	r3, [fp, #-12]
   12598:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1259c:	e59f2064 	ldr	r2, [pc, #100]	; 12608 <xTaskResumeFromISR+0x110>
   125a0:	e5823000 	str	r3, [r2]
   125a4:	e51b300c 	ldr	r3, [fp, #-12]
   125a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   125ac:	e1a03002 	mov	r3, r2
   125b0:	e1a03103 	lsl	r3, r3, #2
   125b4:	e0833002 	add	r3, r3, r2
   125b8:	e1a03103 	lsl	r3, r3, #2
   125bc:	e59f2048 	ldr	r2, [pc, #72]	; 1260c <xTaskResumeFromISR+0x114>
   125c0:	e0832002 	add	r2, r3, r2
   125c4:	e51b300c 	ldr	r3, [fp, #-12]
   125c8:	e2833004 	add	r3, r3, #4
   125cc:	e1a01003 	mov	r1, r3
   125d0:	e1a00002 	mov	r0, r2
   125d4:	ebfffa03 	bl	10de8 <vListInsertEnd>
   125d8:	ea000004 	b	125f0 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   125dc:	e51b300c 	ldr	r3, [fp, #-12]
   125e0:	e2833018 	add	r3, r3, #24
   125e4:	e1a01003 	mov	r1, r3
   125e8:	e59f0020 	ldr	r0, [pc, #32]	; 12610 <xTaskResumeFromISR+0x118>
   125ec:	ebfff9fd 	bl	10de8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   125f0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   125f4:	e1a00003 	mov	r0, r3
   125f8:	e24bd004 	sub	sp, fp, #4
   125fc:	e8bd8800 	pop	{fp, pc}
   12600:	000148d0 	ldrdeq	r4, [r1], -r0
   12604:	000147e4 	andeq	r4, r1, r4, ror #15
   12608:	000148c8 	andeq	r4, r1, r8, asr #17
   1260c:	000147e8 	andeq	r4, r1, r8, ror #15
   12610:	0001487c 	andeq	r4, r1, ip, ror r8

00012614 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   12614:	e92d4800 	push	{fp, lr}
   12618:	e28db004 	add	fp, sp, #4
   1261c:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   12620:	e3a03000 	mov	r3, #0
   12624:	e58d300c 	str	r3, [sp, #12]
   12628:	e3a03000 	mov	r3, #0
   1262c:	e58d3008 	str	r3, [sp, #8]
   12630:	e3a03000 	mov	r3, #0
   12634:	e58d3004 	str	r3, [sp, #4]
   12638:	e3a03000 	mov	r3, #0
   1263c:	e58d3000 	str	r3, [sp]
   12640:	e3a03000 	mov	r3, #0
   12644:	e3a02080 	mov	r2, #128	; 0x80
   12648:	e59f1050 	ldr	r1, [pc, #80]	; 126a0 <vTaskStartScheduler+0x8c>
   1264c:	e59f0050 	ldr	r0, [pc, #80]	; 126a4 <vTaskStartScheduler+0x90>
   12650:	ebfffd52 	bl	11ba0 <xTaskGenericCreate>
   12654:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   12658:	e51b3008 	ldr	r3, [fp, #-8]
   1265c:	e3530001 	cmp	r3, #1
   12660:	1a00000b 	bne	12694 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   12664:	e92d0001 	stmfd	sp!, {r0}
   12668:	e10f0000 	mrs	r0, CPSR
   1266c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   12670:	e129f000 	msr	CPSR_fc, r0
   12674:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   12678:	e59f3028 	ldr	r3, [pc, #40]	; 126a8 <vTaskStartScheduler+0x94>
   1267c:	e3a02001 	mov	r2, #1
   12680:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   12684:	e59f3020 	ldr	r3, [pc, #32]	; 126ac <vTaskStartScheduler+0x98>
   12688:	e3a02000 	mov	r2, #0
   1268c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   12690:	ebfff6ea 	bl	10240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   12694:	e320f000 	nop	{0}
   12698:	e24bd004 	sub	sp, fp, #4
   1269c:	e8bd8800 	pop	{fp, pc}
   126a0:	00014420 	andeq	r4, r1, r0, lsr #8
   126a4:	000130bc 	strheq	r3, [r1], -ip
   126a8:	000148cc 	andeq	r4, r1, ip, asr #17
   126ac:	000148c0 	andeq	r4, r1, r0, asr #17

000126b0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   126b0:	e92d4800 	push	{fp, lr}
   126b4:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   126b8:	e92d0001 	stmfd	sp!, {r0}
   126bc:	e10f0000 	mrs	r0, CPSR
   126c0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   126c4:	e129f000 	msr	CPSR_fc, r0
   126c8:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   126cc:	e59f3010 	ldr	r3, [pc, #16]	; 126e4 <vTaskEndScheduler+0x34>
   126d0:	e3a02000 	mov	r2, #0
   126d4:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   126d8:	ebfff6df 	bl	1025c <vPortEndScheduler>
}
   126dc:	e320f000 	nop	{0}
   126e0:	e8bd8800 	pop	{fp, pc}
   126e4:	000148cc 	andeq	r4, r1, ip, asr #17

000126e8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   126e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126ec:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   126f0:	e59f301c 	ldr	r3, [pc, #28]	; 12714 <vTaskSuspendAll+0x2c>
   126f4:	e5933000 	ldr	r3, [r3]
   126f8:	e2833001 	add	r3, r3, #1
   126fc:	e59f2010 	ldr	r2, [pc, #16]	; 12714 <vTaskSuspendAll+0x2c>
   12700:	e5823000 	str	r3, [r2]
}
   12704:	e320f000 	nop	{0}
   12708:	e28bd000 	add	sp, fp, #0
   1270c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12710:	e12fff1e 	bx	lr
   12714:	000148d0 	ldrdeq	r4, [r1], -r0

00012718 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   12718:	e92d4810 	push	{r4, fp, lr}
   1271c:	e28db008 	add	fp, sp, #8
   12720:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   12724:	e3a03000 	mov	r3, #0
   12728:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1272c:	ebfff783 	bl	10540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   12730:	e59f3164 	ldr	r3, [pc, #356]	; 1289c <xTaskResumeAll+0x184>
   12734:	e5933000 	ldr	r3, [r3]
   12738:	e2433001 	sub	r3, r3, #1
   1273c:	e59f2158 	ldr	r2, [pc, #344]	; 1289c <xTaskResumeAll+0x184>
   12740:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12744:	e59f3150 	ldr	r3, [pc, #336]	; 1289c <xTaskResumeAll+0x184>
   12748:	e5933000 	ldr	r3, [r3]
   1274c:	e3530000 	cmp	r3, #0
   12750:	1a00004c 	bne	12888 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   12754:	e59f3144 	ldr	r3, [pc, #324]	; 128a0 <xTaskResumeAll+0x188>
   12758:	e5933000 	ldr	r3, [r3]
   1275c:	e3530000 	cmp	r3, #0
   12760:	0a000048 	beq	12888 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   12764:	e3a03000 	mov	r3, #0
   12768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   1276c:	ea000023 	b	12800 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   12770:	e59f312c 	ldr	r3, [pc, #300]	; 128a4 <xTaskResumeAll+0x18c>
   12774:	e593300c 	ldr	r3, [r3, #12]
   12778:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   1277c:	e2843018 	add	r3, r4, #24
   12780:	e1a00003 	mov	r0, r3
   12784:	ebfff9f3 	bl	10f58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   12788:	e2843004 	add	r3, r4, #4
   1278c:	e1a00003 	mov	r0, r3
   12790:	ebfff9f0 	bl	10f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   12794:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12798:	e59f3108 	ldr	r3, [pc, #264]	; 128a8 <xTaskResumeAll+0x190>
   1279c:	e5933000 	ldr	r3, [r3]
   127a0:	e1520003 	cmp	r2, r3
   127a4:	9a000002 	bls	127b4 <xTaskResumeAll+0x9c>
   127a8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   127ac:	e59f20f4 	ldr	r2, [pc, #244]	; 128a8 <xTaskResumeAll+0x190>
   127b0:	e5823000 	str	r3, [r2]
   127b4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127b8:	e1a03002 	mov	r3, r2
   127bc:	e1a03103 	lsl	r3, r3, #2
   127c0:	e0833002 	add	r3, r3, r2
   127c4:	e1a03103 	lsl	r3, r3, #2
   127c8:	e59f20dc 	ldr	r2, [pc, #220]	; 128ac <xTaskResumeAll+0x194>
   127cc:	e0833002 	add	r3, r3, r2
   127d0:	e2842004 	add	r2, r4, #4
   127d4:	e1a01002 	mov	r1, r2
   127d8:	e1a00003 	mov	r0, r3
   127dc:	ebfff981 	bl	10de8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   127e0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   127e4:	e59f30c4 	ldr	r3, [pc, #196]	; 128b0 <xTaskResumeAll+0x198>
   127e8:	e5933000 	ldr	r3, [r3]
   127ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   127f0:	e1520003 	cmp	r2, r3
   127f4:	3a000001 	bcc	12800 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   127f8:	e3a03001 	mov	r3, #1
   127fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   12800:	e59f309c 	ldr	r3, [pc, #156]	; 128a4 <xTaskResumeAll+0x18c>
   12804:	e5933000 	ldr	r3, [r3]
   12808:	e3530000 	cmp	r3, #0
   1280c:	1affffd7 	bne	12770 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12810:	e59f309c 	ldr	r3, [pc, #156]	; 128b4 <xTaskResumeAll+0x19c>
   12814:	e5933000 	ldr	r3, [r3]
   12818:	e3530000 	cmp	r3, #0
   1281c:	0a00000c 	beq	12854 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   12820:	ea000005 	b	1283c <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   12824:	eb000048 	bl	1294c <vTaskIncrementTick>
						--uxMissedTicks;
   12828:	e59f3084 	ldr	r3, [pc, #132]	; 128b4 <xTaskResumeAll+0x19c>
   1282c:	e5933000 	ldr	r3, [r3]
   12830:	e2433001 	sub	r3, r3, #1
   12834:	e59f2078 	ldr	r2, [pc, #120]	; 128b4 <xTaskResumeAll+0x19c>
   12838:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   1283c:	e59f3070 	ldr	r3, [pc, #112]	; 128b4 <xTaskResumeAll+0x19c>
   12840:	e5933000 	ldr	r3, [r3]
   12844:	e3530000 	cmp	r3, #0
   12848:	1afffff5 	bne	12824 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   1284c:	e3a03001 	mov	r3, #1
   12850:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   12854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12858:	e3530001 	cmp	r3, #1
   1285c:	0a000003 	beq	12870 <xTaskResumeAll+0x158>
   12860:	e59f3050 	ldr	r3, [pc, #80]	; 128b8 <xTaskResumeAll+0x1a0>
   12864:	e5933000 	ldr	r3, [r3]
   12868:	e3530001 	cmp	r3, #1
   1286c:	1a000005 	bne	12888 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   12870:	e3a03001 	mov	r3, #1
   12874:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   12878:	e59f3038 	ldr	r3, [pc, #56]	; 128b8 <xTaskResumeAll+0x1a0>
   1287c:	e3a02000 	mov	r2, #0
   12880:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   12884:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   12888:	ebfff73d 	bl	10584 <vPortExitCritical>

	return xAlreadyYielded;
   1288c:	e51b3010 	ldr	r3, [fp, #-16]
}
   12890:	e1a00003 	mov	r0, r3
   12894:	e24bd008 	sub	sp, fp, #8
   12898:	e8bd8810 	pop	{r4, fp, pc}
   1289c:	000148d0 	ldrdeq	r4, [r1], -r0
   128a0:	000148bc 			; <UNDEFINED> instruction: 0x000148bc
   128a4:	0001487c 	andeq	r4, r1, ip, ror r8
   128a8:	000148c8 	andeq	r4, r1, r8, asr #17
   128ac:	000147e8 	andeq	r4, r1, r8, ror #15
   128b0:	000147e4 	andeq	r4, r1, r4, ror #15
   128b4:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   128b8:	000148d8 	ldrdeq	r4, [r1], -r8

000128bc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   128bc:	e92d4800 	push	{fp, lr}
   128c0:	e28db004 	add	fp, sp, #4
   128c4:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   128c8:	ebfff71c 	bl	10540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   128cc:	e59f3018 	ldr	r3, [pc, #24]	; 128ec <xTaskGetTickCount+0x30>
   128d0:	e5933000 	ldr	r3, [r3]
   128d4:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   128d8:	ebfff729 	bl	10584 <vPortExitCritical>

	return xTicks;
   128dc:	e51b3008 	ldr	r3, [fp, #-8]
}
   128e0:	e1a00003 	mov	r0, r3
   128e4:	e24bd004 	sub	sp, fp, #4
   128e8:	e8bd8800 	pop	{fp, pc}
   128ec:	000148c0 	andeq	r4, r1, r0, asr #17

000128f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   128f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   128f4:	e28db000 	add	fp, sp, #0
   128f8:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   128fc:	e3a03000 	mov	r3, #0
   12900:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   12904:	e59f3018 	ldr	r3, [pc, #24]	; 12924 <xTaskGetTickCountFromISR+0x34>
   12908:	e5933000 	ldr	r3, [r3]
   1290c:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   12910:	e51b300c 	ldr	r3, [fp, #-12]
}
   12914:	e1a00003 	mov	r0, r3
   12918:	e28bd000 	add	sp, fp, #0
   1291c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12920:	e12fff1e 	bx	lr
   12924:	000148c0 	andeq	r4, r1, r0, asr #17

00012928 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   12928:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1292c:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   12930:	e59f3010 	ldr	r3, [pc, #16]	; 12948 <uxTaskGetNumberOfTasks+0x20>
   12934:	e5933000 	ldr	r3, [r3]
}
   12938:	e1a00003 	mov	r0, r3
   1293c:	e28bd000 	add	sp, fp, #0
   12940:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12944:	e12fff1e 	bx	lr
   12948:	000148bc 			; <UNDEFINED> instruction: 0x000148bc

0001294c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   1294c:	e92d4800 	push	{fp, lr}
   12950:	e28db004 	add	fp, sp, #4
   12954:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12958:	e59f31e4 	ldr	r3, [pc, #484]	; 12b44 <vTaskIncrementTick+0x1f8>
   1295c:	e5933000 	ldr	r3, [r3]
   12960:	e3530000 	cmp	r3, #0
   12964:	1a00006d 	bne	12b20 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   12968:	e59f31d8 	ldr	r3, [pc, #472]	; 12b48 <vTaskIncrementTick+0x1fc>
   1296c:	e5933000 	ldr	r3, [r3]
   12970:	e2833001 	add	r3, r3, #1
   12974:	e59f21cc 	ldr	r2, [pc, #460]	; 12b48 <vTaskIncrementTick+0x1fc>
   12978:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   1297c:	e59f31c4 	ldr	r3, [pc, #452]	; 12b48 <vTaskIncrementTick+0x1fc>
   12980:	e5933000 	ldr	r3, [r3]
   12984:	e3530000 	cmp	r3, #0
   12988:	1a000020 	bne	12a10 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   1298c:	e59f31b8 	ldr	r3, [pc, #440]	; 12b4c <vTaskIncrementTick+0x200>
   12990:	e5933000 	ldr	r3, [r3]
   12994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   12998:	e59f31b0 	ldr	r3, [pc, #432]	; 12b50 <vTaskIncrementTick+0x204>
   1299c:	e5933000 	ldr	r3, [r3]
   129a0:	e59f21a4 	ldr	r2, [pc, #420]	; 12b4c <vTaskIncrementTick+0x200>
   129a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   129a8:	e59f21a0 	ldr	r2, [pc, #416]	; 12b50 <vTaskIncrementTick+0x204>
   129ac:	e51b3008 	ldr	r3, [fp, #-8]
   129b0:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   129b4:	e59f3198 	ldr	r3, [pc, #408]	; 12b54 <vTaskIncrementTick+0x208>
   129b8:	e5933000 	ldr	r3, [r3]
   129bc:	e2833001 	add	r3, r3, #1
   129c0:	e59f218c 	ldr	r2, [pc, #396]	; 12b54 <vTaskIncrementTick+0x208>
   129c4:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   129c8:	e59f317c 	ldr	r3, [pc, #380]	; 12b4c <vTaskIncrementTick+0x200>
   129cc:	e5933000 	ldr	r3, [r3]
   129d0:	e5933000 	ldr	r3, [r3]
   129d4:	e3530000 	cmp	r3, #0
   129d8:	1a000003 	bne	129ec <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   129dc:	e59f3174 	ldr	r3, [pc, #372]	; 12b58 <vTaskIncrementTick+0x20c>
   129e0:	e3e02000 	mvn	r2, #0
   129e4:	e5832000 	str	r2, [r3]
   129e8:	ea000008 	b	12a10 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   129ec:	e59f3158 	ldr	r3, [pc, #344]	; 12b4c <vTaskIncrementTick+0x200>
   129f0:	e5933000 	ldr	r3, [r3]
   129f4:	e593300c 	ldr	r3, [r3, #12]
   129f8:	e593300c 	ldr	r3, [r3, #12]
   129fc:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   12a00:	e51b300c 	ldr	r3, [fp, #-12]
   12a04:	e5933004 	ldr	r3, [r3, #4]
   12a08:	e59f2148 	ldr	r2, [pc, #328]	; 12b58 <vTaskIncrementTick+0x20c>
   12a0c:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   12a10:	e59f3130 	ldr	r3, [pc, #304]	; 12b48 <vTaskIncrementTick+0x1fc>
   12a14:	e5932000 	ldr	r2, [r3]
   12a18:	e59f3138 	ldr	r3, [pc, #312]	; 12b58 <vTaskIncrementTick+0x20c>
   12a1c:	e5933000 	ldr	r3, [r3]
   12a20:	e1520003 	cmp	r2, r3
   12a24:	3a000043 	bcc	12b38 <vTaskIncrementTick+0x1ec>
   12a28:	e59f311c 	ldr	r3, [pc, #284]	; 12b4c <vTaskIncrementTick+0x200>
   12a2c:	e5933000 	ldr	r3, [r3]
   12a30:	e5933000 	ldr	r3, [r3]
   12a34:	e3530000 	cmp	r3, #0
   12a38:	1a000003 	bne	12a4c <vTaskIncrementTick+0x100>
   12a3c:	e59f3114 	ldr	r3, [pc, #276]	; 12b58 <vTaskIncrementTick+0x20c>
   12a40:	e3e02000 	mvn	r2, #0
   12a44:	e5832000 	str	r2, [r3]
   12a48:	ea00003a 	b	12b38 <vTaskIncrementTick+0x1ec>
   12a4c:	e59f30f8 	ldr	r3, [pc, #248]	; 12b4c <vTaskIncrementTick+0x200>
   12a50:	e5933000 	ldr	r3, [r3]
   12a54:	e593300c 	ldr	r3, [r3, #12]
   12a58:	e593300c 	ldr	r3, [r3, #12]
   12a5c:	e50b300c 	str	r3, [fp, #-12]
   12a60:	e51b300c 	ldr	r3, [fp, #-12]
   12a64:	e5933004 	ldr	r3, [r3, #4]
   12a68:	e50b3010 	str	r3, [fp, #-16]
   12a6c:	e59f30d4 	ldr	r3, [pc, #212]	; 12b48 <vTaskIncrementTick+0x1fc>
   12a70:	e5933000 	ldr	r3, [r3]
   12a74:	e51b2010 	ldr	r2, [fp, #-16]
   12a78:	e1520003 	cmp	r2, r3
   12a7c:	9a000003 	bls	12a90 <vTaskIncrementTick+0x144>
   12a80:	e59f20d0 	ldr	r2, [pc, #208]	; 12b58 <vTaskIncrementTick+0x20c>
   12a84:	e51b3010 	ldr	r3, [fp, #-16]
   12a88:	e5823000 	str	r3, [r2]
   12a8c:	ea000029 	b	12b38 <vTaskIncrementTick+0x1ec>
   12a90:	e51b300c 	ldr	r3, [fp, #-12]
   12a94:	e2833004 	add	r3, r3, #4
   12a98:	e1a00003 	mov	r0, r3
   12a9c:	ebfff92d 	bl	10f58 <vListRemove>
   12aa0:	e51b300c 	ldr	r3, [fp, #-12]
   12aa4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   12aa8:	e3530000 	cmp	r3, #0
   12aac:	0a000003 	beq	12ac0 <vTaskIncrementTick+0x174>
   12ab0:	e51b300c 	ldr	r3, [fp, #-12]
   12ab4:	e2833018 	add	r3, r3, #24
   12ab8:	e1a00003 	mov	r0, r3
   12abc:	ebfff925 	bl	10f58 <vListRemove>
   12ac0:	e51b300c 	ldr	r3, [fp, #-12]
   12ac4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ac8:	e59f308c 	ldr	r3, [pc, #140]	; 12b5c <vTaskIncrementTick+0x210>
   12acc:	e5933000 	ldr	r3, [r3]
   12ad0:	e1520003 	cmp	r2, r3
   12ad4:	9a000003 	bls	12ae8 <vTaskIncrementTick+0x19c>
   12ad8:	e51b300c 	ldr	r3, [fp, #-12]
   12adc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12ae0:	e59f2074 	ldr	r2, [pc, #116]	; 12b5c <vTaskIncrementTick+0x210>
   12ae4:	e5823000 	str	r3, [r2]
   12ae8:	e51b300c 	ldr	r3, [fp, #-12]
   12aec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12af0:	e1a03002 	mov	r3, r2
   12af4:	e1a03103 	lsl	r3, r3, #2
   12af8:	e0833002 	add	r3, r3, r2
   12afc:	e1a03103 	lsl	r3, r3, #2
   12b00:	e59f2058 	ldr	r2, [pc, #88]	; 12b60 <vTaskIncrementTick+0x214>
   12b04:	e0832002 	add	r2, r3, r2
   12b08:	e51b300c 	ldr	r3, [fp, #-12]
   12b0c:	e2833004 	add	r3, r3, #4
   12b10:	e1a01003 	mov	r1, r3
   12b14:	e1a00002 	mov	r0, r2
   12b18:	ebfff8b2 	bl	10de8 <vListInsertEnd>
   12b1c:	eaffffc1 	b	12a28 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   12b20:	e59f303c 	ldr	r3, [pc, #60]	; 12b64 <vTaskIncrementTick+0x218>
   12b24:	e5933000 	ldr	r3, [r3]
   12b28:	e2833001 	add	r3, r3, #1
   12b2c:	e59f2030 	ldr	r2, [pc, #48]	; 12b64 <vTaskIncrementTick+0x218>
   12b30:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   12b34:	eaffffff 	b	12b38 <vTaskIncrementTick+0x1ec>
   12b38:	e320f000 	nop	{0}
   12b3c:	e24bd004 	sub	sp, fp, #4
   12b40:	e8bd8800 	pop	{fp, pc}
   12b44:	000148d0 	ldrdeq	r4, [r1], -r0
   12b48:	000148c0 	andeq	r4, r1, r0, asr #17
   12b4c:	00014874 	andeq	r4, r1, r4, ror r8
   12b50:	00014878 	andeq	r4, r1, r8, ror r8
   12b54:	000148dc 	ldrdeq	r4, [r1], -ip
   12b58:	00014754 	andeq	r4, r1, r4, asr r7
   12b5c:	000148c8 	andeq	r4, r1, r8, asr #17
   12b60:	000147e8 	andeq	r4, r1, r8, ror #15
   12b64:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00012b68 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   12b68:	e92d4800 	push	{fp, lr}
   12b6c:	e28db004 	add	fp, sp, #4
   12b70:	e24dd010 	sub	sp, sp, #16
   12b74:	e50b0010 	str	r0, [fp, #-16]
   12b78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12b7c:	e51b3010 	ldr	r3, [fp, #-16]
   12b80:	e3530000 	cmp	r3, #0
   12b84:	1a000003 	bne	12b98 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12b88:	e59f3030 	ldr	r3, [pc, #48]	; 12bc0 <vTaskSetApplicationTaskTag+0x58>
   12b8c:	e5933000 	ldr	r3, [r3]
   12b90:	e50b3008 	str	r3, [fp, #-8]
   12b94:	ea000001 	b	12ba0 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12b98:	e51b3010 	ldr	r3, [fp, #-16]
   12b9c:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12ba0:	ebfff666 	bl	10540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   12ba4:	e51b3008 	ldr	r3, [fp, #-8]
   12ba8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12bac:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   12bb0:	ebfff673 	bl	10584 <vPortExitCritical>
	}
   12bb4:	e320f000 	nop	{0}
   12bb8:	e24bd004 	sub	sp, fp, #4
   12bbc:	e8bd8800 	pop	{fp, pc}
   12bc0:	000147e4 	andeq	r4, r1, r4, ror #15

00012bc4 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   12bc4:	e92d4800 	push	{fp, lr}
   12bc8:	e28db004 	add	fp, sp, #4
   12bcc:	e24dd010 	sub	sp, sp, #16
   12bd0:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   12bd4:	e51b3010 	ldr	r3, [fp, #-16]
   12bd8:	e3530000 	cmp	r3, #0
   12bdc:	1a000003 	bne	12bf0 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12be0:	e59f3034 	ldr	r3, [pc, #52]	; 12c1c <xTaskGetApplicationTaskTag+0x58>
   12be4:	e5933000 	ldr	r3, [r3]
   12be8:	e50b3008 	str	r3, [fp, #-8]
   12bec:	ea000001 	b	12bf8 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12bf0:	e51b3010 	ldr	r3, [fp, #-16]
   12bf4:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   12bf8:	ebfff650 	bl	10540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   12bfc:	e51b3008 	ldr	r3, [fp, #-8]
   12c00:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c04:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   12c08:	ebfff65d 	bl	10584 <vPortExitCritical>

		return xReturn;
   12c0c:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c10:	e1a00003 	mov	r0, r3
   12c14:	e24bd004 	sub	sp, fp, #4
   12c18:	e8bd8800 	pop	{fp, pc}
   12c1c:	000147e4 	andeq	r4, r1, r4, ror #15

00012c20 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   12c20:	e92d4800 	push	{fp, lr}
   12c24:	e28db004 	add	fp, sp, #4
   12c28:	e24dd010 	sub	sp, sp, #16
   12c2c:	e50b0010 	str	r0, [fp, #-16]
   12c30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   12c34:	e51b3010 	ldr	r3, [fp, #-16]
   12c38:	e3530000 	cmp	r3, #0
   12c3c:	1a000003 	bne	12c50 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   12c40:	e59f3050 	ldr	r3, [pc, #80]	; 12c98 <xTaskCallApplicationTaskHook+0x78>
   12c44:	e5933000 	ldr	r3, [r3]
   12c48:	e50b3008 	str	r3, [fp, #-8]
   12c4c:	ea000001 	b	12c58 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   12c50:	e51b3010 	ldr	r3, [fp, #-16]
   12c54:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   12c58:	e51b3008 	ldr	r3, [fp, #-8]
   12c5c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c60:	e3530000 	cmp	r3, #0
   12c64:	0a000005 	beq	12c80 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   12c68:	e51b3008 	ldr	r3, [fp, #-8]
   12c6c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   12c70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   12c74:	e12fff33 	blx	r3
   12c78:	e50b000c 	str	r0, [fp, #-12]
   12c7c:	ea000001 	b	12c88 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   12c80:	e3a03000 	mov	r3, #0
   12c84:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   12c88:	e51b300c 	ldr	r3, [fp, #-12]
	}
   12c8c:	e1a00003 	mov	r0, r3
   12c90:	e24bd004 	sub	sp, fp, #4
   12c94:	e8bd8800 	pop	{fp, pc}
   12c98:	000147e4 	andeq	r4, r1, r4, ror #15

00012c9c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   12c9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12ca0:	e28db000 	add	fp, sp, #0
   12ca4:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   12ca8:	e59f30e0 	ldr	r3, [pc, #224]	; 12d90 <vTaskSwitchContext+0xf4>
   12cac:	e5933000 	ldr	r3, [r3]
   12cb0:	e3530000 	cmp	r3, #0
   12cb4:	0a000008 	beq	12cdc <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   12cb8:	e59f30d4 	ldr	r3, [pc, #212]	; 12d94 <vTaskSwitchContext+0xf8>
   12cbc:	e3a02001 	mov	r2, #1
   12cc0:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   12cc4:	ea00002d 	b	12d80 <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   12cc8:	e59f30c8 	ldr	r3, [pc, #200]	; 12d98 <vTaskSwitchContext+0xfc>
   12ccc:	e5933000 	ldr	r3, [r3]
   12cd0:	e2433001 	sub	r3, r3, #1
   12cd4:	e59f20bc 	ldr	r2, [pc, #188]	; 12d98 <vTaskSwitchContext+0xfc>
   12cd8:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   12cdc:	e59f30b4 	ldr	r3, [pc, #180]	; 12d98 <vTaskSwitchContext+0xfc>
   12ce0:	e5932000 	ldr	r2, [r3]
   12ce4:	e59f10b0 	ldr	r1, [pc, #176]	; 12d9c <vTaskSwitchContext+0x100>
   12ce8:	e1a03002 	mov	r3, r2
   12cec:	e1a03103 	lsl	r3, r3, #2
   12cf0:	e0833002 	add	r3, r3, r2
   12cf4:	e1a03103 	lsl	r3, r3, #2
   12cf8:	e0813003 	add	r3, r1, r3
   12cfc:	e5933000 	ldr	r3, [r3]
   12d00:	e3530000 	cmp	r3, #0
   12d04:	0affffef 	beq	12cc8 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   12d08:	e59f3088 	ldr	r3, [pc, #136]	; 12d98 <vTaskSwitchContext+0xfc>
   12d0c:	e5932000 	ldr	r2, [r3]
   12d10:	e1a03002 	mov	r3, r2
   12d14:	e1a03103 	lsl	r3, r3, #2
   12d18:	e0833002 	add	r3, r3, r2
   12d1c:	e1a03103 	lsl	r3, r3, #2
   12d20:	e59f2074 	ldr	r2, [pc, #116]	; 12d9c <vTaskSwitchContext+0x100>
   12d24:	e0833002 	add	r3, r3, r2
   12d28:	e50b3008 	str	r3, [fp, #-8]
   12d2c:	e51b3008 	ldr	r3, [fp, #-8]
   12d30:	e5933004 	ldr	r3, [r3, #4]
   12d34:	e5932004 	ldr	r2, [r3, #4]
   12d38:	e51b3008 	ldr	r3, [fp, #-8]
   12d3c:	e5832004 	str	r2, [r3, #4]
   12d40:	e51b3008 	ldr	r3, [fp, #-8]
   12d44:	e5932004 	ldr	r2, [r3, #4]
   12d48:	e51b3008 	ldr	r3, [fp, #-8]
   12d4c:	e2833008 	add	r3, r3, #8
   12d50:	e1520003 	cmp	r2, r3
   12d54:	1a000004 	bne	12d6c <vTaskSwitchContext+0xd0>
   12d58:	e51b3008 	ldr	r3, [fp, #-8]
   12d5c:	e5933004 	ldr	r3, [r3, #4]
   12d60:	e5932004 	ldr	r2, [r3, #4]
   12d64:	e51b3008 	ldr	r3, [fp, #-8]
   12d68:	e5832004 	str	r2, [r3, #4]
   12d6c:	e51b3008 	ldr	r3, [fp, #-8]
   12d70:	e5933004 	ldr	r3, [r3, #4]
   12d74:	e593300c 	ldr	r3, [r3, #12]
   12d78:	e59f2020 	ldr	r2, [pc, #32]	; 12da0 <vTaskSwitchContext+0x104>
   12d7c:	e5823000 	str	r3, [r2]
}
   12d80:	e320f000 	nop	{0}
   12d84:	e28bd000 	add	sp, fp, #0
   12d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12d8c:	e12fff1e 	bx	lr
   12d90:	000148d0 	ldrdeq	r4, [r1], -r0
   12d94:	000148d8 	ldrdeq	r4, [r1], -r8
   12d98:	000148c8 	andeq	r4, r1, r8, asr #17
   12d9c:	000147e8 	andeq	r4, r1, r8, ror #15
   12da0:	000147e4 	andeq	r4, r1, r4, ror #15

00012da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   12da4:	e92d4800 	push	{fp, lr}
   12da8:	e28db004 	add	fp, sp, #4
   12dac:	e24dd010 	sub	sp, sp, #16
   12db0:	e50b0010 	str	r0, [fp, #-16]
   12db4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   12db8:	e59f3074 	ldr	r3, [pc, #116]	; 12e34 <vTaskPlaceOnEventList+0x90>
   12dbc:	e5933000 	ldr	r3, [r3]
   12dc0:	e2833018 	add	r3, r3, #24
   12dc4:	e1a01003 	mov	r1, r3
   12dc8:	e51b0010 	ldr	r0, [fp, #-16]
   12dcc:	ebfff82b 	bl	10e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12dd0:	e59f305c 	ldr	r3, [pc, #92]	; 12e34 <vTaskPlaceOnEventList+0x90>
   12dd4:	e5933000 	ldr	r3, [r3]
   12dd8:	e2833004 	add	r3, r3, #4
   12ddc:	e1a00003 	mov	r0, r3
   12de0:	ebfff85c 	bl	10f58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   12de4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12de8:	e3730001 	cmn	r3, #1
   12dec:	1a000006 	bne	12e0c <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   12df0:	e59f303c 	ldr	r3, [pc, #60]	; 12e34 <vTaskPlaceOnEventList+0x90>
   12df4:	e5933000 	ldr	r3, [r3]
   12df8:	e2833004 	add	r3, r3, #4
   12dfc:	e1a01003 	mov	r1, r3
   12e00:	e59f0030 	ldr	r0, [pc, #48]	; 12e38 <vTaskPlaceOnEventList+0x94>
   12e04:	ebfff7f7 	bl	10de8 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   12e08:	ea000006 	b	12e28 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   12e0c:	e59f3028 	ldr	r3, [pc, #40]	; 12e3c <vTaskPlaceOnEventList+0x98>
   12e10:	e5933000 	ldr	r3, [r3]
   12e14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   12e18:	e0823003 	add	r3, r2, r3
   12e1c:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   12e20:	e51b0008 	ldr	r0, [fp, #-8]
   12e24:	eb00013f 	bl	13328 <prvAddCurrentTaskToDelayedList>
}
   12e28:	e320f000 	nop	{0}
   12e2c:	e24bd004 	sub	sp, fp, #4
   12e30:	e8bd8800 	pop	{fp, pc}
   12e34:	000147e4 	andeq	r4, r1, r4, ror #15
   12e38:	000148a8 	andeq	r4, r1, r8, lsr #17
   12e3c:	000148c0 	andeq	r4, r1, r0, asr #17

00012e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   12e40:	e92d4800 	push	{fp, lr}
   12e44:	e28db004 	add	fp, sp, #4
   12e48:	e24dd010 	sub	sp, sp, #16
   12e4c:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   12e50:	e51b3010 	ldr	r3, [fp, #-16]
   12e54:	e593300c 	ldr	r3, [r3, #12]
   12e58:	e593300c 	ldr	r3, [r3, #12]
   12e5c:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   12e60:	e51b300c 	ldr	r3, [fp, #-12]
   12e64:	e2833018 	add	r3, r3, #24
   12e68:	e1a00003 	mov	r0, r3
   12e6c:	ebfff839 	bl	10f58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   12e70:	e59f30cc 	ldr	r3, [pc, #204]	; 12f44 <xTaskRemoveFromEventList+0x104>
   12e74:	e5933000 	ldr	r3, [r3]
   12e78:	e3530000 	cmp	r3, #0
   12e7c:	1a00001b 	bne	12ef0 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   12e80:	e51b300c 	ldr	r3, [fp, #-12]
   12e84:	e2833004 	add	r3, r3, #4
   12e88:	e1a00003 	mov	r0, r3
   12e8c:	ebfff831 	bl	10f58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   12e90:	e51b300c 	ldr	r3, [fp, #-12]
   12e94:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12e98:	e59f30a8 	ldr	r3, [pc, #168]	; 12f48 <xTaskRemoveFromEventList+0x108>
   12e9c:	e5933000 	ldr	r3, [r3]
   12ea0:	e1520003 	cmp	r2, r3
   12ea4:	9a000003 	bls	12eb8 <xTaskRemoveFromEventList+0x78>
   12ea8:	e51b300c 	ldr	r3, [fp, #-12]
   12eac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12eb0:	e59f2090 	ldr	r2, [pc, #144]	; 12f48 <xTaskRemoveFromEventList+0x108>
   12eb4:	e5823000 	str	r3, [r2]
   12eb8:	e51b300c 	ldr	r3, [fp, #-12]
   12ebc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12ec0:	e1a03002 	mov	r3, r2
   12ec4:	e1a03103 	lsl	r3, r3, #2
   12ec8:	e0833002 	add	r3, r3, r2
   12ecc:	e1a03103 	lsl	r3, r3, #2
   12ed0:	e59f2074 	ldr	r2, [pc, #116]	; 12f4c <xTaskRemoveFromEventList+0x10c>
   12ed4:	e0832002 	add	r2, r3, r2
   12ed8:	e51b300c 	ldr	r3, [fp, #-12]
   12edc:	e2833004 	add	r3, r3, #4
   12ee0:	e1a01003 	mov	r1, r3
   12ee4:	e1a00002 	mov	r0, r2
   12ee8:	ebfff7be 	bl	10de8 <vListInsertEnd>
   12eec:	ea000004 	b	12f04 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   12ef0:	e51b300c 	ldr	r3, [fp, #-12]
   12ef4:	e2833018 	add	r3, r3, #24
   12ef8:	e1a01003 	mov	r1, r3
   12efc:	e59f004c 	ldr	r0, [pc, #76]	; 12f50 <xTaskRemoveFromEventList+0x110>
   12f00:	ebfff7b8 	bl	10de8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   12f04:	e51b300c 	ldr	r3, [fp, #-12]
   12f08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12f0c:	e59f3040 	ldr	r3, [pc, #64]	; 12f54 <xTaskRemoveFromEventList+0x114>
   12f10:	e5933000 	ldr	r3, [r3]
   12f14:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   12f18:	e1520003 	cmp	r2, r3
   12f1c:	3a000002 	bcc	12f2c <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   12f20:	e3a03001 	mov	r3, #1
   12f24:	e50b3008 	str	r3, [fp, #-8]
   12f28:	ea000001 	b	12f34 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   12f2c:	e3a03000 	mov	r3, #0
   12f30:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   12f34:	e51b3008 	ldr	r3, [fp, #-8]
}
   12f38:	e1a00003 	mov	r0, r3
   12f3c:	e24bd004 	sub	sp, fp, #4
   12f40:	e8bd8800 	pop	{fp, pc}
   12f44:	000148d0 	ldrdeq	r4, [r1], -r0
   12f48:	000148c8 	andeq	r4, r1, r8, asr #17
   12f4c:	000147e8 	andeq	r4, r1, r8, ror #15
   12f50:	0001487c 	andeq	r4, r1, ip, ror r8
   12f54:	000147e4 	andeq	r4, r1, r4, ror #15

00012f58 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   12f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12f5c:	e28db000 	add	fp, sp, #0
   12f60:	e24dd00c 	sub	sp, sp, #12
   12f64:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   12f68:	e59f3028 	ldr	r3, [pc, #40]	; 12f98 <vTaskSetTimeOutState+0x40>
   12f6c:	e5932000 	ldr	r2, [r3]
   12f70:	e51b3008 	ldr	r3, [fp, #-8]
   12f74:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   12f78:	e59f301c 	ldr	r3, [pc, #28]	; 12f9c <vTaskSetTimeOutState+0x44>
   12f7c:	e5932000 	ldr	r2, [r3]
   12f80:	e51b3008 	ldr	r3, [fp, #-8]
   12f84:	e5832004 	str	r2, [r3, #4]
}
   12f88:	e320f000 	nop	{0}
   12f8c:	e28bd000 	add	sp, fp, #0
   12f90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12f94:	e12fff1e 	bx	lr
   12f98:	000148dc 	ldrdeq	r4, [r1], -ip
   12f9c:	000148c0 	andeq	r4, r1, r0, asr #17

00012fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   12fa0:	e92d4800 	push	{fp, lr}
   12fa4:	e28db004 	add	fp, sp, #4
   12fa8:	e24dd010 	sub	sp, sp, #16
   12fac:	e50b0010 	str	r0, [fp, #-16]
   12fb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   12fb4:	ebfff561 	bl	10540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   12fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   12fbc:	e5933000 	ldr	r3, [r3]
   12fc0:	e3730001 	cmn	r3, #1
   12fc4:	1a000002 	bne	12fd4 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   12fc8:	e3a03000 	mov	r3, #0
   12fcc:	e50b3008 	str	r3, [fp, #-8]
   12fd0:	ea000028 	b	13078 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   12fd4:	e51b3010 	ldr	r3, [fp, #-16]
   12fd8:	e5932000 	ldr	r2, [r3]
   12fdc:	e59f30a8 	ldr	r3, [pc, #168]	; 1308c <xTaskCheckForTimeOut+0xec>
   12fe0:	e5933000 	ldr	r3, [r3]
   12fe4:	e1520003 	cmp	r2, r3
   12fe8:	0a000008 	beq	13010 <xTaskCheckForTimeOut+0x70>
   12fec:	e51b3010 	ldr	r3, [fp, #-16]
   12ff0:	e5932004 	ldr	r2, [r3, #4]
   12ff4:	e59f3094 	ldr	r3, [pc, #148]	; 13090 <xTaskCheckForTimeOut+0xf0>
   12ff8:	e5933000 	ldr	r3, [r3]
   12ffc:	e1520003 	cmp	r2, r3
   13000:	8a000002 	bhi	13010 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   13004:	e3a03001 	mov	r3, #1
   13008:	e50b3008 	str	r3, [fp, #-8]
   1300c:	ea000019 	b	13078 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   13010:	e59f3078 	ldr	r3, [pc, #120]	; 13090 <xTaskCheckForTimeOut+0xf0>
   13014:	e5932000 	ldr	r2, [r3]
   13018:	e51b3010 	ldr	r3, [fp, #-16]
   1301c:	e5933004 	ldr	r3, [r3, #4]
   13020:	e0422003 	sub	r2, r2, r3
   13024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13028:	e5933000 	ldr	r3, [r3]
   1302c:	e1520003 	cmp	r2, r3
   13030:	2a00000e 	bcs	13070 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   13034:	e59f3054 	ldr	r3, [pc, #84]	; 13090 <xTaskCheckForTimeOut+0xf0>
   13038:	e5932000 	ldr	r2, [r3]
   1303c:	e51b3010 	ldr	r3, [fp, #-16]
   13040:	e5933004 	ldr	r3, [r3, #4]
   13044:	e0423003 	sub	r3, r2, r3
   13048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1304c:	e5922000 	ldr	r2, [r2]
   13050:	e0422003 	sub	r2, r2, r3
   13054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13058:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   1305c:	e51b0010 	ldr	r0, [fp, #-16]
   13060:	ebffffbc 	bl	12f58 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   13064:	e3a03000 	mov	r3, #0
   13068:	e50b3008 	str	r3, [fp, #-8]
   1306c:	ea000001 	b	13078 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   13070:	e3a03001 	mov	r3, #1
   13074:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   13078:	ebfff541 	bl	10584 <vPortExitCritical>

	return xReturn;
   1307c:	e51b3008 	ldr	r3, [fp, #-8]
}
   13080:	e1a00003 	mov	r0, r3
   13084:	e24bd004 	sub	sp, fp, #4
   13088:	e8bd8800 	pop	{fp, pc}
   1308c:	000148dc 	ldrdeq	r4, [r1], -ip
   13090:	000148c0 	andeq	r4, r1, r0, asr #17

00013094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   13094:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13098:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   1309c:	e59f3014 	ldr	r3, [pc, #20]	; 130b8 <vTaskMissedYield+0x24>
   130a0:	e3a02001 	mov	r2, #1
   130a4:	e5832000 	str	r2, [r3]
}
   130a8:	e320f000 	nop	{0}
   130ac:	e28bd000 	add	sp, fp, #0
   130b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   130b4:	e12fff1e 	bx	lr
   130b8:	000148d8 	ldrdeq	r4, [r1], -r8

000130bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   130bc:	e92d4800 	push	{fp, lr}
   130c0:	e28db004 	add	fp, sp, #4
   130c4:	e24dd008 	sub	sp, sp, #8
   130c8:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   130cc:	eb000066 	bl	1326c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   130d0:	e59f3010 	ldr	r3, [pc, #16]	; 130e8 <prvIdleTask+0x2c>
   130d4:	e5933000 	ldr	r3, [r3]
   130d8:	e3530001 	cmp	r3, #1
   130dc:	9afffffa 	bls	130cc <prvIdleTask+0x10>
			{
				taskYIELD();
   130e0:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   130e4:	eafffff8 	b	130cc <prvIdleTask+0x10>
   130e8:	000147e8 	andeq	r4, r1, r8, ror #15

000130ec <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   130ec:	e92d4800 	push	{fp, lr}
   130f0:	e28db004 	add	fp, sp, #4
   130f4:	e24dd010 	sub	sp, sp, #16
   130f8:	e50b0008 	str	r0, [fp, #-8]
   130fc:	e50b100c 	str	r1, [fp, #-12]
   13100:	e50b2010 	str	r2, [fp, #-16]
   13104:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   13108:	e51b3008 	ldr	r3, [fp, #-8]
   1310c:	e2833034 	add	r3, r3, #52	; 0x34
   13110:	e3a02010 	mov	r2, #16
   13114:	e51b100c 	ldr	r1, [fp, #-12]
   13118:	e1a00003 	mov	r0, r3
   1311c:	eb000558 	bl	14684 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   13120:	e51b3008 	ldr	r3, [fp, #-8]
   13124:	e3a02000 	mov	r2, #0
   13128:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   1312c:	e51b3010 	ldr	r3, [fp, #-16]
   13130:	e3530004 	cmp	r3, #4
   13134:	9a000001 	bls	13140 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   13138:	e3a03004 	mov	r3, #4
   1313c:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   13140:	e51b3008 	ldr	r3, [fp, #-8]
   13144:	e51b2010 	ldr	r2, [fp, #-16]
   13148:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   1314c:	e51b3008 	ldr	r3, [fp, #-8]
   13150:	e2833004 	add	r3, r3, #4
   13154:	e1a00003 	mov	r0, r3
   13158:	ebfff717 	bl	10dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   1315c:	e51b3008 	ldr	r3, [fp, #-8]
   13160:	e2833018 	add	r3, r3, #24
   13164:	e1a00003 	mov	r0, r3
   13168:	ebfff713 	bl	10dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   1316c:	e51b3008 	ldr	r3, [fp, #-8]
   13170:	e51b2008 	ldr	r2, [fp, #-8]
   13174:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   13178:	e51b3010 	ldr	r3, [fp, #-16]
   1317c:	e2632005 	rsb	r2, r3, #5
   13180:	e51b3008 	ldr	r3, [fp, #-8]
   13184:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   13188:	e51b3008 	ldr	r3, [fp, #-8]
   1318c:	e51b2008 	ldr	r2, [fp, #-8]
   13190:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   13194:	e51b3008 	ldr	r3, [fp, #-8]
   13198:	e3a02000 	mov	r2, #0
   1319c:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   131a0:	e320f000 	nop	{0}
   131a4:	e24bd004 	sub	sp, fp, #4
   131a8:	e8bd8800 	pop	{fp, pc}

000131ac <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   131ac:	e92d4800 	push	{fp, lr}
   131b0:	e28db004 	add	fp, sp, #4
   131b4:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131b8:	e3a03000 	mov	r3, #0
   131bc:	e50b3008 	str	r3, [fp, #-8]
   131c0:	ea00000b 	b	131f4 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   131c4:	e51b2008 	ldr	r2, [fp, #-8]
   131c8:	e1a03002 	mov	r3, r2
   131cc:	e1a03103 	lsl	r3, r3, #2
   131d0:	e0833002 	add	r3, r3, r2
   131d4:	e1a03103 	lsl	r3, r3, #2
   131d8:	e59f206c 	ldr	r2, [pc, #108]	; 1324c <prvInitialiseTaskLists+0xa0>
   131dc:	e0833002 	add	r3, r3, r2
   131e0:	e1a00003 	mov	r0, r3
   131e4:	ebfff6da 	bl	10d54 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   131e8:	e51b3008 	ldr	r3, [fp, #-8]
   131ec:	e2833001 	add	r3, r3, #1
   131f0:	e50b3008 	str	r3, [fp, #-8]
   131f4:	e51b3008 	ldr	r3, [fp, #-8]
   131f8:	e3530004 	cmp	r3, #4
   131fc:	9afffff0 	bls	131c4 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   13200:	e59f0048 	ldr	r0, [pc, #72]	; 13250 <prvInitialiseTaskLists+0xa4>
   13204:	ebfff6d2 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   13208:	e59f0044 	ldr	r0, [pc, #68]	; 13254 <prvInitialiseTaskLists+0xa8>
   1320c:	ebfff6d0 	bl	10d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   13210:	e59f0040 	ldr	r0, [pc, #64]	; 13258 <prvInitialiseTaskLists+0xac>
   13214:	ebfff6ce 	bl	10d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   13218:	e59f003c 	ldr	r0, [pc, #60]	; 1325c <prvInitialiseTaskLists+0xb0>
   1321c:	ebfff6cc 	bl	10d54 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   13220:	e59f0038 	ldr	r0, [pc, #56]	; 13260 <prvInitialiseTaskLists+0xb4>
   13224:	ebfff6ca 	bl	10d54 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   13228:	e59f3034 	ldr	r3, [pc, #52]	; 13264 <prvInitialiseTaskLists+0xb8>
   1322c:	e59f201c 	ldr	r2, [pc, #28]	; 13250 <prvInitialiseTaskLists+0xa4>
   13230:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   13234:	e59f302c 	ldr	r3, [pc, #44]	; 13268 <prvInitialiseTaskLists+0xbc>
   13238:	e59f2014 	ldr	r2, [pc, #20]	; 13254 <prvInitialiseTaskLists+0xa8>
   1323c:	e5832000 	str	r2, [r3]
}
   13240:	e320f000 	nop	{0}
   13244:	e24bd004 	sub	sp, fp, #4
   13248:	e8bd8800 	pop	{fp, pc}
   1324c:	000147e8 	andeq	r4, r1, r8, ror #15
   13250:	0001484c 	andeq	r4, r1, ip, asr #16
   13254:	00014860 	andeq	r4, r1, r0, ror #16
   13258:	0001487c 	andeq	r4, r1, ip, ror r8
   1325c:	00014890 	muleq	r1, r0, r8
   13260:	000148a8 	andeq	r4, r1, r8, lsr #17
   13264:	00014874 	andeq	r4, r1, r4, ror r8
   13268:	00014878 	andeq	r4, r1, r8, ror r8

0001326c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1326c:	e92d4800 	push	{fp, lr}
   13270:	e28db004 	add	fp, sp, #4
   13274:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   13278:	e59f309c 	ldr	r3, [pc, #156]	; 1331c <prvCheckTasksWaitingTermination+0xb0>
   1327c:	e5933000 	ldr	r3, [r3]
   13280:	e3530000 	cmp	r3, #0
   13284:	0a000021 	beq	13310 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   13288:	ebfffd16 	bl	126e8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   1328c:	e59f308c 	ldr	r3, [pc, #140]	; 13320 <prvCheckTasksWaitingTermination+0xb4>
   13290:	e5933000 	ldr	r3, [r3]
   13294:	e3530000 	cmp	r3, #0
   13298:	03a03001 	moveq	r3, #1
   1329c:	13a03000 	movne	r3, #0
   132a0:	e6ef3073 	uxtb	r3, r3
   132a4:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   132a8:	ebfffd1a 	bl	12718 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   132ac:	e51b3008 	ldr	r3, [fp, #-8]
   132b0:	e3530000 	cmp	r3, #0
   132b4:	1a000015 	bne	13310 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   132b8:	ebfff4a0 	bl	10540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   132bc:	e59f305c 	ldr	r3, [pc, #92]	; 13320 <prvCheckTasksWaitingTermination+0xb4>
   132c0:	e593300c 	ldr	r3, [r3, #12]
   132c4:	e593300c 	ldr	r3, [r3, #12]
   132c8:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   132cc:	e51b300c 	ldr	r3, [fp, #-12]
   132d0:	e2833004 	add	r3, r3, #4
   132d4:	e1a00003 	mov	r0, r3
   132d8:	ebfff71e 	bl	10f58 <vListRemove>
					--uxCurrentNumberOfTasks;
   132dc:	e59f3040 	ldr	r3, [pc, #64]	; 13324 <prvCheckTasksWaitingTermination+0xb8>
   132e0:	e5933000 	ldr	r3, [r3]
   132e4:	e2433001 	sub	r3, r3, #1
   132e8:	e59f2034 	ldr	r2, [pc, #52]	; 13324 <prvCheckTasksWaitingTermination+0xb8>
   132ec:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   132f0:	e59f3024 	ldr	r3, [pc, #36]	; 1331c <prvCheckTasksWaitingTermination+0xb0>
   132f4:	e5933000 	ldr	r3, [r3]
   132f8:	e2433001 	sub	r3, r3, #1
   132fc:	e59f2018 	ldr	r2, [pc, #24]	; 1331c <prvCheckTasksWaitingTermination+0xb0>
   13300:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   13304:	ebfff49e 	bl	10584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   13308:	e51b000c 	ldr	r0, [fp, #-12]
   1330c:	eb00005f 	bl	13490 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   13310:	e320f000 	nop	{0}
   13314:	e24bd004 	sub	sp, fp, #4
   13318:	e8bd8800 	pop	{fp, pc}
   1331c:	000148a4 	andeq	r4, r1, r4, lsr #17
   13320:	00014890 	muleq	r1, r0, r8
   13324:	000148bc 			; <UNDEFINED> instruction: 0x000148bc

00013328 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   13328:	e92d4800 	push	{fp, lr}
   1332c:	e28db004 	add	fp, sp, #4
   13330:	e24dd008 	sub	sp, sp, #8
   13334:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   13338:	e59f308c 	ldr	r3, [pc, #140]	; 133cc <prvAddCurrentTaskToDelayedList+0xa4>
   1333c:	e5933000 	ldr	r3, [r3]
   13340:	e51b2008 	ldr	r2, [fp, #-8]
   13344:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   13348:	e59f3080 	ldr	r3, [pc, #128]	; 133d0 <prvAddCurrentTaskToDelayedList+0xa8>
   1334c:	e5933000 	ldr	r3, [r3]
   13350:	e51b2008 	ldr	r2, [fp, #-8]
   13354:	e1520003 	cmp	r2, r3
   13358:	2a000008 	bcs	13380 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   1335c:	e59f3070 	ldr	r3, [pc, #112]	; 133d4 <prvAddCurrentTaskToDelayedList+0xac>
   13360:	e5932000 	ldr	r2, [r3]
   13364:	e59f3060 	ldr	r3, [pc, #96]	; 133cc <prvAddCurrentTaskToDelayedList+0xa4>
   13368:	e5933000 	ldr	r3, [r3]
   1336c:	e2833004 	add	r3, r3, #4
   13370:	e1a01003 	mov	r1, r3
   13374:	e1a00002 	mov	r0, r2
   13378:	ebfff6c0 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   1337c:	ea00000f 	b	133c0 <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   13380:	e59f3050 	ldr	r3, [pc, #80]	; 133d8 <prvAddCurrentTaskToDelayedList+0xb0>
   13384:	e5932000 	ldr	r2, [r3]
   13388:	e59f303c 	ldr	r3, [pc, #60]	; 133cc <prvAddCurrentTaskToDelayedList+0xa4>
   1338c:	e5933000 	ldr	r3, [r3]
   13390:	e2833004 	add	r3, r3, #4
   13394:	e1a01003 	mov	r1, r3
   13398:	e1a00002 	mov	r0, r2
   1339c:	ebfff6b7 	bl	10e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   133a0:	e59f3034 	ldr	r3, [pc, #52]	; 133dc <prvAddCurrentTaskToDelayedList+0xb4>
   133a4:	e5933000 	ldr	r3, [r3]
   133a8:	e51b2008 	ldr	r2, [fp, #-8]
   133ac:	e1520003 	cmp	r2, r3
   133b0:	2a000002 	bcs	133c0 <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   133b4:	e59f2020 	ldr	r2, [pc, #32]	; 133dc <prvAddCurrentTaskToDelayedList+0xb4>
   133b8:	e51b3008 	ldr	r3, [fp, #-8]
   133bc:	e5823000 	str	r3, [r2]
}
   133c0:	e320f000 	nop	{0}
   133c4:	e24bd004 	sub	sp, fp, #4
   133c8:	e8bd8800 	pop	{fp, pc}
   133cc:	000147e4 	andeq	r4, r1, r4, ror #15
   133d0:	000148c0 	andeq	r4, r1, r0, asr #17
   133d4:	00014878 	andeq	r4, r1, r8, ror r8
   133d8:	00014874 	andeq	r4, r1, r4, ror r8
   133dc:	00014754 	andeq	r4, r1, r4, asr r7

000133e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   133e0:	e92d4800 	push	{fp, lr}
   133e4:	e28db004 	add	fp, sp, #4
   133e8:	e24dd010 	sub	sp, sp, #16
   133ec:	e1a03000 	mov	r3, r0
   133f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   133f4:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   133f8:	e3a00048 	mov	r0, #72	; 0x48
   133fc:	eb00028f 	bl	13e40 <pvPortMalloc>
   13400:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   13404:	e51b3008 	ldr	r3, [fp, #-8]
   13408:	e3530000 	cmp	r3, #0
   1340c:	0a00001b 	beq	13480 <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   13410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13414:	e3530000 	cmp	r3, #0
   13418:	1a000005 	bne	13434 <prvAllocateTCBAndStack+0x54>
   1341c:	e15b30be 	ldrh	r3, [fp, #-14]
   13420:	e1a03103 	lsl	r3, r3, #2
   13424:	e1a00003 	mov	r0, r3
   13428:	eb000284 	bl	13e40 <pvPortMalloc>
   1342c:	e1a03000 	mov	r3, r0
   13430:	ea000000 	b	13438 <prvAllocateTCBAndStack+0x58>
   13434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13438:	e51b2008 	ldr	r2, [fp, #-8]
   1343c:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   13440:	e51b3008 	ldr	r3, [fp, #-8]
   13444:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   13448:	e3530000 	cmp	r3, #0
   1344c:	1a000004 	bne	13464 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   13450:	e51b0008 	ldr	r0, [fp, #-8]
   13454:	eb0002eb 	bl	14008 <vPortFree>
			pxNewTCB = NULL;
   13458:	e3a03000 	mov	r3, #0
   1345c:	e50b3008 	str	r3, [fp, #-8]
   13460:	ea000006 	b	13480 <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   13464:	e51b3008 	ldr	r3, [fp, #-8]
   13468:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   1346c:	e15b30be 	ldrh	r3, [fp, #-14]
   13470:	e1a03103 	lsl	r3, r3, #2
   13474:	e1a02003 	mov	r2, r3
   13478:	e3a010a5 	mov	r1, #165	; 0xa5
   1347c:	eb000439 	bl	14568 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   13480:	e51b3008 	ldr	r3, [fp, #-8]
}
   13484:	e1a00003 	mov	r0, r3
   13488:	e24bd004 	sub	sp, fp, #4
   1348c:	e8bd8800 	pop	{fp, pc}

00013490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   13490:	e92d4800 	push	{fp, lr}
   13494:	e28db004 	add	fp, sp, #4
   13498:	e24dd008 	sub	sp, sp, #8
   1349c:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   134a0:	e51b3008 	ldr	r3, [fp, #-8]
   134a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   134a8:	e1a00003 	mov	r0, r3
   134ac:	eb0002d5 	bl	14008 <vPortFree>
		vPortFree( pxTCB );
   134b0:	e51b0008 	ldr	r0, [fp, #-8]
   134b4:	eb0002d3 	bl	14008 <vPortFree>
	}
   134b8:	e320f000 	nop	{0}
   134bc:	e24bd004 	sub	sp, fp, #4
   134c0:	e8bd8800 	pop	{fp, pc}

000134c4 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   134c4:	e92d4800 	push	{fp, lr}
   134c8:	e28db004 	add	fp, sp, #4
   134cc:	e24dd010 	sub	sp, sp, #16
   134d0:	e50b0010 	str	r0, [fp, #-16]
   134d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   134d8:	ea00001e 	b	13558 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   134dc:	e51b3010 	ldr	r3, [fp, #-16]
   134e0:	e16f3f13 	clz	r3, r3
   134e4:	e263301f 	rsb	r3, r3, #31
   134e8:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   134ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   134f0:	e51b3008 	ldr	r3, [fp, #-8]
   134f4:	e0823003 	add	r3, r2, r3
   134f8:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   134fc:	e59f2070 	ldr	r2, [pc, #112]	; 13574 <handleRange+0xb0>
   13500:	e51b300c 	ldr	r3, [fp, #-12]
   13504:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   13508:	e3530000 	cmp	r3, #0
   1350c:	0a00000a 	beq	1353c <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   13510:	e59f205c 	ldr	r2, [pc, #92]	; 13574 <handleRange+0xb0>
   13514:	e51b300c 	ldr	r3, [fp, #-12]
   13518:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   1351c:	e59f1050 	ldr	r1, [pc, #80]	; 13574 <handleRange+0xb0>
   13520:	e51b300c 	ldr	r3, [fp, #-12]
   13524:	e1a03183 	lsl	r3, r3, #3
   13528:	e0813003 	add	r3, r1, r3
   1352c:	e5933004 	ldr	r3, [r3, #4]
   13530:	e1a01003 	mov	r1, r3
   13534:	e51b000c 	ldr	r0, [fp, #-12]
   13538:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   1353c:	e3a02001 	mov	r2, #1
   13540:	e51b3008 	ldr	r3, [fp, #-8]
   13544:	e1a03312 	lsl	r3, r2, r3
   13548:	e1e03003 	mvn	r3, r3
   1354c:	e51b2010 	ldr	r2, [fp, #-16]
   13550:	e0033002 	and	r3, r3, r2
   13554:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   13558:	e51b3010 	ldr	r3, [fp, #-16]
   1355c:	e3530000 	cmp	r3, #0
   13560:	1affffdd 	bne	134dc <handleRange+0x18>
	}
}
   13564:	e320f000 	nop	{0}
   13568:	e320f000 	nop	{0}
   1356c:	e24bd004 	sub	sp, fp, #4
   13570:	e8bd8800 	pop	{fp, pc}
   13574:	000148e4 	andeq	r4, r1, r4, ror #17

00013578 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   13578:	e92d4830 	push	{r4, r5, fp, lr}
   1357c:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   13580:	e59f3088 	ldr	r3, [pc, #136]	; 13610 <irqHandler+0x98>
   13584:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   13588:	e2043c01 	and	r3, r4, #256	; 0x100
   1358c:	e3530000 	cmp	r3, #0
   13590:	0a000007 	beq	135b4 <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   13594:	e59f3074 	ldr	r3, [pc, #116]	; 13610 <irqHandler+0x98>
   13598:	e5932004 	ldr	r2, [r3, #4]
   1359c:	e59f3070 	ldr	r3, [pc, #112]	; 13614 <irqHandler+0x9c>
   135a0:	e5933000 	ldr	r3, [r3]
   135a4:	e0033002 	and	r3, r3, r2
   135a8:	e3a01000 	mov	r1, #0
   135ac:	e1a00003 	mov	r0, r3
   135b0:	ebffffc3 	bl	134c4 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   135b4:	e2043c02 	and	r3, r4, #512	; 0x200
   135b8:	e3530000 	cmp	r3, #0
   135bc:	0a000007 	beq	135e0 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   135c0:	e59f3048 	ldr	r3, [pc, #72]	; 13610 <irqHandler+0x98>
   135c4:	e5932008 	ldr	r2, [r3, #8]
   135c8:	e59f3044 	ldr	r3, [pc, #68]	; 13614 <irqHandler+0x9c>
   135cc:	e5933004 	ldr	r3, [r3, #4]
   135d0:	e0033002 	and	r3, r3, r2
   135d4:	e3a01020 	mov	r1, #32
   135d8:	e1a00003 	mov	r0, r3
   135dc:	ebffffb8 	bl	134c4 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   135e0:	e6ef3074 	uxtb	r3, r4
   135e4:	e3530000 	cmp	r3, #0
   135e8:	0a000006 	beq	13608 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   135ec:	e59f3020 	ldr	r3, [pc, #32]	; 13614 <irqHandler+0x9c>
   135f0:	e5933008 	ldr	r3, [r3, #8]
   135f4:	e0033004 	and	r3, r3, r4
   135f8:	e6ef3073 	uxtb	r3, r3
   135fc:	e3a01040 	mov	r1, #64	; 0x40
   13600:	e1a00003 	mov	r0, r3
   13604:	ebffffae 	bl	134c4 <handleRange>
}
   13608:	e320f000 	nop	{0}
   1360c:	e8bd8830 	pop	{r4, r5, fp, pc}
   13610:	2000b200 	andcs	fp, r0, r0, lsl #4
   13614:	00014b24 	andeq	r4, r1, r4, lsr #22

00013618 <irqUnblock>:

void irqUnblock (void)
{
   13618:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1361c:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   13620:	f1080080 	cpsie	i
}
   13624:	e320f000 	nop	{0}
   13628:	e28bd000 	add	sp, fp, #0
   1362c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13630:	e12fff1e 	bx	lr

00013634 <irqBlock>:

void irqBlock (void)
{
   13634:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13638:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   1363c:	f10c0080 	cpsid	i
}
   13640:	e320f000 	nop	{0}
   13644:	e28bd000 	add	sp, fp, #0
   13648:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1364c:	e12fff1e 	bx	lr

00013650 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   13650:	e92d4800 	push	{fp, lr}
   13654:	e28db004 	add	fp, sp, #4
   13658:	e24dd010 	sub	sp, sp, #16
   1365c:	e50b0008 	str	r0, [fp, #-8]
   13660:	e50b100c 	str	r1, [fp, #-12]
   13664:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13668:	e51b3008 	ldr	r3, [fp, #-8]
   1366c:	e3530047 	cmp	r3, #71	; 0x47
   13670:	8a00000b 	bhi	136a4 <irqRegister+0x54>
		irqBlock();
   13674:	ebffffee 	bl	13634 <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   13678:	e59f1030 	ldr	r1, [pc, #48]	; 136b0 <irqRegister+0x60>
   1367c:	e51b3008 	ldr	r3, [fp, #-8]
   13680:	e51b200c 	ldr	r2, [fp, #-12]
   13684:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   13688:	e59f2020 	ldr	r2, [pc, #32]	; 136b0 <irqRegister+0x60>
   1368c:	e51b3008 	ldr	r3, [fp, #-8]
   13690:	e1a03183 	lsl	r3, r3, #3
   13694:	e0823003 	add	r3, r2, r3
   13698:	e51b2010 	ldr	r2, [fp, #-16]
   1369c:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   136a0:	ebffffdc 	bl	13618 <irqUnblock>
	}
}
   136a4:	e320f000 	nop	{0}
   136a8:	e24bd004 	sub	sp, fp, #4
   136ac:	e8bd8800 	pop	{fp, pc}
   136b0:	000148e4 	andeq	r4, r1, r4, ror #17

000136b4 <irqEnable>:

void irqEnable (const unsigned int irq)
{
   136b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   136b8:	e28db000 	add	fp, sp, #0
   136bc:	e24dd014 	sub	sp, sp, #20
   136c0:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   136c4:	e51b3010 	ldr	r3, [fp, #-16]
   136c8:	e203301f 	and	r3, r3, #31
   136cc:	e3a02001 	mov	r2, #1
   136d0:	e1a03312 	lsl	r3, r2, r3
   136d4:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   136d8:	e51b3010 	ldr	r3, [fp, #-16]
   136dc:	e353001f 	cmp	r3, #31
   136e0:	8a000009 	bhi	1370c <irqEnable+0x58>
		pRegs->Enable1 = mask;
   136e4:	e59f2094 	ldr	r2, [pc, #148]	; 13780 <irqEnable+0xcc>
   136e8:	e51b3008 	ldr	r3, [fp, #-8]
   136ec:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   136f0:	e59f308c 	ldr	r3, [pc, #140]	; 13784 <irqEnable+0xd0>
   136f4:	e5932000 	ldr	r2, [r3]
   136f8:	e51b3008 	ldr	r3, [fp, #-8]
   136fc:	e1823003 	orr	r3, r2, r3
   13700:	e59f207c 	ldr	r2, [pc, #124]	; 13784 <irqEnable+0xd0>
   13704:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   13708:	ea000018 	b	13770 <irqEnable+0xbc>
	else if (irq <= 63) {
   1370c:	e51b3010 	ldr	r3, [fp, #-16]
   13710:	e353003f 	cmp	r3, #63	; 0x3f
   13714:	8a000009 	bhi	13740 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   13718:	e59f2060 	ldr	r2, [pc, #96]	; 13780 <irqEnable+0xcc>
   1371c:	e51b3008 	ldr	r3, [fp, #-8]
   13720:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   13724:	e59f3058 	ldr	r3, [pc, #88]	; 13784 <irqEnable+0xd0>
   13728:	e5932004 	ldr	r2, [r3, #4]
   1372c:	e51b3008 	ldr	r3, [fp, #-8]
   13730:	e1823003 	orr	r3, r2, r3
   13734:	e59f2048 	ldr	r2, [pc, #72]	; 13784 <irqEnable+0xd0>
   13738:	e5823004 	str	r3, [r2, #4]
}
   1373c:	ea00000b 	b	13770 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   13740:	e51b3010 	ldr	r3, [fp, #-16]
   13744:	e3530047 	cmp	r3, #71	; 0x47
   13748:	8a000008 	bhi	13770 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   1374c:	e59f202c 	ldr	r2, [pc, #44]	; 13780 <irqEnable+0xcc>
   13750:	e51b3008 	ldr	r3, [fp, #-8]
   13754:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   13758:	e59f3024 	ldr	r3, [pc, #36]	; 13784 <irqEnable+0xd0>
   1375c:	e5932008 	ldr	r2, [r3, #8]
   13760:	e51b3008 	ldr	r3, [fp, #-8]
   13764:	e1823003 	orr	r3, r2, r3
   13768:	e59f2014 	ldr	r2, [pc, #20]	; 13784 <irqEnable+0xd0>
   1376c:	e5823008 	str	r3, [r2, #8]
}
   13770:	e320f000 	nop	{0}
   13774:	e28bd000 	add	sp, fp, #0
   13778:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1377c:	e12fff1e 	bx	lr
   13780:	2000b200 	andcs	fp, r0, r0, lsl #4
   13784:	00014b24 	andeq	r4, r1, r4, lsr #22

00013788 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   13788:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1378c:	e28db000 	add	fp, sp, #0
   13790:	e24dd014 	sub	sp, sp, #20
   13794:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   13798:	e51b3010 	ldr	r3, [fp, #-16]
   1379c:	e203301f 	and	r3, r3, #31
   137a0:	e3a02001 	mov	r2, #1
   137a4:	e1a03312 	lsl	r3, r2, r3
   137a8:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   137ac:	e51b3010 	ldr	r3, [fp, #-16]
   137b0:	e353001f 	cmp	r3, #31
   137b4:	8a00000a 	bhi	137e4 <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   137b8:	e59f20a0 	ldr	r2, [pc, #160]	; 13860 <irqDisable+0xd8>
   137bc:	e51b3008 	ldr	r3, [fp, #-8]
   137c0:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   137c4:	e59f3098 	ldr	r3, [pc, #152]	; 13864 <irqDisable+0xdc>
   137c8:	e5932000 	ldr	r2, [r3]
   137cc:	e51b3008 	ldr	r3, [fp, #-8]
   137d0:	e1e03003 	mvn	r3, r3
   137d4:	e0033002 	and	r3, r3, r2
   137d8:	e59f2084 	ldr	r2, [pc, #132]	; 13864 <irqDisable+0xdc>
   137dc:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   137e0:	ea00001a 	b	13850 <irqDisable+0xc8>
	else if (irq <= 63) {
   137e4:	e51b3010 	ldr	r3, [fp, #-16]
   137e8:	e353003f 	cmp	r3, #63	; 0x3f
   137ec:	8a00000a 	bhi	1381c <irqDisable+0x94>
		pRegs->Disable2 = mask;
   137f0:	e59f2068 	ldr	r2, [pc, #104]	; 13860 <irqDisable+0xd8>
   137f4:	e51b3008 	ldr	r3, [fp, #-8]
   137f8:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   137fc:	e59f3060 	ldr	r3, [pc, #96]	; 13864 <irqDisable+0xdc>
   13800:	e5932004 	ldr	r2, [r3, #4]
   13804:	e51b3008 	ldr	r3, [fp, #-8]
   13808:	e1e03003 	mvn	r3, r3
   1380c:	e0033002 	and	r3, r3, r2
   13810:	e59f204c 	ldr	r2, [pc, #76]	; 13864 <irqDisable+0xdc>
   13814:	e5823004 	str	r3, [r2, #4]
}
   13818:	ea00000c 	b	13850 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   1381c:	e51b3010 	ldr	r3, [fp, #-16]
   13820:	e3530047 	cmp	r3, #71	; 0x47
   13824:	8a000009 	bhi	13850 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   13828:	e59f2030 	ldr	r2, [pc, #48]	; 13860 <irqDisable+0xd8>
   1382c:	e51b3008 	ldr	r3, [fp, #-8]
   13830:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   13834:	e59f3028 	ldr	r3, [pc, #40]	; 13864 <irqDisable+0xdc>
   13838:	e5932008 	ldr	r2, [r3, #8]
   1383c:	e51b3008 	ldr	r3, [fp, #-8]
   13840:	e1e03003 	mvn	r3, r3
   13844:	e0033002 	and	r3, r3, r2
   13848:	e59f2014 	ldr	r2, [pc, #20]	; 13864 <irqDisable+0xdc>
   1384c:	e5823008 	str	r3, [r2, #8]
}
   13850:	e320f000 	nop	{0}
   13854:	e28bd000 	add	sp, fp, #0
   13858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1385c:	e12fff1e 	bx	lr
   13860:	2000b200 	andcs	fp, r0, r0, lsl #4
   13864:	00014b24 	andeq	r4, r1, r4, lsr #22

00013868 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   13868:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1386c:	e28db000 	add	fp, sp, #0
   13870:	e24dd01c 	sub	sp, sp, #28
   13874:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   13878:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	int offset = pinNum / 10;
   1387c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13880:	e59f20b4 	ldr	r2, [pc, #180]	; 1393c <SetGpioFunction+0xd4>
   13884:	e0832392 	umull	r2, r3, r2, r3
   13888:	e1a031a3 	lsr	r3, r3, #3
   1388c:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   13890:	e59f20a8 	ldr	r2, [pc, #168]	; 13940 <SetGpioFunction+0xd8>
   13894:	e51b3008 	ldr	r3, [fp, #-8]
   13898:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   1389c:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   138a0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   138a4:	e59f3090 	ldr	r3, [pc, #144]	; 1393c <SetGpioFunction+0xd4>
   138a8:	e0832193 	umull	r2, r3, r3, r1
   138ac:	e1a021a3 	lsr	r2, r3, #3
   138b0:	e1a03002 	mov	r3, r2
   138b4:	e1a03103 	lsl	r3, r3, #2
   138b8:	e0833002 	add	r3, r3, r2
   138bc:	e1a03083 	lsl	r3, r3, #1
   138c0:	e0412003 	sub	r2, r1, r3
   138c4:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   138c8:	e51b2010 	ldr	r2, [fp, #-16]
   138cc:	e1a03002 	mov	r3, r2
   138d0:	e1a03083 	lsl	r3, r3, #1
   138d4:	e0833002 	add	r3, r3, r2
   138d8:	e3a02007 	mov	r2, #7
   138dc:	e1a03312 	lsl	r3, r2, r3
   138e0:	e1e03003 	mvn	r3, r3
   138e4:	e1a02003 	mov	r2, r3
   138e8:	e51b300c 	ldr	r3, [fp, #-12]
   138ec:	e0033002 	and	r3, r3, r2
   138f0:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   138f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   138f8:	e2031007 	and	r1, r3, #7
   138fc:	e51b2010 	ldr	r2, [fp, #-16]
   13900:	e1a03002 	mov	r3, r2
   13904:	e1a03083 	lsl	r3, r3, #1
   13908:	e0833002 	add	r3, r3, r2
   1390c:	e1a03311 	lsl	r3, r1, r3
   13910:	e51b200c 	ldr	r2, [fp, #-12]
   13914:	e1823003 	orr	r3, r2, r3
   13918:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   1391c:	e59f101c 	ldr	r1, [pc, #28]	; 13940 <SetGpioFunction+0xd8>
   13920:	e51b3008 	ldr	r3, [fp, #-8]
   13924:	e51b200c 	ldr	r2, [fp, #-12]
   13928:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   1392c:	e320f000 	nop	{0}
   13930:	e28bd000 	add	sp, fp, #0
   13934:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13938:	e12fff1e 	bx	lr
   1393c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   13940:	20200000 	eorcs	r0, r0, r0

00013944 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   13944:	e92d4800 	push	{fp, lr}
   13948:	e28db004 	add	fp, sp, #4
   1394c:	e24dd008 	sub	sp, sp, #8
   13950:	e50b0008 	str	r0, [fp, #-8]
   13954:	e1a03001 	mov	r3, r1
   13958:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   1395c:	e55b3009 	ldrb	r3, [fp, #-9]
   13960:	e1a01003 	mov	r1, r3
   13964:	e51b0008 	ldr	r0, [fp, #-8]
   13968:	ebffffbe 	bl	13868 <SetGpioFunction>
}
   1396c:	e320f000 	nop	{0}
   13970:	e24bd004 	sub	sp, fp, #4
   13974:	e8bd8800 	pop	{fp, pc}

00013978 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   13978:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1397c:	e28db000 	add	fp, sp, #0
   13980:	e24dd014 	sub	sp, sp, #20
   13984:	e50b0010 	str	r0, [fp, #-16]
   13988:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset=pinNum/32;
   1398c:	e51b3010 	ldr	r3, [fp, #-16]
   13990:	e1a032a3 	lsr	r3, r3, #5
   13994:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   13998:	e51b3010 	ldr	r3, [fp, #-16]
   1399c:	e203301f 	and	r3, r3, #31
   139a0:	e3a02001 	mov	r2, #1
   139a4:	e1a03312 	lsl	r3, r2, r3
   139a8:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   139ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   139b0:	e3530000 	cmp	r3, #0
   139b4:	0a00000e 	beq	139f4 <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   139b8:	e59f206c 	ldr	r2, [pc, #108]	; 13a2c <SetGpio+0xb4>
   139bc:	e51b3008 	ldr	r3, [fp, #-8]
   139c0:	e2833006 	add	r3, r3, #6
   139c4:	e1a03103 	lsl	r3, r3, #2
   139c8:	e0823003 	add	r3, r2, r3
   139cc:	e5932004 	ldr	r2, [r3, #4]
   139d0:	e59f1054 	ldr	r1, [pc, #84]	; 13a2c <SetGpio+0xb4>
   139d4:	e51b300c 	ldr	r3, [fp, #-12]
   139d8:	e1822003 	orr	r2, r2, r3
   139dc:	e51b3008 	ldr	r3, [fp, #-8]
   139e0:	e2833006 	add	r3, r3, #6
   139e4:	e1a03103 	lsl	r3, r3, #2
   139e8:	e0813003 	add	r3, r1, r3
   139ec:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   139f0:	ea000009 	b	13a1c <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   139f4:	e59f2030 	ldr	r2, [pc, #48]	; 13a2c <SetGpio+0xb4>
   139f8:	e51b3008 	ldr	r3, [fp, #-8]
   139fc:	e283300a 	add	r3, r3, #10
   13a00:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13a04:	e59f1020 	ldr	r1, [pc, #32]	; 13a2c <SetGpio+0xb4>
   13a08:	e51b300c 	ldr	r3, [fp, #-12]
   13a0c:	e1822003 	orr	r2, r2, r3
   13a10:	e51b3008 	ldr	r3, [fp, #-8]
   13a14:	e283300a 	add	r3, r3, #10
   13a18:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13a1c:	e320f000 	nop	{0}
   13a20:	e28bd000 	add	sp, fp, #0
   13a24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a28:	e12fff1e 	bx	lr
   13a2c:	20200000 	eorcs	r0, r0, r0

00013a30 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   13a30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a34:	e28db000 	add	fp, sp, #0
   13a38:	e24dd00c 	sub	sp, sp, #12
   13a3c:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   13a40:	e59f2034 	ldr	r2, [pc, #52]	; 13a7c <ReadGpio+0x4c>
   13a44:	e51b3008 	ldr	r3, [fp, #-8]
   13a48:	e1a032a3 	lsr	r3, r3, #5
   13a4c:	e283300c 	add	r3, r3, #12
   13a50:	e1a03103 	lsl	r3, r3, #2
   13a54:	e0823003 	add	r3, r2, r3
   13a58:	e5932004 	ldr	r2, [r3, #4]
   13a5c:	e51b3008 	ldr	r3, [fp, #-8]
   13a60:	e203301f 	and	r3, r3, #31
   13a64:	e1a03332 	lsr	r3, r2, r3
   13a68:	e2033001 	and	r3, r3, #1
}
   13a6c:	e1a00003 	mov	r0, r3
   13a70:	e28bd000 	add	sp, fp, #0
   13a74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a78:	e12fff1e 	bx	lr
   13a7c:	20200000 	eorcs	r0, r0, r0

00013a80 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13a80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a84:	e28db000 	add	fp, sp, #0
   13a88:	e24dd014 	sub	sp, sp, #20
   13a8c:	e50b0010 	str	r0, [fp, #-16]
   13a90:	e1a03001 	mov	r3, r1
   13a94:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   13a98:	e3a02001 	mov	r2, #1
   13a9c:	e51b3010 	ldr	r3, [fp, #-16]
   13aa0:	e1a03312 	lsl	r3, r2, r3
   13aa4:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13aa8:	e51b3010 	ldr	r3, [fp, #-16]
   13aac:	e1a032a3 	lsr	r3, r3, #5
   13ab0:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13ab4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13ab8:	e3530006 	cmp	r3, #6
   13abc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13ac0:	ea000055 	b	13c1c <EnableGpioDetect+0x19c>
   13ac4:	00013c18 	andeq	r3, r1, r8, lsl ip
   13ac8:	00013ae0 	andeq	r3, r1, r0, ror #21
   13acc:	00013b1c 	andeq	r3, r1, ip, lsl fp
   13ad0:	00013b48 	andeq	r3, r1, r8, asr #22
   13ad4:	00013b84 	andeq	r3, r1, r4, lsl #23
   13ad8:	00013bb0 			; <UNDEFINED> instruction: 0x00013bb0
   13adc:	00013bec 	andeq	r3, r1, ip, ror #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   13ae0:	e59f2144 	ldr	r2, [pc, #324]	; 13c2c <EnableGpioDetect+0x1ac>
   13ae4:	e51b300c 	ldr	r3, [fp, #-12]
   13ae8:	e2833012 	add	r3, r3, #18
   13aec:	e1a03103 	lsl	r3, r3, #2
   13af0:	e0823003 	add	r3, r2, r3
   13af4:	e5932004 	ldr	r2, [r3, #4]
   13af8:	e59f112c 	ldr	r1, [pc, #300]	; 13c2c <EnableGpioDetect+0x1ac>
   13afc:	e51b3008 	ldr	r3, [fp, #-8]
   13b00:	e1822003 	orr	r2, r2, r3
   13b04:	e51b300c 	ldr	r3, [fp, #-12]
   13b08:	e2833012 	add	r3, r3, #18
   13b0c:	e1a03103 	lsl	r3, r3, #2
   13b10:	e0813003 	add	r3, r1, r3
   13b14:	e5832004 	str	r2, [r3, #4]
		break;
   13b18:	ea00003f 	b	13c1c <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   13b1c:	e59f2108 	ldr	r2, [pc, #264]	; 13c2c <EnableGpioDetect+0x1ac>
   13b20:	e51b300c 	ldr	r3, [fp, #-12]
   13b24:	e2833016 	add	r3, r3, #22
   13b28:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b2c:	e59f10f8 	ldr	r1, [pc, #248]	; 13c2c <EnableGpioDetect+0x1ac>
   13b30:	e51b3008 	ldr	r3, [fp, #-8]
   13b34:	e1822003 	orr	r2, r2, r3
   13b38:	e51b300c 	ldr	r3, [fp, #-12]
   13b3c:	e2833016 	add	r3, r3, #22
   13b40:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13b44:	ea000034 	b	13c1c <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   13b48:	e59f20dc 	ldr	r2, [pc, #220]	; 13c2c <EnableGpioDetect+0x1ac>
   13b4c:	e51b300c 	ldr	r3, [fp, #-12]
   13b50:	e2833018 	add	r3, r3, #24
   13b54:	e1a03103 	lsl	r3, r3, #2
   13b58:	e0823003 	add	r3, r2, r3
   13b5c:	e5932004 	ldr	r2, [r3, #4]
   13b60:	e59f10c4 	ldr	r1, [pc, #196]	; 13c2c <EnableGpioDetect+0x1ac>
   13b64:	e51b3008 	ldr	r3, [fp, #-8]
   13b68:	e1822003 	orr	r2, r2, r3
   13b6c:	e51b300c 	ldr	r3, [fp, #-12]
   13b70:	e2833018 	add	r3, r3, #24
   13b74:	e1a03103 	lsl	r3, r3, #2
   13b78:	e0813003 	add	r3, r1, r3
   13b7c:	e5832004 	str	r2, [r3, #4]
		break;
   13b80:	ea000025 	b	13c1c <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   13b84:	e59f20a0 	ldr	r2, [pc, #160]	; 13c2c <EnableGpioDetect+0x1ac>
   13b88:	e51b300c 	ldr	r3, [fp, #-12]
   13b8c:	e283301c 	add	r3, r3, #28
   13b90:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13b94:	e59f1090 	ldr	r1, [pc, #144]	; 13c2c <EnableGpioDetect+0x1ac>
   13b98:	e51b3008 	ldr	r3, [fp, #-8]
   13b9c:	e1822003 	orr	r2, r2, r3
   13ba0:	e51b300c 	ldr	r3, [fp, #-12]
   13ba4:	e283301c 	add	r3, r3, #28
   13ba8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13bac:	ea00001a 	b	13c1c <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   13bb0:	e59f2074 	ldr	r2, [pc, #116]	; 13c2c <EnableGpioDetect+0x1ac>
   13bb4:	e51b300c 	ldr	r3, [fp, #-12]
   13bb8:	e283301e 	add	r3, r3, #30
   13bbc:	e1a03103 	lsl	r3, r3, #2
   13bc0:	e0823003 	add	r3, r2, r3
   13bc4:	e5932004 	ldr	r2, [r3, #4]
   13bc8:	e59f105c 	ldr	r1, [pc, #92]	; 13c2c <EnableGpioDetect+0x1ac>
   13bcc:	e51b3008 	ldr	r3, [fp, #-8]
   13bd0:	e1822003 	orr	r2, r2, r3
   13bd4:	e51b300c 	ldr	r3, [fp, #-12]
   13bd8:	e283301e 	add	r3, r3, #30
   13bdc:	e1a03103 	lsl	r3, r3, #2
   13be0:	e0813003 	add	r3, r1, r3
   13be4:	e5832004 	str	r2, [r3, #4]
		break;
   13be8:	ea00000b 	b	13c1c <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   13bec:	e59f2038 	ldr	r2, [pc, #56]	; 13c2c <EnableGpioDetect+0x1ac>
   13bf0:	e51b300c 	ldr	r3, [fp, #-12]
   13bf4:	e2833022 	add	r3, r3, #34	; 0x22
   13bf8:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13bfc:	e59f1028 	ldr	r1, [pc, #40]	; 13c2c <EnableGpioDetect+0x1ac>
   13c00:	e51b3008 	ldr	r3, [fp, #-8]
   13c04:	e1822003 	orr	r2, r2, r3
   13c08:	e51b300c 	ldr	r3, [fp, #-12]
   13c0c:	e2833022 	add	r3, r3, #34	; 0x22
   13c10:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13c14:	ea000000 	b	13c1c <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   13c18:	e320f000 	nop	{0}
	}
}
   13c1c:	e320f000 	nop	{0}
   13c20:	e28bd000 	add	sp, fp, #0
   13c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13c28:	e12fff1e 	bx	lr
   13c2c:	20200000 	eorcs	r0, r0, r0

00013c30 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   13c30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13c34:	e28db000 	add	fp, sp, #0
   13c38:	e24dd014 	sub	sp, sp, #20
   13c3c:	e50b0010 	str	r0, [fp, #-16]
   13c40:	e1a03001 	mov	r3, r1
   13c44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   13c48:	e51b3010 	ldr	r3, [fp, #-16]
   13c4c:	e203301f 	and	r3, r3, #31
   13c50:	e3a02001 	mov	r2, #1
   13c54:	e1a03312 	lsl	r3, r2, r3
   13c58:	e1e03003 	mvn	r3, r3
   13c5c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13c60:	e51b3010 	ldr	r3, [fp, #-16]
   13c64:	e1a032a3 	lsr	r3, r3, #5
   13c68:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   13c6c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   13c70:	e3530006 	cmp	r3, #6
   13c74:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   13c78:	ea000055 	b	13dd4 <DisableGpioDetect+0x1a4>
   13c7c:	00013dd0 	ldrdeq	r3, [r1], -r0
   13c80:	00013c98 	muleq	r1, r8, ip
   13c84:	00013cd4 	ldrdeq	r3, [r1], -r4
   13c88:	00013d00 	andeq	r3, r1, r0, lsl #26
   13c8c:	00013d3c 	andeq	r3, r1, ip, lsr sp
   13c90:	00013d68 	andeq	r3, r1, r8, ror #26
   13c94:	00013da4 	andeq	r3, r1, r4, lsr #27
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   13c98:	e59f2144 	ldr	r2, [pc, #324]	; 13de4 <DisableGpioDetect+0x1b4>
   13c9c:	e51b300c 	ldr	r3, [fp, #-12]
   13ca0:	e2833012 	add	r3, r3, #18
   13ca4:	e1a03103 	lsl	r3, r3, #2
   13ca8:	e0823003 	add	r3, r2, r3
   13cac:	e5932004 	ldr	r2, [r3, #4]
   13cb0:	e59f112c 	ldr	r1, [pc, #300]	; 13de4 <DisableGpioDetect+0x1b4>
   13cb4:	e51b3008 	ldr	r3, [fp, #-8]
   13cb8:	e0022003 	and	r2, r2, r3
   13cbc:	e51b300c 	ldr	r3, [fp, #-12]
   13cc0:	e2833012 	add	r3, r3, #18
   13cc4:	e1a03103 	lsl	r3, r3, #2
   13cc8:	e0813003 	add	r3, r1, r3
   13ccc:	e5832004 	str	r2, [r3, #4]
		break;
   13cd0:	ea00003f 	b	13dd4 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   13cd4:	e59f2108 	ldr	r2, [pc, #264]	; 13de4 <DisableGpioDetect+0x1b4>
   13cd8:	e51b300c 	ldr	r3, [fp, #-12]
   13cdc:	e2833016 	add	r3, r3, #22
   13ce0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13ce4:	e59f10f8 	ldr	r1, [pc, #248]	; 13de4 <DisableGpioDetect+0x1b4>
   13ce8:	e51b3008 	ldr	r3, [fp, #-8]
   13cec:	e0022003 	and	r2, r2, r3
   13cf0:	e51b300c 	ldr	r3, [fp, #-12]
   13cf4:	e2833016 	add	r3, r3, #22
   13cf8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13cfc:	ea000034 	b	13dd4 <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   13d00:	e59f20dc 	ldr	r2, [pc, #220]	; 13de4 <DisableGpioDetect+0x1b4>
   13d04:	e51b300c 	ldr	r3, [fp, #-12]
   13d08:	e2833018 	add	r3, r3, #24
   13d0c:	e1a03103 	lsl	r3, r3, #2
   13d10:	e0823003 	add	r3, r2, r3
   13d14:	e5932004 	ldr	r2, [r3, #4]
   13d18:	e59f10c4 	ldr	r1, [pc, #196]	; 13de4 <DisableGpioDetect+0x1b4>
   13d1c:	e51b3008 	ldr	r3, [fp, #-8]
   13d20:	e0022003 	and	r2, r2, r3
   13d24:	e51b300c 	ldr	r3, [fp, #-12]
   13d28:	e2833018 	add	r3, r3, #24
   13d2c:	e1a03103 	lsl	r3, r3, #2
   13d30:	e0813003 	add	r3, r1, r3
   13d34:	e5832004 	str	r2, [r3, #4]
		break;
   13d38:	ea000025 	b	13dd4 <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   13d3c:	e59f20a0 	ldr	r2, [pc, #160]	; 13de4 <DisableGpioDetect+0x1b4>
   13d40:	e51b300c 	ldr	r3, [fp, #-12]
   13d44:	e283301c 	add	r3, r3, #28
   13d48:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13d4c:	e59f1090 	ldr	r1, [pc, #144]	; 13de4 <DisableGpioDetect+0x1b4>
   13d50:	e51b3008 	ldr	r3, [fp, #-8]
   13d54:	e0022003 	and	r2, r2, r3
   13d58:	e51b300c 	ldr	r3, [fp, #-12]
   13d5c:	e283301c 	add	r3, r3, #28
   13d60:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13d64:	ea00001a 	b	13dd4 <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   13d68:	e59f2074 	ldr	r2, [pc, #116]	; 13de4 <DisableGpioDetect+0x1b4>
   13d6c:	e51b300c 	ldr	r3, [fp, #-12]
   13d70:	e283301e 	add	r3, r3, #30
   13d74:	e1a03103 	lsl	r3, r3, #2
   13d78:	e0823003 	add	r3, r2, r3
   13d7c:	e5932004 	ldr	r2, [r3, #4]
   13d80:	e59f105c 	ldr	r1, [pc, #92]	; 13de4 <DisableGpioDetect+0x1b4>
   13d84:	e51b3008 	ldr	r3, [fp, #-8]
   13d88:	e0022003 	and	r2, r2, r3
   13d8c:	e51b300c 	ldr	r3, [fp, #-12]
   13d90:	e283301e 	add	r3, r3, #30
   13d94:	e1a03103 	lsl	r3, r3, #2
   13d98:	e0813003 	add	r3, r1, r3
   13d9c:	e5832004 	str	r2, [r3, #4]
		break;
   13da0:	ea00000b 	b	13dd4 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   13da4:	e59f2038 	ldr	r2, [pc, #56]	; 13de4 <DisableGpioDetect+0x1b4>
   13da8:	e51b300c 	ldr	r3, [fp, #-12]
   13dac:	e2833022 	add	r3, r3, #34	; 0x22
   13db0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   13db4:	e59f1028 	ldr	r1, [pc, #40]	; 13de4 <DisableGpioDetect+0x1b4>
   13db8:	e51b3008 	ldr	r3, [fp, #-8]
   13dbc:	e0022003 	and	r2, r2, r3
   13dc0:	e51b300c 	ldr	r3, [fp, #-12]
   13dc4:	e2833022 	add	r3, r3, #34	; 0x22
   13dc8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   13dcc:	ea000000 	b	13dd4 <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   13dd0:	e320f000 	nop	{0}
	}
}
   13dd4:	e320f000 	nop	{0}
   13dd8:	e28bd000 	add	sp, fp, #0
   13ddc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13de0:	e12fff1e 	bx	lr
   13de4:	20200000 	eorcs	r0, r0, r0

00013de8 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   13de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13dec:	e28db000 	add	fp, sp, #0
   13df0:	e24dd014 	sub	sp, sp, #20
   13df4:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   13df8:	e51b3010 	ldr	r3, [fp, #-16]
   13dfc:	e203301f 	and	r3, r3, #31
   13e00:	e3a02001 	mov	r2, #1
   13e04:	e1a03312 	lsl	r3, r2, r3
   13e08:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   13e0c:	e51b3010 	ldr	r3, [fp, #-16]
   13e10:	e1a032a3 	lsr	r3, r3, #5
   13e14:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   13e18:	e59f101c 	ldr	r1, [pc, #28]	; 13e3c <ClearGpioInterrupt+0x54>
   13e1c:	e51b300c 	ldr	r3, [fp, #-12]
   13e20:	e2833010 	add	r3, r3, #16
   13e24:	e51b2008 	ldr	r2, [fp, #-8]
   13e28:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   13e2c:	e320f000 	nop	{0}
   13e30:	e28bd000 	add	sp, fp, #0
   13e34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e38:	e12fff1e 	bx	lr
   13e3c:	20200000 	eorcs	r0, r0, r0

00013e40 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   13e40:	e92d4800 	push	{fp, lr}
   13e44:	e28db004 	add	fp, sp, #4
   13e48:	e24dd018 	sub	sp, sp, #24
   13e4c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   13e50:	e3a03000 	mov	r3, #0
   13e54:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   13e58:	ebfffa22 	bl	126e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   13e5c:	e59f3194 	ldr	r3, [pc, #404]	; 13ff8 <pvPortMalloc+0x1b8>
   13e60:	e5933000 	ldr	r3, [r3]
   13e64:	e3530000 	cmp	r3, #0
   13e68:	1a000000 	bne	13e70 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   13e6c:	eb000093 	bl	140c0 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   13e70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e74:	e3530000 	cmp	r3, #0
   13e78:	0a00000c 	beq	13eb0 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   13e7c:	e3a03010 	mov	r3, #16
   13e80:	e1a02003 	mov	r2, r3
   13e84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e88:	e0833002 	add	r3, r3, r2
   13e8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   13e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13e94:	e2033007 	and	r3, r3, #7
   13e98:	e3530000 	cmp	r3, #0
   13e9c:	0a000003 	beq	13eb0 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   13ea0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ea4:	e3c33007 	bic	r3, r3, #7
   13ea8:	e2833008 	add	r3, r3, #8
   13eac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   13eb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13eb4:	e3530000 	cmp	r3, #0
   13eb8:	0a000043 	beq	13fcc <pvPortMalloc+0x18c>
   13ebc:	e3a02a01 	mov	r2, #4096	; 0x1000
   13ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ec4:	e1530002 	cmp	r3, r2
   13ec8:	2a00003f 	bcs	13fcc <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   13ecc:	e59f3128 	ldr	r3, [pc, #296]	; 13ffc <pvPortMalloc+0x1bc>
   13ed0:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   13ed4:	e59f3120 	ldr	r3, [pc, #288]	; 13ffc <pvPortMalloc+0x1bc>
   13ed8:	e5933000 	ldr	r3, [r3]
   13edc:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13ee0:	ea000004 	b	13ef8 <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   13ee4:	e51b3008 	ldr	r3, [fp, #-8]
   13ee8:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   13eec:	e51b3008 	ldr	r3, [fp, #-8]
   13ef0:	e5933000 	ldr	r3, [r3]
   13ef4:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   13ef8:	e51b3008 	ldr	r3, [fp, #-8]
   13efc:	e5933004 	ldr	r3, [r3, #4]
   13f00:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13f04:	e1520003 	cmp	r2, r3
   13f08:	9a000003 	bls	13f1c <pvPortMalloc+0xdc>
   13f0c:	e51b3008 	ldr	r3, [fp, #-8]
   13f10:	e5933000 	ldr	r3, [r3]
   13f14:	e3530000 	cmp	r3, #0
   13f18:	1afffff1 	bne	13ee4 <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   13f1c:	e59f30d4 	ldr	r3, [pc, #212]	; 13ff8 <pvPortMalloc+0x1b8>
   13f20:	e5933000 	ldr	r3, [r3]
   13f24:	e51b2008 	ldr	r2, [fp, #-8]
   13f28:	e1520003 	cmp	r2, r3
   13f2c:	0a000026 	beq	13fcc <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   13f30:	e51b300c 	ldr	r3, [fp, #-12]
   13f34:	e5933000 	ldr	r3, [r3]
   13f38:	e3a02010 	mov	r2, #16
   13f3c:	e0833002 	add	r3, r3, r2
   13f40:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   13f44:	e51b3008 	ldr	r3, [fp, #-8]
   13f48:	e5932000 	ldr	r2, [r3]
   13f4c:	e51b300c 	ldr	r3, [fp, #-12]
   13f50:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   13f54:	e51b3008 	ldr	r3, [fp, #-8]
   13f58:	e5932004 	ldr	r2, [r3, #4]
   13f5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f60:	e0423003 	sub	r3, r2, r3
   13f64:	e3a02010 	mov	r2, #16
   13f68:	e1a02082 	lsl	r2, r2, #1
   13f6c:	e1530002 	cmp	r3, r2
   13f70:	9a00000e 	bls	13fb0 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   13f74:	e51b2008 	ldr	r2, [fp, #-8]
   13f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f7c:	e0823003 	add	r3, r2, r3
   13f80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   13f84:	e51b3008 	ldr	r3, [fp, #-8]
   13f88:	e5932004 	ldr	r2, [r3, #4]
   13f8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f90:	e0422003 	sub	r2, r2, r3
   13f94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13f98:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   13f9c:	e51b3008 	ldr	r3, [fp, #-8]
   13fa0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   13fa4:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   13fa8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   13fac:	eb000079 	bl	14198 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   13fb0:	e59f3048 	ldr	r3, [pc, #72]	; 14000 <pvPortMalloc+0x1c0>
   13fb4:	e5932000 	ldr	r2, [r3]
   13fb8:	e51b3008 	ldr	r3, [fp, #-8]
   13fbc:	e5933004 	ldr	r3, [r3, #4]
   13fc0:	e0423003 	sub	r3, r2, r3
   13fc4:	e59f2034 	ldr	r2, [pc, #52]	; 14000 <pvPortMalloc+0x1c0>
   13fc8:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   13fcc:	ebfff9d1 	bl	12718 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   13fd0:	e59f302c 	ldr	r3, [pc, #44]	; 14004 <pvPortMalloc+0x1c4>
   13fd4:	e5932000 	ldr	r2, [r3]
   13fd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fdc:	e0823003 	add	r3, r2, r3
   13fe0:	e59f201c 	ldr	r2, [pc, #28]	; 14004 <pvPortMalloc+0x1c4>
   13fe4:	e5823000 	str	r3, [r2]

	return pvReturn;
   13fe8:	e51b3010 	ldr	r3, [fp, #-16]
}
   13fec:	e1a00003 	mov	r0, r3
   13ff0:	e24bd004 	sub	sp, fp, #4
   13ff4:	e8bd8800 	pop	{fp, pc}
   13ff8:	00015b38 	andeq	r5, r1, r8, lsr fp
   13ffc:	00015b30 	andeq	r5, r1, r0, lsr fp
   14000:	00014758 	andeq	r4, r1, r8, asr r7
   14004:	00015b3c 	andeq	r5, r1, ip, lsr fp

00014008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14008:	e92d4800 	push	{fp, lr}
   1400c:	e28db004 	add	fp, sp, #4
   14010:	e24dd010 	sub	sp, sp, #16
   14014:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   14018:	e51b3010 	ldr	r3, [fp, #-16]
   1401c:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   14020:	e51b3010 	ldr	r3, [fp, #-16]
   14024:	e3530000 	cmp	r3, #0
   14028:	0a000011 	beq	14074 <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   1402c:	e3a03010 	mov	r3, #16
   14030:	e2633000 	rsb	r3, r3, #0
   14034:	e51b2008 	ldr	r2, [fp, #-8]
   14038:	e0823003 	add	r3, r2, r3
   1403c:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   14040:	e51b3008 	ldr	r3, [fp, #-8]
   14044:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   14048:	ebfff9a6 	bl	126e8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   1404c:	e51b300c 	ldr	r3, [fp, #-12]
   14050:	e5932004 	ldr	r2, [r3, #4]
   14054:	e59f3024 	ldr	r3, [pc, #36]	; 14080 <vPortFree+0x78>
   14058:	e5933000 	ldr	r3, [r3]
   1405c:	e0823003 	add	r3, r2, r3
   14060:	e59f2018 	ldr	r2, [pc, #24]	; 14080 <vPortFree+0x78>
   14064:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   14068:	e51b000c 	ldr	r0, [fp, #-12]
   1406c:	eb000049 	bl	14198 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   14070:	ebfff9a8 	bl	12718 <xTaskResumeAll>
	}
}
   14074:	e320f000 	nop	{0}
   14078:	e24bd004 	sub	sp, fp, #4
   1407c:	e8bd8800 	pop	{fp, pc}
   14080:	00014758 	andeq	r4, r1, r8, asr r7

00014084 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   14084:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14088:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   1408c:	e59f3010 	ldr	r3, [pc, #16]	; 140a4 <xPortGetFreeHeapSize+0x20>
   14090:	e5933000 	ldr	r3, [r3]
}
   14094:	e1a00003 	mov	r0, r3
   14098:	e28bd000 	add	sp, fp, #0
   1409c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140a0:	e12fff1e 	bx	lr
   140a4:	00014758 	andeq	r4, r1, r8, asr r7

000140a8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   140a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140ac:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   140b0:	e320f000 	nop	{0}
   140b4:	e28bd000 	add	sp, fp, #0
   140b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140bc:	e12fff1e 	bx	lr

000140c0 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   140c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   140c4:	e28db000 	add	fp, sp, #0
   140c8:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   140cc:	e59f30b4 	ldr	r3, [pc, #180]	; 14188 <prvHeapInit+0xc8>
   140d0:	e59f20b4 	ldr	r2, [pc, #180]	; 1418c <prvHeapInit+0xcc>
   140d4:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   140d8:	e59f30a8 	ldr	r3, [pc, #168]	; 14188 <prvHeapInit+0xc8>
   140dc:	e3a02000 	mov	r2, #0
   140e0:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   140e4:	e3a02a01 	mov	r2, #4096	; 0x1000
   140e8:	e59f309c 	ldr	r3, [pc, #156]	; 1418c <prvHeapInit+0xcc>
   140ec:	e0823003 	add	r3, r2, r3
   140f0:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   140f4:	e3a03010 	mov	r3, #16
   140f8:	e2633000 	rsb	r3, r3, #0
   140fc:	e51b2008 	ldr	r2, [fp, #-8]
   14100:	e0823003 	add	r3, r2, r3
   14104:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   14108:	e59f2080 	ldr	r2, [pc, #128]	; 14190 <prvHeapInit+0xd0>
   1410c:	e51b3008 	ldr	r3, [fp, #-8]
   14110:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   14114:	e59f3074 	ldr	r3, [pc, #116]	; 14190 <prvHeapInit+0xd0>
   14118:	e5933000 	ldr	r3, [r3]
   1411c:	e3a02000 	mov	r2, #0
   14120:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   14124:	e59f3064 	ldr	r3, [pc, #100]	; 14190 <prvHeapInit+0xd0>
   14128:	e5933000 	ldr	r3, [r3]
   1412c:	e3a02000 	mov	r2, #0
   14130:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   14134:	e59f3050 	ldr	r3, [pc, #80]	; 1418c <prvHeapInit+0xcc>
   14138:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   1413c:	e3a03a01 	mov	r3, #4096	; 0x1000
   14140:	e3a02010 	mov	r2, #16
   14144:	e0432002 	sub	r2, r3, r2
   14148:	e51b300c 	ldr	r3, [fp, #-12]
   1414c:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   14150:	e59f3038 	ldr	r3, [pc, #56]	; 14190 <prvHeapInit+0xd0>
   14154:	e5932000 	ldr	r2, [r3]
   14158:	e51b300c 	ldr	r3, [fp, #-12]
   1415c:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   14160:	e59f302c 	ldr	r3, [pc, #44]	; 14194 <prvHeapInit+0xd4>
   14164:	e5933000 	ldr	r3, [r3]
   14168:	e3a02010 	mov	r2, #16
   1416c:	e0433002 	sub	r3, r3, r2
   14170:	e59f201c 	ldr	r2, [pc, #28]	; 14194 <prvHeapInit+0xd4>
   14174:	e5823000 	str	r3, [r2]
}
   14178:	e320f000 	nop	{0}
   1417c:	e28bd000 	add	sp, fp, #0
   14180:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14184:	e12fff1e 	bx	lr
   14188:	00015b30 	andeq	r5, r1, r0, lsr fp
   1418c:	00014b30 	andeq	r4, r1, r0, lsr fp
   14190:	00015b38 	andeq	r5, r1, r8, lsr fp
   14194:	00014758 	andeq	r4, r1, r8, asr r7

00014198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   14198:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1419c:	e28db000 	add	fp, sp, #0
   141a0:	e24dd014 	sub	sp, sp, #20
   141a4:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   141a8:	e59f3134 	ldr	r3, [pc, #308]	; 142e4 <prvInsertBlockIntoFreeList+0x14c>
   141ac:	e50b3008 	str	r3, [fp, #-8]
   141b0:	ea000002 	b	141c0 <prvInsertBlockIntoFreeList+0x28>
   141b4:	e51b3008 	ldr	r3, [fp, #-8]
   141b8:	e5933000 	ldr	r3, [r3]
   141bc:	e50b3008 	str	r3, [fp, #-8]
   141c0:	e51b3008 	ldr	r3, [fp, #-8]
   141c4:	e5933000 	ldr	r3, [r3]
   141c8:	e51b2010 	ldr	r2, [fp, #-16]
   141cc:	e1520003 	cmp	r2, r3
   141d0:	8afffff7 	bhi	141b4 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   141d4:	e51b3008 	ldr	r3, [fp, #-8]
   141d8:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   141dc:	e51b3008 	ldr	r3, [fp, #-8]
   141e0:	e5933004 	ldr	r3, [r3, #4]
   141e4:	e51b200c 	ldr	r2, [fp, #-12]
   141e8:	e0823003 	add	r3, r2, r3
   141ec:	e51b2010 	ldr	r2, [fp, #-16]
   141f0:	e1520003 	cmp	r2, r3
   141f4:	1a000008 	bne	1421c <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   141f8:	e51b3008 	ldr	r3, [fp, #-8]
   141fc:	e5932004 	ldr	r2, [r3, #4]
   14200:	e51b3010 	ldr	r3, [fp, #-16]
   14204:	e5933004 	ldr	r3, [r3, #4]
   14208:	e0822003 	add	r2, r2, r3
   1420c:	e51b3008 	ldr	r3, [fp, #-8]
   14210:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   14214:	e51b3008 	ldr	r3, [fp, #-8]
   14218:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   1421c:	e51b3010 	ldr	r3, [fp, #-16]
   14220:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   14224:	e51b3010 	ldr	r3, [fp, #-16]
   14228:	e5933004 	ldr	r3, [r3, #4]
   1422c:	e51b200c 	ldr	r2, [fp, #-12]
   14230:	e0822003 	add	r2, r2, r3
   14234:	e51b3008 	ldr	r3, [fp, #-8]
   14238:	e5933000 	ldr	r3, [r3]
   1423c:	e1520003 	cmp	r2, r3
   14240:	1a000018 	bne	142a8 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   14244:	e51b3008 	ldr	r3, [fp, #-8]
   14248:	e5932000 	ldr	r2, [r3]
   1424c:	e59f3094 	ldr	r3, [pc, #148]	; 142e8 <prvInsertBlockIntoFreeList+0x150>
   14250:	e5933000 	ldr	r3, [r3]
   14254:	e1520003 	cmp	r2, r3
   14258:	0a00000d 	beq	14294 <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   1425c:	e51b3010 	ldr	r3, [fp, #-16]
   14260:	e5932004 	ldr	r2, [r3, #4]
   14264:	e51b3008 	ldr	r3, [fp, #-8]
   14268:	e5933000 	ldr	r3, [r3]
   1426c:	e5933004 	ldr	r3, [r3, #4]
   14270:	e0822003 	add	r2, r2, r3
   14274:	e51b3010 	ldr	r3, [fp, #-16]
   14278:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1427c:	e51b3008 	ldr	r3, [fp, #-8]
   14280:	e5933000 	ldr	r3, [r3]
   14284:	e5932000 	ldr	r2, [r3]
   14288:	e51b3010 	ldr	r3, [fp, #-16]
   1428c:	e5832000 	str	r2, [r3]
   14290:	ea000008 	b	142b8 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   14294:	e59f304c 	ldr	r3, [pc, #76]	; 142e8 <prvInsertBlockIntoFreeList+0x150>
   14298:	e5932000 	ldr	r2, [r3]
   1429c:	e51b3010 	ldr	r3, [fp, #-16]
   142a0:	e5832000 	str	r2, [r3]
   142a4:	ea000003 	b	142b8 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   142a8:	e51b3008 	ldr	r3, [fp, #-8]
   142ac:	e5932000 	ldr	r2, [r3]
   142b0:	e51b3010 	ldr	r3, [fp, #-16]
   142b4:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   142b8:	e51b2008 	ldr	r2, [fp, #-8]
   142bc:	e51b3010 	ldr	r3, [fp, #-16]
   142c0:	e1520003 	cmp	r2, r3
   142c4:	0a000002 	beq	142d4 <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   142c8:	e51b3008 	ldr	r3, [fp, #-8]
   142cc:	e51b2010 	ldr	r2, [fp, #-16]
   142d0:	e5832000 	str	r2, [r3]
	}
}
   142d4:	e320f000 	nop	{0}
   142d8:	e28bd000 	add	sp, fp, #0
   142dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   142e0:	e12fff1e 	bx	lr
   142e4:	00015b30 	andeq	r5, r1, r0, lsr fp
   142e8:	00015b38 	andeq	r5, r1, r8, lsr fp

000142ec <undefined_instruction>:
   142ec:	eafffffe 	b	142ec <undefined_instruction>

000142f0 <prefetch_abort>:
   142f0:	eafffffe 	b	142f0 <prefetch_abort>

000142f4 <data_abort>:
   142f4:	eafffffe 	b	142f4 <data_abort>

000142f8 <unused>:
   142f8:	eafffffe 	b	142f8 <unused>

000142fc <fiq>:
   142fc:	eafffffe 	b	142fc <fiq>

00014300 <hang>:
   14300:	eafffffe 	b	14300 <hang>

00014304 <task1>:
#include <task.h>

#include "Drivers/irq.h"
#include "Drivers/gpio.h"

void task1(void *pParam) {
   14304:	e92d4800 	push	{fp, lr}
   14308:	e28db004 	add	fp, sp, #4
   1430c:	e24dd010 	sub	sp, sp, #16
   14310:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   14314:	e3a03000 	mov	r3, #0
   14318:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   1431c:	e51b3008 	ldr	r3, [fp, #-8]
   14320:	e2833001 	add	r3, r3, #1
   14324:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(16, 1);
   14328:	e3a01001 	mov	r1, #1
   1432c:	e3a00010 	mov	r0, #16
   14330:	ebfffd90 	bl	13978 <SetGpio>
		vTaskDelay(200);
   14334:	e3a000c8 	mov	r0, #200	; 0xc8
   14338:	ebfff72f 	bl	11ffc <vTaskDelay>
		i++;
   1433c:	eafffff6 	b	1431c <task1+0x18>

00014340 <task2>:
	}
}

void task2(void *pParam) {
   14340:	e92d4800 	push	{fp, lr}
   14344:	e28db004 	add	fp, sp, #4
   14348:	e24dd010 	sub	sp, sp, #16
   1434c:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   14350:	e3a03000 	mov	r3, #0
   14354:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   14358:	e51b3008 	ldr	r3, [fp, #-8]
   1435c:	e2833001 	add	r3, r3, #1
   14360:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   14364:	e3a00064 	mov	r0, #100	; 0x64
   14368:	ebfff723 	bl	11ffc <vTaskDelay>
		SetGpio(16, 0);
   1436c:	e3a01000 	mov	r1, #0
   14370:	e3a00010 	mov	r0, #16
   14374:	ebfffd7f 	bl	13978 <SetGpio>
		vTaskDelay(100);
   14378:	e3a00064 	mov	r0, #100	; 0x64
   1437c:	ebfff71e 	bl	11ffc <vTaskDelay>
		i++;
   14380:	eafffff4 	b	14358 <task2+0x18>

00014384 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   14384:	e92d4800 	push	{fp, lr}
   14388:	e28db004 	add	fp, sp, #4
   1438c:	e24dd010 	sub	sp, sp, #16
	SetGpioFunction(16, 1);			// RDY led
   14390:	e3a01001 	mov	r1, #1
   14394:	e3a00010 	mov	r0, #16
   14398:	ebfffd32 	bl	13868 <SetGpioFunction>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   1439c:	e3a03000 	mov	r3, #0
   143a0:	e58d300c 	str	r3, [sp, #12]
   143a4:	e3a03000 	mov	r3, #0
   143a8:	e58d3008 	str	r3, [sp, #8]
   143ac:	e3a03000 	mov	r3, #0
   143b0:	e58d3004 	str	r3, [sp, #4]
   143b4:	e3a03000 	mov	r3, #0
   143b8:	e58d3000 	str	r3, [sp]
   143bc:	e3a03000 	mov	r3, #0
   143c0:	e3a02080 	mov	r2, #128	; 0x80
   143c4:	e59f1040 	ldr	r1, [pc, #64]	; 1440c <main+0x88>
   143c8:	e59f0040 	ldr	r0, [pc, #64]	; 14410 <main+0x8c>
   143cc:	ebfff5f3 	bl	11ba0 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   143d0:	e3a03000 	mov	r3, #0
   143d4:	e58d300c 	str	r3, [sp, #12]
   143d8:	e3a03000 	mov	r3, #0
   143dc:	e58d3008 	str	r3, [sp, #8]
   143e0:	e3a03000 	mov	r3, #0
   143e4:	e58d3004 	str	r3, [sp, #4]
   143e8:	e3a03000 	mov	r3, #0
   143ec:	e58d3000 	str	r3, [sp]
   143f0:	e3a03000 	mov	r3, #0
   143f4:	e3a02080 	mov	r2, #128	; 0x80
   143f8:	e59f1014 	ldr	r1, [pc, #20]	; 14414 <main+0x90>
   143fc:	e59f0014 	ldr	r0, [pc, #20]	; 14418 <main+0x94>
   14400:	ebfff5e6 	bl	11ba0 <xTaskGenericCreate>

	vTaskStartScheduler();
   14404:	ebfff882 	bl	12614 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   14408:	eafffffe 	b	14408 <main+0x84>
   1440c:	00014438 	andeq	r4, r1, r8, lsr r4
   14410:	00014304 	andeq	r4, r1, r4, lsl #6
   14414:	00014440 	andeq	r4, r1, r0, asr #8
   14418:	00014340 	andeq	r4, r1, r0, asr #6

Disassembly of section .rodata:

0001441c <pRegs>:
static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);
   1441c:	2000b400 	andcs	fp, r0, r0, lsl #8
   14420:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   14424:	00000000 	andeq	r0, r0, r0

00014428 <pRegs>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);
   14428:	2000b200 	andcs	fp, r0, r0, lsl #4

0001442c <pRegs>:
volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);
   1442c:	20200000 	eorcs	r0, r0, r0

00014430 <heapSTRUCT_SIZE>:
static const unsigned short heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   14430:	00000010 	andeq	r0, r0, r0, lsl r0

00014434 <xTotalHeapSize>:
static const size_t xTotalHeapSize = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   14434:	00001000 	andeq	r1, r0, r0
   14438:	5f44454c 	svcpl	0x0044454c
   1443c:	00000030 	andeq	r0, r0, r0, lsr r0
   14440:	5f44454c 	svcpl	0x0044454c
   14444:	Address 0x0000000000014444 is out of bounds.


Disassembly of section .text.memcpy:

00014448 <memcpy>:
   14448:	e352000f 	cmp	r2, #15
   1444c:	9a000036 	bls	1452c <memcpy+0xe4>
   14450:	e1803001 	orr	r3, r0, r1
   14454:	e3130003 	tst	r3, #3
   14458:	1a00003f 	bne	1455c <memcpy+0x114>
   1445c:	e242c010 	sub	ip, r2, #16
   14460:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14464:	e2814020 	add	r4, r1, #32
   14468:	e3cce00f 	bic	lr, ip, #15
   1446c:	e2813010 	add	r3, r1, #16
   14470:	e2806010 	add	r6, r0, #16
   14474:	e084400e 	add	r4, r4, lr
   14478:	e1a0522c 	lsr	r5, ip, #4
   1447c:	e513e00c 	ldr	lr, [r3, #-12]
   14480:	e513c008 	ldr	ip, [r3, #-8]
   14484:	e5137010 	ldr	r7, [r3, #-16]
   14488:	e506e00c 	str	lr, [r6, #-12]
   1448c:	e2833010 	add	r3, r3, #16
   14490:	e513e014 	ldr	lr, [r3, #-20]	; 0xffffffec
   14494:	e1530004 	cmp	r3, r4
   14498:	e9065000 	stmdb	r6, {ip, lr}
   1449c:	e5067010 	str	r7, [r6, #-16]
   144a0:	e2866010 	add	r6, r6, #16
   144a4:	1afffff4 	bne	1447c <memcpy+0x34>
   144a8:	e285c001 	add	ip, r5, #1
   144ac:	e312000c 	tst	r2, #12
   144b0:	e202300f 	and	r3, r2, #15
   144b4:	e081120c 	add	r1, r1, ip, lsl #4
   144b8:	01a02003 	moveq	r2, r3
   144bc:	e080c20c 	add	ip, r0, ip, lsl #4
   144c0:	0a00000d 	beq	144fc <memcpy+0xb4>
   144c4:	e1a04001 	mov	r4, r1
   144c8:	e2433004 	sub	r3, r3, #4
   144cc:	e3c36003 	bic	r6, r3, #3
   144d0:	e1a0e123 	lsr	lr, r3, #2
   144d4:	e08c6006 	add	r6, ip, r6
   144d8:	e24c3004 	sub	r3, ip, #4
   144dc:	e4945004 	ldr	r5, [r4], #4
   144e0:	e5a35004 	str	r5, [r3, #4]!
   144e4:	e1530006 	cmp	r3, r6
   144e8:	1afffffb 	bne	144dc <memcpy+0x94>
   144ec:	e28e3001 	add	r3, lr, #1
   144f0:	e2022003 	and	r2, r2, #3
   144f4:	e08cc103 	add	ip, ip, r3, lsl #2
   144f8:	e0811103 	add	r1, r1, r3, lsl #2
   144fc:	e3520000 	cmp	r2, #0
   14500:	e2423001 	sub	r3, r2, #1
   14504:	12833001 	addne	r3, r3, #1
   14508:	124c2001 	subne	r2, ip, #1
   1450c:	10813003 	addne	r3, r1, r3
   14510:	0a000003 	beq	14524 <memcpy+0xdc>
   14514:	e4d1c001 	ldrb	ip, [r1], #1
   14518:	e1510003 	cmp	r1, r3
   1451c:	e5e2c001 	strb	ip, [r2, #1]!
   14520:	1afffffb 	bne	14514 <memcpy+0xcc>
   14524:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   14528:	e12fff1e 	bx	lr
   1452c:	e3520000 	cmp	r2, #0
   14530:	e1a0c000 	mov	ip, r0
   14534:	e2423001 	sub	r3, r2, #1
   14538:	012fff1e 	bxeq	lr
   1453c:	e2833001 	add	r3, r3, #1
   14540:	e24c2001 	sub	r2, ip, #1
   14544:	e0813003 	add	r3, r1, r3
   14548:	e4d1c001 	ldrb	ip, [r1], #1
   1454c:	e1510003 	cmp	r1, r3
   14550:	e5e2c001 	strb	ip, [r2, #1]!
   14554:	1afffffb 	bne	14548 <memcpy+0x100>
   14558:	e12fff1e 	bx	lr
   1455c:	e1a0c000 	mov	ip, r0
   14560:	e2423001 	sub	r3, r2, #1
   14564:	eafffff4 	b	1453c <memcpy+0xf4>

Disassembly of section .text.memset:

00014568 <memset>:
   14568:	e3100003 	tst	r0, #3
   1456c:	0a000040 	beq	14674 <memset+0x10c>
   14570:	e3520000 	cmp	r2, #0
   14574:	e2422001 	sub	r2, r2, #1
   14578:	012fff1e 	bxeq	lr
   1457c:	e1a03000 	mov	r3, r0
   14580:	e201c0ff 	and	ip, r1, #255	; 0xff
   14584:	ea000002 	b	14594 <memset+0x2c>
   14588:	e2422001 	sub	r2, r2, #1
   1458c:	e3720001 	cmn	r2, #1
   14590:	012fff1e 	bxeq	lr
   14594:	e4c3c001 	strb	ip, [r3], #1
   14598:	e3130003 	tst	r3, #3
   1459c:	1afffff9 	bne	14588 <memset+0x20>
   145a0:	e3520003 	cmp	r2, #3
   145a4:	9a000028 	bls	1464c <memset+0xe4>
   145a8:	e92d4030 	push	{r4, r5, lr}
   145ac:	e201e0ff 	and	lr, r1, #255	; 0xff
   145b0:	e18ee40e 	orr	lr, lr, lr, lsl #8
   145b4:	e352000f 	cmp	r2, #15
   145b8:	e18ee80e 	orr	lr, lr, lr, lsl #16
   145bc:	9a00002e 	bls	1467c <memset+0x114>
   145c0:	e242c010 	sub	ip, r2, #16
   145c4:	e3cc400f 	bic	r4, ip, #15
   145c8:	e2835020 	add	r5, r3, #32
   145cc:	e0855004 	add	r5, r5, r4
   145d0:	e1a0422c 	lsr	r4, ip, #4
   145d4:	e283c010 	add	ip, r3, #16
   145d8:	e50ce010 	str	lr, [ip, #-16]
   145dc:	e50ce00c 	str	lr, [ip, #-12]
   145e0:	e50ce008 	str	lr, [ip, #-8]
   145e4:	e50ce004 	str	lr, [ip, #-4]
   145e8:	e28cc010 	add	ip, ip, #16
   145ec:	e15c0005 	cmp	ip, r5
   145f0:	1afffff8 	bne	145d8 <memset+0x70>
   145f4:	e284c001 	add	ip, r4, #1
   145f8:	e312000c 	tst	r2, #12
   145fc:	e083c20c 	add	ip, r3, ip, lsl #4
   14600:	e202200f 	and	r2, r2, #15
   14604:	0a000018 	beq	1466c <memset+0x104>
   14608:	e2423004 	sub	r3, r2, #4
   1460c:	e3c33003 	bic	r3, r3, #3
   14610:	e2833004 	add	r3, r3, #4
   14614:	e08c3003 	add	r3, ip, r3
   14618:	e48ce004 	str	lr, [ip], #4
   1461c:	e153000c 	cmp	r3, ip
   14620:	1afffffc 	bne	14618 <memset+0xb0>
   14624:	e2022003 	and	r2, r2, #3
   14628:	e3520000 	cmp	r2, #0
   1462c:	0a000004 	beq	14644 <memset+0xdc>
   14630:	e20110ff 	and	r1, r1, #255	; 0xff
   14634:	e0832002 	add	r2, r3, r2
   14638:	e4c31001 	strb	r1, [r3], #1
   1463c:	e1520003 	cmp	r2, r3
   14640:	1afffffc 	bne	14638 <memset+0xd0>
   14644:	e8bd4030 	pop	{r4, r5, lr}
   14648:	e12fff1e 	bx	lr
   1464c:	e3520000 	cmp	r2, #0
   14650:	012fff1e 	bxeq	lr
   14654:	e20110ff 	and	r1, r1, #255	; 0xff
   14658:	e0832002 	add	r2, r3, r2
   1465c:	e4c31001 	strb	r1, [r3], #1
   14660:	e1520003 	cmp	r2, r3
   14664:	1afffffc 	bne	1465c <memset+0xf4>
   14668:	e12fff1e 	bx	lr
   1466c:	e1a0300c 	mov	r3, ip
   14670:	eaffffec 	b	14628 <memset+0xc0>
   14674:	e1a03000 	mov	r3, r0
   14678:	eaffffc8 	b	145a0 <memset+0x38>
   1467c:	e1a0c003 	mov	ip, r3
   14680:	eaffffe0 	b	14608 <memset+0xa0>

Disassembly of section .text.strncpy:

00014684 <strncpy>:
   14684:	e1803001 	orr	r3, r0, r1
   14688:	e3520003 	cmp	r2, #3
   1468c:	e2033003 	and	r3, r3, #3
   14690:	93a0c000 	movls	ip, #0
   14694:	83a0c001 	movhi	ip, #1
   14698:	e3530000 	cmp	r3, #0
   1469c:	13a0c000 	movne	ip, #0
   146a0:	e35c0000 	cmp	ip, #0
   146a4:	01a0c000 	moveq	ip, r0
   146a8:	e92d4070 	push	{r4, r5, r6, lr}
   146ac:	1a000015 	bne	14708 <strncpy+0x84>
   146b0:	e241e001 	sub	lr, r1, #1
   146b4:	ea000007 	b	146d8 <strncpy+0x54>
   146b8:	e1a0300c 	mov	r3, ip
   146bc:	e5fe1001 	ldrb	r1, [lr, #1]!
   146c0:	e3510000 	cmp	r1, #0
   146c4:	e4c31001 	strb	r1, [r3], #1
   146c8:	e2424001 	sub	r4, r2, #1
   146cc:	0a000005 	beq	146e8 <strncpy+0x64>
   146d0:	e1a0c003 	mov	ip, r3
   146d4:	e1a02004 	mov	r2, r4
   146d8:	e3520000 	cmp	r2, #0
   146dc:	1afffff5 	bne	146b8 <strncpy+0x34>
   146e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   146e4:	e12fff1e 	bx	lr
   146e8:	e3540000 	cmp	r4, #0
   146ec:	108c2002 	addne	r2, ip, r2
   146f0:	0afffffa 	beq	146e0 <strncpy+0x5c>
   146f4:	e4c31001 	strb	r1, [r3], #1
   146f8:	e1530002 	cmp	r3, r2
   146fc:	1afffffc 	bne	146f4 <strncpy+0x70>
   14700:	e8bd4070 	pop	{r4, r5, r6, lr}
   14704:	e12fff1e 	bx	lr
   14708:	e1a03001 	mov	r3, r1
   1470c:	e1a0c000 	mov	ip, r0
   14710:	e59f6030 	ldr	r6, [pc, #48]	; 14748 <strncpy+0xc4>
   14714:	e59f5030 	ldr	r5, [pc, #48]	; 1474c <strncpy+0xc8>
   14718:	e1a01003 	mov	r1, r3
   1471c:	e4934004 	ldr	r4, [r3], #4
   14720:	e084e006 	add	lr, r4, r6
   14724:	e1cee004 	bic	lr, lr, r4
   14728:	e11e0005 	tst	lr, r5
   1472c:	1affffdf 	bne	146b0 <strncpy+0x2c>
   14730:	e2422004 	sub	r2, r2, #4
   14734:	e3520003 	cmp	r2, #3
   14738:	e1a01003 	mov	r1, r3
   1473c:	e48c4004 	str	r4, [ip], #4
   14740:	8afffff4 	bhi	14718 <strncpy+0x94>
   14744:	eaffffd9 	b	146b0 <strncpy+0x2c>
   14748:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   1474c:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .data:

00014750 <ulCriticalNesting>:
volatile unsigned long ulCriticalNesting = 9999UL;
   14750:	0000270f 	andeq	r2, r0, pc, lsl #14

00014754 <xNextTaskUnblockTime>:
PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
   14754:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

00014758 <xFreeBytesRemaining>:
static size_t xFreeBytesRemaining = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   14758:	00001000 	andeq	r1, r0, r0

Disassembly of section .bss:

00014760 <g_bStarted>:
   14760:	00000000 	andeq	r0, r0, r0

00014764 <pxReadyCoRoutineLists>:
	...

0001478c <xDelayedCoRoutineList1>:
	...

000147a0 <xDelayedCoRoutineList2>:
	...

000147b4 <pxDelayedCoRoutineList>:
static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently being used. */
   147b4:	00000000 	andeq	r0, r0, r0

000147b8 <pxOverflowDelayedCoRoutineList>:
static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. */
   147b8:	00000000 	andeq	r0, r0, r0

000147bc <xPendingReadyCoRoutineList>:
	...

000147d0 <pxCurrentCoRoutine>:
corCRCB * pxCurrentCoRoutine = NULL;
   147d0:	00000000 	andeq	r0, r0, r0

000147d4 <uxTopCoRoutineReadyPriority>:
static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
   147d4:	00000000 	andeq	r0, r0, r0

000147d8 <xCoRoutineTickCount>:
static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
   147d8:	00000000 	andeq	r0, r0, r0

000147dc <xLastTickCount>:
   147dc:	00000000 	andeq	r0, r0, r0

000147e0 <xPassedTicks>:
   147e0:	00000000 	andeq	r0, r0, r0

000147e4 <pxCurrentTCB>:
PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
   147e4:	00000000 	andeq	r0, r0, r0

000147e8 <pxReadyTasksLists>:
	...

0001484c <xDelayedTaskList1>:
	...

00014860 <xDelayedTaskList2>:
	...

00014874 <pxDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list currently being used. */
   14874:	00000000 	andeq	r0, r0, r0

00014878 <pxOverflowDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
   14878:	00000000 	andeq	r0, r0, r0

0001487c <xPendingReadyList>:
	...

00014890 <xTasksWaitingTermination>:
	...

000148a4 <uxTasksDeleted>:
	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE ) 0U;
   148a4:	00000000 	andeq	r0, r0, r0

000148a8 <xSuspendedTaskList>:
	...

000148bc <uxCurrentNumberOfTasks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBASE_TYPE ) 0U;
   148bc:	00000000 	andeq	r0, r0, r0

000148c0 <xTickCount>:
PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
   148c0:	00000000 	andeq	r0, r0, r0

000148c4 <uxTopUsedPriority>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
   148c4:	00000000 	andeq	r0, r0, r0

000148c8 <uxTopReadyPriority>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
   148c8:	00000000 	andeq	r0, r0, r0

000148cc <xSchedulerRunning>:
PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
   148cc:	00000000 	andeq	r0, r0, r0

000148d0 <uxSchedulerSuspended>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE_TYPE ) pdFALSE;
   148d0:	00000000 	andeq	r0, r0, r0

000148d4 <uxMissedTicks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE ) 0U;
   148d4:	00000000 	andeq	r0, r0, r0

000148d8 <xMissedYield>:
PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
   148d8:	00000000 	andeq	r0, r0, r0

000148dc <xNumOfOverflows>:
PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
   148dc:	00000000 	andeq	r0, r0, r0

000148e0 <uxTaskNumber>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
   148e0:	00000000 	andeq	r0, r0, r0

000148e4 <g_VectorTable>:
	...

00014b24 <enabled>:
	...

00014b30 <xHeap>:
	...

00015b30 <xStart>:
	...

00015b38 <pxEnd>:
static xBlockLink xStart, *pxEnd = NULL;
   15b38:	00000000 	andeq	r0, r0, r0

00015b3c <allocated>:
size_t allocated = 0;
   15b3c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000212 	andeq	r0, r0, r2, lsl r2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000037 	andeq	r0, r0, r7, lsr r0
      10:	0000e30c 	andeq	lr, r0, ip, lsl #6
      14:	0001b000 	andeq	fp, r1, r0
      18:	01000000 	mrseq	r0, (UNDEF: 0)
      1c:	00034400 	andeq	r4, r3, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	31070403 	tstcc	r7, r3, lsl #8
      30:	03000006 	movweq	r0, #6
      34:	013d0508 	teqeq	sp, r8, lsl #10
      38:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      3c:	00016b04 	andeq	r6, r1, r4, lsl #22
      40:	00bc0400 	adcseq	r0, ip, r0, lsl #8
      44:	47020000 	strmi	r0, [r2, -r0]
      48:	00004d10 	andeq	r4, r0, r0, lsl sp
      4c:	53040500 	movwpl	r0, #17664	; 0x4500
      50:	06000000 	streq	r0, [r0], -r0
      54:	0000005e 	andeq	r0, r0, lr, asr r0
      58:	00005e07 	andeq	r5, r0, r7, lsl #28
      5c:	04080000 	streq	r0, [r8], #-0
      60:	00000c04 	andeq	r0, r0, r4, lsl #24
      64:	1c610300 	stclne	3, cr0, [r1], #-0
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	2c070403 	cfstrscs	mvf0, [r7], {3}
      70:	03000006 	movweq	r0, #6
      74:	01420504 	cmpeq	r2, r4, lsl #10
      78:	01030000 	mrseq	r0, (UNDEF: 3)
      7c:	00064006 	andeq	r4, r6, r6
      80:	07020300 	streq	r0, [r2, -r0, lsl #6]
      84:	000000a9 	andeq	r0, r0, r9, lsr #1
      88:	006c0405 	rsbeq	r0, ip, r5, lsl #8
      8c:	95090000 	strls	r0, [r9, #-0]
      90:	24000000 	strcs	r0, [r0], #-0
      94:	11105601 	tstne	r0, r1, lsl #12
      98:	0a000001 	beq	a4 <_start-0x7f5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	6c105701 	ldcvs	7, cr5, [r0], {1}
      a4:	00000000 	andeq	r0, r0, r0
      a8:	4c41560a 	mcrrmi	6, 0, r5, r1, cr10
      ac:	10580100 	subsne	r0, r8, r0, lsl #2
      b0:	0000006c 	andeq	r0, r0, ip, rrx
      b4:	54430a04 	strbpl	r0, [r3], #-2564	; 0xfffff5fc
      b8:	5901004c 	stmdbpl	r1, {r2, r3, r6}
      bc:	00006c10 	andeq	r6, r0, r0, lsl ip
      c0:	430a0800 	movwmi	r0, #43008	; 0xa800
      c4:	0100494c 	tsteq	r0, ip, asr #18
      c8:	006c105a 	rsbeq	r1, ip, sl, asr r0
      cc:	0a0c0000 	beq	3000d4 <__bss_end+0x2ea594>
      d0:	00534952 	subseq	r4, r3, r2, asr r9
      d4:	6c105b01 			; <UNDEFINED> instruction: 0x6c105b01
      d8:	10000000 	andne	r0, r0, r0
      dc:	53494d0a 	movtpl	r4, #40202	; 0x9d0a
      e0:	105c0100 	subsne	r0, ip, r0, lsl #2
      e4:	0000006c 	andeq	r0, r0, ip, rrx
      e8:	4c520a14 	vmovmi	r0, r2, s8, s9
      ec:	5d010044 	stcpl	0, cr0, [r1, #-272]	; 0xfffffef0
      f0:	00006c10 	andeq	r6, r0, r0, lsl ip
      f4:	440a1800 	strmi	r1, [sl], #-2048	; 0xfffff800
      f8:	01005649 	tsteq	r0, r9, asr #12
      fc:	006c105e 	rsbeq	r1, ip, lr, asr r0
     100:	0a1c0000 	beq	700108 <__bss_end+0x6ea5c8>
     104:	00544e43 	subseq	r4, r4, r3, asr #28
     108:	6c105f01 	ldcvs	15, cr5, [r0], {1}
     10c:	20000000 	andcs	r0, r0, r0
     110:	00960400 	addseq	r0, r6, r0, lsl #8
     114:	60010000 	andvs	r0, r1, r0
     118:	00008e03 	andeq	r8, r0, r3, lsl #28
     11c:	01110b00 	tsteq	r1, r0, lsl #22
     120:	580c0000 	stmdapl	ip, {}	; <UNPREDICTABLE>
     124:	01000001 	tsteq	r0, r1
     128:	013a2c62 	teqeq	sl, r2, ror #24
     12c:	03050000 	movweq	r0, #20480	; 0x5000
     130:	0001441c 	andeq	r4, r1, ip, lsl r4
     134:	011d0405 	tsteq	sp, r5, lsl #8
     138:	340d0000 	strcc	r0, [sp], #-0
     13c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     140:	00000019 	andeq	r0, r0, r9, lsl r0
     144:	ac0deb01 			; <UNDEFINED> instruction: 0xac0deb01
     148:	98000102 	stmdals	r0, {r1, r8}
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01a10c00 			; <UNDEFINED> instruction: 0x01a10c00
     158:	ed010000 	stc	0, cr0, [r1, #-0]
     15c:	00006c10 	andeq	r6, r0, r0, lsl ip
     160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     164:	00da0f00 	sbcseq	r0, sl, r0, lsl #30
     168:	dd010000 	stcle	0, cr0, [r1, #-0]
     16c:	01027406 	tsteq	r2, r6, lsl #8
     170:	00003800 	andeq	r3, r0, r0, lsl #16
     174:	9a9c0100 	bls	fe70057c <_estack+0xf66f057c>
     178:	10000001 	andne	r0, r0, r1
     17c:	00000000 	andeq	r0, r0, r0
     180:	2c1ddd01 	ldccs	13, cr13, [sp], {1}
     184:	02000000 	andeq	r0, r0, #0
     188:	30107491 	mulscc	r0, r1, r4
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	005e29dd 	ldrsbeq	r2, [lr], #-157	; 0xffffff63
     194:	91020000 	mrsls	r0, (UNDEF: 2)
     198:	c8110070 	ldmdagt	r1, {r4, r5, r6}
     19c:	01000000 	mrseq	r0, (UNDEF: 0)
     1a0:	025c06d0 	subseq	r0, ip, #208, 12	; 0xd000000
     1a4:	00180001 	andseq	r0, r8, r1
     1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1ac:	00017712 	andeq	r7, r1, r2, lsl r7
     1b0:	0fc20100 	svceq	0x00c20100
     1b4:	00000073 	andeq	r0, r0, r3, ror r0
     1b8:	00010240 	andeq	r0, r1, r0, asr #4
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c0:	8b139c01 	blhi	4e71cc <__bss_end+0x4d168c>
     1c4:	01000001 	tsteq	r0, r1
     1c8:	00881177 	addeq	r1, r8, r7, ror r1
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	02400001 	subeq	r0, r0, #1
     1d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     1d8:	00015e10 	andeq	r5, r1, r0, lsl lr
     1dc:	38770100 	ldmdacc	r7!, {r8}^
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
     1e4:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1e8:	00000005 	andeq	r0, r0, r5
     1ec:	41527701 	cmpmi	r2, r1, lsl #14
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	4b106891 	blmi	41a440 <__bss_end+0x404900>
     1f8:	01000001 	tsteq	r0, r1
     1fc:	005e6077 	subseq	r6, lr, r7, ror r0
     200:	91020000 	mrsls	r0, (UNDEF: 2)
     204:	00870c64 	addeq	r0, r7, r4, ror #24
     208:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
     20c:	00008811 	andeq	r8, r0, r1, lsl r8
     210:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     214:	01980000 	orrseq	r0, r8, r0
     218:	00040000 	andeq	r0, r4, r0
     21c:	00000133 	andeq	r0, r0, r3, lsr r1
     220:	00370104 	eorseq	r0, r7, r4, lsl #2
     224:	4a0c0000 	bmi	30022c <__bss_end+0x2ea6ec>
     228:	b0000002 	andlt	r0, r0, r2
     22c:	44000001 	strmi	r0, [r0], #-1
     230:	a4000103 	strge	r0, [r0], #-259	; 0xfffffefd
     234:	cc000002 	stcgt	0, cr0, [r0], {2}
     238:	02000001 	andeq	r0, r0, #1
     23c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     240:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     244:	00063107 	andeq	r3, r6, r7, lsl #2
     248:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     24c:	0000013d 	andeq	r0, r0, sp, lsr r1
     250:	6b040803 	blvs	102264 <__bss_end+0xec724>
     254:	03000001 	movweq	r0, #1
     258:	062c0704 	strteq	r0, [ip], -r4, lsl #14
     25c:	41040000 	mrsmi	r0, (UNDEF: 4)
     260:	03000000 	movweq	r0, #0
     264:	01420504 	cmpeq	r2, r4, lsl #10
     268:	ed050000 	stc	0, cr0, [r5, #-0]
     26c:	01000001 	tsteq	r0, r1
     270:	00481865 	subeq	r1, r8, r5, ror #16
     274:	03050000 	movweq	r0, #20480	; 0x5000
     278:	00014750 	andeq	r4, r1, r0, asr r7
     27c:	0002b405 	andeq	fp, r2, r5, lsl #8
     280:	05730100 	ldrbeq	r0, [r3, #-256]!	; 0xffffff00
     284:	00000025 	andeq	r0, r0, r5, lsr #32
     288:	47600305 	strbmi	r0, [r0, -r5, lsl #6]!
     28c:	ff060001 			; <UNDEFINED> instruction: 0xff060001
     290:	01000001 	tsteq	r0, r1
     294:	058406fe 	streq	r0, [r4, #1790]	; 0x6fe
     298:	00640001 	rsbeq	r0, r4, r1
     29c:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a0:	0001da06 	andeq	sp, r1, r6, lsl #20
     2a4:	06ee0100 	strbteq	r0, [lr], r0, lsl #2
     2a8:	00010540 	andeq	r0, r1, r0, asr #10
     2ac:	00000044 	andeq	r0, r0, r4, asr #32
     2b0:	3c079c01 	stccc	12, cr9, [r7], {1}
     2b4:	01000002 	tsteq	r0, r2
     2b8:	049006c1 	ldreq	r0, [r0], #1729	; 0x6c1
     2bc:	00b00001 	adcseq	r0, r0, r1
     2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2c4:	000000fb 	strdeq	r0, [r0], -fp
     2c8:	01049008 	tsteq	r4, r8
     2cc:	00005800 	andeq	r5, r0, r0, lsl #16
     2d0:	0000d800 	andeq	sp, r0, r0, lsl #16
     2d4:	02a70900 	adceq	r0, r7, #0, 18
     2d8:	c2010000 	andgt	r0, r1, #0
     2dc:	00010102 	andeq	r0, r1, r2, lsl #2
     2e0:	01ed0900 	mvneq	r0, r0, lsl #18
     2e4:	c2010000 	andgt	r0, r1, #0
     2e8:	00004802 	andeq	r4, r0, r2, lsl #16
     2ec:	ec0a0000 	stc	0, cr0, [sl], {-0}
     2f0:	48000104 	stmdami	r0, {r2, r8}
     2f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2f8:	000002a7 	andeq	r0, r0, r7, lsr #5
     2fc:	0102c401 	tsteq	r2, r1, lsl #8
     300:	09000001 	stmdbeq	r0, {r0}
     304:	000001ed 	andeq	r0, r0, sp, ror #3
     308:	4802c401 	stmdami	r2, {r0, sl, lr, pc}
     30c:	00000000 	andeq	r0, r0, r0
     310:	06040b00 	streq	r0, [r4], -r0, lsl #22
     314:	04000001 	streq	r0, [r0], #-1
     318:	000000fb 	strdeq	r0, [r0], -fp
     31c:	02280d0c 	eoreq	r0, r8, #12, 26	; 0x300
     320:	9c010000 	stcls	0, cr0, [r1], {-0}
     324:	0103dc06 	tsteq	r3, r6, lsl #24
     328:	0000b400 	andeq	fp, r0, r0, lsl #8
     32c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
     330:	08000001 	stmdaeq	r0, {r0}
     334:	000103e0 	andeq	r0, r1, r0, ror #7
     338:	00000058 	andeq	r0, r0, r8, asr r0
     33c:	00000143 	andeq	r0, r0, r3, asr #2
     340:	0002a709 	andeq	sl, r2, r9, lsl #14
     344:	02a40100 	adceq	r0, r4, #0, 2
     348:	00000101 	andeq	r0, r0, r1, lsl #2
     34c:	0001ed09 	andeq	lr, r1, r9, lsl #26
     350:	02a40100 	adceq	r0, r4, #0, 2
     354:	00000048 	andeq	r0, r0, r8, asr #32
     358:	043c0a00 	ldrteq	r0, [ip], #-2560	; 0xfffff600
     35c:	00480001 	subeq	r0, r8, r1
     360:	a7090000 	strge	r0, [r9, -r0]
     364:	01000002 	tsteq	r0, r2
     368:	010102aa 	smlatbeq	r1, sl, r2, r0
     36c:	ed090000 	stc	0, cr0, [r9, #-0]
     370:	01000001 	tsteq	r0, r1
     374:	004802aa 	subeq	r0, r8, sl, lsr #5
     378:	00000000 	andeq	r0, r0, r0
     37c:	0002110e 	andeq	r1, r2, lr, lsl #2
     380:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
     384:	00010344 	andeq	r0, r1, r4, asr #6
     388:	00000098 	muleq	r0, r8, r0
     38c:	6c0a9c01 	stcvs	12, cr9, [sl], {1}
     390:	48000103 	stmdami	r0, {r0, r1, r8}
     394:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     398:	000002a7 	andeq	r0, r0, r7, lsr #5
     39c:	01028801 	tsteq	r2, r1, lsl #16
     3a0:	09000001 	stmdbeq	r0, {r0}
     3a4:	000001ed 	andeq	r0, r0, sp, ror #3
     3a8:	48028801 	stmdami	r2, {r0, fp, pc}
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	04ab0000 	strteq	r0, [fp], #0
     3b4:	00040000 	andeq	r0, r4, r0
     3b8:	00000218 	andeq	r0, r0, r8, lsl r2
     3bc:	00370104 	eorseq	r0, r7, r4, lsl #2
     3c0:	f40c0000 	vst4.8	{d0-d3}, [ip], r0
     3c4:	b0000003 	andlt	r0, r0, r3
     3c8:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     3cc:	64000105 	strvs	r0, [r0], #-261	; 0xfffffefb
     3d0:	af000007 	svcge	0x00000007
     3d4:	02000002 	andeq	r0, r0, #2
     3d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3dc:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3e0:	00063107 	andeq	r3, r6, r7, lsl #2
     3e4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3e8:	0000013d 	andeq	r0, r0, sp, lsr r1
     3ec:	6b040803 	blvs	102400 <__bss_end+0xec8c0>
     3f0:	04000001 	streq	r0, [r0], #-1
     3f4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3f8:	61030000 	mrsvs	r0, (UNDEF: 3)
     3fc:	00004f1c 	andeq	r4, r0, ip, lsl pc
     400:	07040300 	streq	r0, [r4, -r0, lsl #6]
     404:	0000062c 	andeq	r0, r0, ip, lsr #12
     408:	00004f06 	andeq	r4, r0, r6, lsl #30
     40c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     410:	00000142 	andeq	r0, r0, r2, asr #2
     414:	00036907 	andeq	r6, r3, r7, lsl #18
     418:	69021400 	stmdbvs	r2, {sl, ip}
     41c:	0000b108 	andeq	fp, r0, r8, lsl #2
     420:	031c0800 	tsteq	ip, #0, 16
     424:	6b020000 	blvs	8042c <__bss_end+0x6a8ec>
     428:	0000430f 	andeq	r4, r0, pc, lsl #6
     42c:	22080000 	andcs	r0, r8, #0
     430:	02000005 	andeq	r0, r0, #5
     434:	00b61f6c 	adcseq	r1, r6, ip, ror #30
     438:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     43c:	00000439 	andeq	r0, r0, r9, lsr r4
     440:	b61f6d02 	ldrlt	r6, [pc], -r2, lsl #26
     444:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     448:	00033e08 	andeq	r3, r3, r8, lsl #28
     44c:	096e0200 	stmdbeq	lr!, {r9}^
     450:	00000041 	andeq	r0, r0, r1, asr #32
     454:	02e7080c 	rsceq	r0, r7, #12, 16	; 0xc0000
     458:	6f020000 	svcvs	0x00020000
     45c:	00004109 	andeq	r4, r0, r9, lsl #2
     460:	06001000 	streq	r1, [r0], -r0
     464:	00000062 	andeq	r0, r0, r2, rrx
     468:	00b10409 	adcseq	r0, r1, r9, lsl #8
     46c:	35050000 	strcc	r0, [r5, #-0]
     470:	02000005 	andeq	r0, r0, #5
     474:	00621b71 	rsbeq	r1, r2, r1, ror fp
     478:	bc060000 	stclt	0, cr0, [r6], {-0}
     47c:	07000000 	streq	r0, [r0, -r0]
     480:	00000591 	muleq	r0, r1, r5
     484:	0873020c 	ldmdaeq	r3!, {r2, r3, r9}^
     488:	00000102 	andeq	r0, r0, r2, lsl #2
     48c:	00031c08 	andeq	r1, r3, r8, lsl #24
     490:	0f750200 	svceq	0x00750200
     494:	00000043 	andeq	r0, r0, r3, asr #32
     498:	05220800 	streq	r0, [r2, #-2048]!	; 0xfffff800
     49c:	76020000 	strvc	r0, [r2], -r0
     4a0:	0000b61e 	andeq	fp, r0, lr, lsl r6
     4a4:	39080400 	stmdbcc	r8, {sl}
     4a8:	02000004 	andeq	r0, r0, #4
     4ac:	00b61e77 	adcseq	r1, r6, r7, ror lr
     4b0:	00080000 	andeq	r0, r8, r0
     4b4:	0004a905 	andeq	sl, r4, r5, lsl #18
     4b8:	20790200 	rsbscs	r0, r9, r0, lsl #4
     4bc:	000000cd 	andeq	r0, r0, sp, asr #1
     4c0:	00010206 	andeq	r0, r1, r6, lsl #4
     4c4:	05a10700 	streq	r0, [r1, #1792]!	; 0x700
     4c8:	02140000 	andseq	r0, r4, #0
     4cc:	0148107e 	hvceq	33038	; 0x810e
     4d0:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
     4d4:	02000004 	andeq	r0, r0, #4
     4d8:	00562280 	subseq	r2, r6, r0, lsl #5
     4dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4e0:	00000314 	andeq	r0, r0, r4, lsl r3
     4e4:	48178102 	ldmdami	r7, {r1, r8, pc}
     4e8:	04000001 	streq	r0, [r0], #-1
     4ec:	00033508 	andeq	r3, r3, r8, lsl #10
     4f0:	19820200 	stmibne	r2, {r9}
     4f4:	0000010e 	andeq	r0, r0, lr, lsl #2
     4f8:	04090008 	streq	r0, [r9], #-8
     4fc:	000000c8 	andeq	r0, r0, r8, asr #1
     500:	00070a05 	andeq	r0, r7, r5, lsl #20
     504:	03830200 	orreq	r0, r3, #0, 4
     508:	00000113 	andeq	r0, r0, r3, lsl r1
     50c:	00014e0a 	andeq	r4, r1, sl, lsl #28
     510:	06010300 	streq	r0, [r1], -r0, lsl #6
     514:	00000640 	andeq	r0, r0, r0, asr #12
     518:	a9070203 	stmdbge	r7, {r0, r1, r9}
     51c:	05000000 	streq	r0, [r0, #-0]
     520:	000004f6 	strdeq	r0, [r0], -r6
     524:	41105304 	tstmi	r0, r4, lsl #6
     528:	05000000 	streq	r0, [r0, #-0]
     52c:	000002d6 	ldrdeq	r0, [r0], -r6
     530:	85105604 	ldrhi	r5, [r0, #-1540]	; 0xfffff9fc
     534:	09000001 	stmdbeq	r0, {r0}
     538:	00018b04 	andeq	r8, r1, r4, lsl #22
     53c:	019b0b00 	orrseq	r0, fp, r0, lsl #22
     540:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
     544:	0c000001 	stceq	0, cr0, [r0], {1}
     548:	0000004f 	andeq	r0, r0, pc, asr #32
     54c:	04540700 	ldrbeq	r0, [r4], #-1792	; 0xfffff900
     550:	04380000 	ldrteq	r0, [r8], #-0
     554:	01f71058 	mvnseq	r1, r8, asr r0
     558:	f3080000 	vhadd.u8	d0, d8, d0
     55c:	04000002 	streq	r0, [r0], #-2
     560:	0179155a 	cmneq	r9, sl, asr r5
     564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     568:	000005d7 	ldrdeq	r0, [r0], -r7
     56c:	bc0f5b04 			; <UNDEFINED> instruction: 0xbc0f5b04
     570:	04000000 	streq	r0, [r0], #-0
     574:	00060408 	andeq	r0, r6, r8, lsl #8
     578:	0f5c0400 	svceq	0x005c0400
     57c:	000000bc 	strheq	r0, [r0], -ip
     580:	04eb0818 	strbteq	r0, [fp], #2072	; 0x818
     584:	5d040000 	stcpl	0, cr0, [r4, #-0]
     588:	00004f1a 	andeq	r4, r0, sl, lsl pc
     58c:	a1082c00 	tstge	r8, r0, lsl #24
     590:	04000004 	streq	r0, [r0], #-4
     594:	004f1a5e 	subeq	r1, pc, lr, asr sl	; <UNPREDICTABLE>
     598:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
     59c:	0000056a 	andeq	r0, r0, sl, ror #10
     5a0:	66135f04 	ldrvs	r5, [r3], -r4, lsl #30
     5a4:	34000001 	strcc	r0, [r0], #-1
     5a8:	03e50500 	mvneq	r0, #0, 10
     5ac:	60040000 	andvs	r0, r4, r0
     5b0:	00019b03 	andeq	r9, r1, r3, lsl #22
     5b4:	014e0d00 	cmpeq	lr, r0, lsl #26
     5b8:	02130000 	andseq	r0, r3, #0
     5bc:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     5c0:	01000000 	mrseq	r0, (UNDEF: 0)
     5c4:	048b0f00 	streq	r0, [fp], #3840	; 0xf00
     5c8:	51010000 	mrspl	r0, (UNDEF: 1)
     5cc:	0002030e 	andeq	r0, r2, lr, lsl #6
     5d0:	64030500 	strvs	r0, [r3], #-1280	; 0xfffffb00
     5d4:	0f000147 	svceq	0x00000147
     5d8:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
     5dc:	4e0e5201 	cdpmi	2, 0, cr5, cr14, cr1, {0}
     5e0:	05000001 	streq	r0, [r0, #-1]
     5e4:	01478c03 	cmpeq	r7, r3, lsl #24
     5e8:	03ce0f00 	biceq	r0, lr, #0, 30
     5ec:	53010000 	movwpl	r0, #4096	; 0x1000
     5f0:	00014e0e 	andeq	r4, r1, lr, lsl #28
     5f4:	a0030500 	andge	r0, r3, r0, lsl #10
     5f8:	0f000147 	svceq	0x00000147
     5fc:	000005a7 	andeq	r0, r0, r7, lsr #11
     600:	5b105401 	blpl	41560c <__bss_end+0x3ffacc>
     604:	05000002 	streq	r0, [r0, #-2]
     608:	0147b403 	cmpeq	r7, r3, lsl #8
     60c:	4e040900 	vmlami.f16	s0, s8, s0	; <UNPREDICTABLE>
     610:	0a000001 	beq	61c <_start-0x79e4>
     614:	0000025b 	andeq	r0, r0, fp, asr r2
     618:	0005720f 	andeq	r7, r5, pc, lsl #4
     61c:	10550100 	subsne	r0, r5, r0, lsl #2
     620:	0000025b 	andeq	r0, r0, fp, asr r2
     624:	47b80305 	ldrmi	r0, [r8, r5, lsl #6]!
     628:	070f0001 	streq	r0, [pc, -r1]
     62c:	01000005 	tsteq	r0, r5
     630:	014e0e56 	cmpeq	lr, r6, asr lr
     634:	03050000 	movweq	r0, #20480	; 0x5000
     638:	000147bc 			; <UNDEFINED> instruction: 0x000147bc
     63c:	0004d810 	andeq	sp, r4, r0, lsl r8
     640:	0b590100 	bleq	1640a48 <__bss_end+0x162af08>
     644:	0000029c 	muleq	r0, ip, r2
     648:	47d00305 	ldrbmi	r0, [r0, r5, lsl #6]
     64c:	04090001 	streq	r0, [r9], #-1
     650:	000001f7 	strdeq	r0, [r0], -r7
     654:	00039b0f 	andeq	r9, r3, pc, lsl #22
     658:	1f5a0100 	svcne	0x005a0100
     65c:	0000004f 	andeq	r0, r0, pc, asr #32
     660:	47d40305 	ldrbmi	r0, [r4, r5, lsl #6]
     664:	550f0001 	strpl	r0, [pc, #-1]	; 66b <_start-0x7995>
     668:	01000003 	tsteq	r0, r3
     66c:	0043155b 	subeq	r1, r3, fp, asr r5
     670:	03050000 	movweq	r0, #20480	; 0x5000
     674:	000147d8 	ldrdeq	r4, [r1], -r8
     678:	0003460f 	andeq	r4, r3, pc, lsl #12
     67c:	2e5b0100 	rdfcse	f0, f3, f0
     680:	00000043 	andeq	r0, r0, r3, asr #32
     684:	47dc0305 	ldrbmi	r0, [ip, r5, lsl #6]
     688:	070f0001 	streq	r0, [pc, -r1]
     68c:	01000003 	tsteq	r0, r3
     690:	0043425b 	subeq	r4, r3, fp, asr r2
     694:	03050000 	movweq	r0, #20480	; 0x5000
     698:	000147e0 	andeq	r4, r1, r0, ror #15
     69c:	00046d11 	andeq	r6, r4, r1, lsl sp
     6a0:	016c0100 	cmneq	ip, r0, lsl #2
     6a4:	00005b16 	andeq	r5, r0, r6, lsl fp
     6a8:	010cc800 	tsteq	ip, r0, lsl #16
     6ac:	00008c00 	andeq	r8, r0, r0, lsl #24
     6b0:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
     6b4:	12000003 	andne	r0, r0, #3
     6b8:	00000529 	andeq	r0, r0, r9, lsr #10
     6bc:	42016c01 	andmi	r6, r1, #256	; 0x100
     6c0:	00000336 	andeq	r0, r0, r6, lsr r3
     6c4:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     6c8:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
     6cc:	0a016e01 	beq	5bed8 <__bss_end+0x46398>
     6d0:	0000029c 	muleq	r0, ip, r2
     6d4:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
     6d8:	0000089e 	muleq	r0, lr, r8
     6dc:	16016f01 	strne	r6, [r1], -r1, lsl #30
     6e0:	0000005b 	andeq	r0, r0, fp, asr r0
     6e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6e8:	015a0409 	cmpeq	sl, r9, lsl #8
     6ec:	e8140000 	ldmda	r4, {}	; <UNPREDICTABLE>
     6f0:	01000005 	tsteq	r0, r5
     6f4:	200d0158 	andcs	r0, sp, r8, asr r1
     6f8:	a800010c 	stmdage	r0, {r2, r3, r8}
     6fc:	01000000 	mrseq	r0, (UNDEF: 0)
     700:	0003649c 	muleq	r3, ip, r4
     704:	04eb1300 	strbteq	r1, [fp], #768	; 0x300
     708:	5a010000 	bpl	40710 <__bss_end+0x2abd0>
     70c:	004f1801 	subeq	r1, pc, r1, lsl #16
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	3f150074 	svccc	0x00150074
     718:	01000005 	tsteq	r0, r5
     71c:	fc06013a 	stc2	1, cr0, [r6], {58}	; 0x3a
     720:	2400010a 	strcs	r0, [r0], #-266	; 0xfffffef6
     724:	01000001 	tsteq	r0, r1
     728:	0003969c 	muleq	r3, ip, r6
     72c:	0b641600 	bleq	1905f34 <__bss_end+0x18f03f4>
     730:	00780001 	rsbseq	r0, r8, r1
     734:	74130000 	ldrvc	r0, [r3], #-0
     738:	01000003 	tsteq	r0, r3
     73c:	6102014f 	tstvs	r2, pc, asr #2
     740:	02000002 	andeq	r0, r0, #2
     744:	00007491 	muleq	r0, r1, r4
     748:	00061314 	andeq	r1, r6, r4, lsl r3
     74c:	01000100 	mrseq	r0, (UNDEF: 16)
     750:	01092c0d 	tsteq	r9, sp, lsl #24
     754:	0001d000 	andeq	sp, r1, r0
     758:	d89c0100 	ldmle	ip, {r8}
     75c:	13000003 	movwne	r0, #3
     760:	000003ed 	andeq	r0, r0, sp, ror #7
     764:	0a010201 	beq	40f70 <__bss_end+0x2b430>
     768:	0000029c 	muleq	r0, ip, r2
     76c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
     770:	00010990 	muleq	r1, r0, r9
     774:	00000028 	andeq	r0, r0, r8, lsr #32
     778:	0002cf13 	andeq	ip, r2, r3, lsl pc
     77c:	010d0100 	mrseq	r0, (UNDEF: 29)
     780:	00025b0c 	andeq	r5, r2, ip, lsl #22
     784:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     788:	be170000 	cdplt	0, 1, cr0, cr7, cr0, {0}
     78c:	01000005 	tsteq	r0, r5
     790:	083c0de9 	ldmdaeq	ip!, {r0, r3, r5, r6, r7, r8, sl, fp}
     794:	00f00001 	rscseq	r0, r0, r1
     798:	9c010000 	stcls	0, cr0, [r1], {-0}
     79c:	00000408 	andeq	r0, r0, r8, lsl #8
     7a0:	01084c16 	tsteq	r8, r6, lsl ip
     7a4:	0000b400 	andeq	fp, r0, r0, lsl #8
     7a8:	02bf0f00 	adcseq	r0, pc, #0, 30
     7ac:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     7b0:	00029c0c 	andeq	r9, r2, ip, lsl #24
     7b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7b8:	80180000 	andshi	r0, r8, r0
     7bc:	01000003 	tsteq	r0, r3
     7c0:	075806c3 	ldrbeq	r0, [r8, -r3, asr #13]
     7c4:	00e40001 	rsceq	r0, r4, r1
     7c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7cc:	0000044c 	andeq	r0, r0, ip, asr #8
     7d0:	00032719 	andeq	r2, r3, r9, lsl r7
     7d4:	2fc30100 	svccs	0x00c30100
     7d8:	00000043 	andeq	r0, r0, r3, asr #32
     7dc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     7e0:	00000529 	andeq	r0, r0, r9, lsr #10
     7e4:	5b45c301 	blpl	11713f0 <__bss_end+0x115b8b0>
     7e8:	02000002 	andeq	r0, r0, #2
     7ec:	520f6891 	andpl	r6, pc, #9502720	; 0x910000
     7f0:	01000005 	tsteq	r0, r5
     7f4:	00430ec5 	subeq	r0, r3, r5, asr #29
     7f8:	91020000 	mrsls	r0, (UNDEF: 2)
     7fc:	b71a0074 			; <UNDEFINED> instruction: 0xb71a0074
     800:	01000004 	tsteq	r0, r4
     804:	005b168a 	subseq	r1, fp, sl, lsl #13
     808:	05f00000 	ldrbeq	r0, [r0, #0]!
     80c:	01680001 	cmneq	r8, r1
     810:	9c010000 	stcls	0, cr0, [r1], {-0}
     814:	00044419 	andeq	r4, r4, r9, lsl r4
     818:	398a0100 	stmibcc	sl, {r8}
     81c:	00000179 	andeq	r0, r0, r9, ror r1
     820:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     824:	000004eb 	andeq	r0, r0, fp, ror #9
     828:	4f618a01 	svcmi	0x00618a01
     82c:	02000000 	andeq	r0, r0, #0
     830:	a1196891 			; <UNDEFINED> instruction: 0xa1196891
     834:	01000004 	tsteq	r0, r4
     838:	004f848a 	subeq	r8, pc, sl, lsl #9
     83c:	91020000 	mrsls	r0, (UNDEF: 2)
     840:	089e0f64 	ldmeq	lr, {r2, r5, r6, r8, r9, sl, fp}
     844:	8c010000 	stchi	0, cr0, [r1], {-0}
     848:	00005b16 	andeq	r5, r0, r6, lsl fp
     84c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     850:	00055e0f 	andeq	r5, r5, pc, lsl #28
     854:	0a8d0100 	beq	fe340c5c <_estack+0xf6330c5c>
     858:	0000029c 	muleq	r0, ip, r2
     85c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     860:	0002a100 	andeq	sl, r2, r0, lsl #2
     864:	b9000400 	stmdblt	r0, {sl}
     868:	04000003 	streq	r0, [r0], #-3
     86c:	00003701 	andeq	r3, r0, r1, lsl #14
     870:	064c0c00 	strbeq	r0, [ip], -r0, lsl #24
     874:	01b00000 	movseq	r0, r0
     878:	0d540000 	ldcleq	0, cr0, [r4, #-0]
     87c:	029c0001 	addseq	r0, ip, #1
     880:	05930000 	ldreq	r0, [r3]
     884:	04020000 	streq	r0, [r2], #-0
     888:	00063107 	andeq	r3, r6, r7, lsl #2
     88c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     890:	00746e69 	rsbseq	r6, r4, r9, ror #28
     894:	3d050802 	stccc	8, cr0, [r5, #-8]
     898:	02000001 	andeq	r0, r0, #1
     89c:	016b0408 	cmneq	fp, r8, lsl #8
     8a0:	01020000 	mrseq	r0, (UNDEF: 2)
     8a4:	00064006 	andeq	r4, r6, r6
     8a8:	08010200 	stmdaeq	r1, {r9}
     8ac:	0000063e 	andeq	r0, r0, lr, lsr r6
     8b0:	ff050202 			; <UNDEFINED> instruction: 0xff050202
     8b4:	02000006 	andeq	r0, r0, #6
     8b8:	00a90702 	adceq	r0, r9, r2, lsl #14
     8bc:	04020000 	streq	r0, [r2], #-0
     8c0:	00014205 	andeq	r4, r1, r5, lsl #4
     8c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     8c8:	0000062c 	andeq	r0, r0, ip, lsr #12
     8cc:	00006404 	andeq	r6, r0, r4, lsl #8
     8d0:	07080200 	streq	r0, [r8, -r0, lsl #4]
     8d4:	00000627 	andeq	r0, r0, r7, lsr #12
     8d8:	01020405 	tsteq	r2, r5, lsl #8
     8dc:	00064708 	andeq	r4, r6, r8, lsl #14
     8e0:	000c0600 	andeq	r0, ip, r0, lsl #12
     8e4:	61030000 	mrsvs	r0, (UNDEF: 3)
     8e8:	0000641c 	andeq	r6, r0, ip, lsl r4
     8ec:	03690700 	cmneq	r9, #0, 14
     8f0:	02140000 	andseq	r0, r4, #0
     8f4:	00db0869 	sbcseq	r0, fp, r9, ror #16
     8f8:	1c080000 	stcne	0, cr0, [r8], {-0}
     8fc:	02000003 	andeq	r0, r0, #3
     900:	00800f6b 	addeq	r0, r0, fp, ror #30
     904:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     908:	00000522 	andeq	r0, r0, r2, lsr #10
     90c:	e01f6c02 	ands	r6, pc, r2, lsl #24
     910:	04000000 	streq	r0, [r0], #-0
     914:	00043908 	andeq	r3, r4, r8, lsl #18
     918:	1f6d0200 	svcne	0x006d0200
     91c:	000000e0 	andeq	r0, r0, r0, ror #1
     920:	033e0808 	teqeq	lr, #8, 16	; 0x80000
     924:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     928:	00007709 	andeq	r7, r0, r9, lsl #14
     92c:	e7080c00 	str	r0, [r8, -r0, lsl #24]
     930:	02000002 	andeq	r0, r0, #2
     934:	0077096f 	rsbseq	r0, r7, pc, ror #18
     938:	00100000 	andseq	r0, r0, r0
     93c:	00008c04 	andeq	r8, r0, r4, lsl #24
     940:	db040900 	blle	102d48 <__bss_end+0xed208>
     944:	06000000 	streq	r0, [r0], -r0
     948:	00000535 	andeq	r0, r0, r5, lsr r5
     94c:	8c1b7102 	ldfhis	f7, [fp], {2}
     950:	04000000 	streq	r0, [r0], #-0
     954:	000000e6 	andeq	r0, r0, r6, ror #1
     958:	00059107 	andeq	r9, r5, r7, lsl #2
     95c:	73020c00 	movwvc	r0, #11264	; 0x2c00
     960:	00012c08 	andeq	r2, r1, r8, lsl #24
     964:	031c0800 	tsteq	ip, #0, 16
     968:	75020000 	strvc	r0, [r2, #-0]
     96c:	0000800f 	andeq	r8, r0, pc
     970:	22080000 	andcs	r0, r8, #0
     974:	02000005 	andeq	r0, r0, #5
     978:	00e01e76 	rsceq	r1, r0, r6, ror lr
     97c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     980:	00000439 	andeq	r0, r0, r9, lsr r4
     984:	e01e7702 	ands	r7, lr, r2, lsl #14
     988:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     98c:	04a90600 	strteq	r0, [r9], #1536	; 0x600
     990:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
     994:	0000f720 	andeq	pc, r0, r0, lsr #14
     998:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
     99c:	a1070000 	mrsge	r0, (UNDEF: 7)
     9a0:	14000005 	strne	r0, [r0], #-5
     9a4:	72107e02 	andsvc	r7, r0, #2, 28
     9a8:	08000001 	stmdaeq	r0, {r0}
     9ac:	000004c8 	andeq	r0, r0, r8, asr #9
     9b0:	6b228002 	blvs	8a09c0 <__bss_end+0x88ae80>
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	00031408 	andeq	r1, r3, r8, lsl #8
     9bc:	17810200 	strne	r0, [r1, r0, lsl #4]
     9c0:	00000172 	andeq	r0, r0, r2, ror r1
     9c4:	03350804 	teqeq	r5, #4, 16	; 0x40000
     9c8:	82020000 	andhi	r0, r2, #0
     9cc:	00013819 	andeq	r3, r1, r9, lsl r8
     9d0:	09000800 	stmdbeq	r0, {fp}
     9d4:	0000f204 	andeq	pc, r0, r4, lsl #4
     9d8:	070a0600 	streq	r0, [sl, -r0, lsl #12]
     9dc:	83020000 	movwhi	r0, #8192	; 0x2000
     9e0:	00013d03 	andeq	r3, r1, r3, lsl #26
     9e4:	06e80a00 	strbteq	r0, [r8], r0, lsl #20
     9e8:	b7010000 	strlt	r0, [r1, -r0]
     9ec:	010f5806 	tsteq	pc, r6, lsl #16
     9f0:	00009800 	andeq	r9, r0, r0, lsl #16
     9f4:	b99c0100 	ldmiblt	ip, {r8}
     9f8:	0b000001 	bleq	a04 <_start-0x75fc>
     9fc:	0000068d 	andeq	r0, r0, sp, lsl #13
     a00:	b91eb701 	ldmdblt	lr, {r0, r8, r9, sl, ip, sp, pc}
     a04:	02000001 	andeq	r0, r0, #1
     a08:	090c6c91 	stmdbeq	ip, {r0, r4, r7, sl, fp, sp, lr}
     a0c:	01000007 	tsteq	r0, r7
     a10:	01bf09b9 			; <UNDEFINED> instruction: 0x01bf09b9
     a14:	91020000 	mrsls	r0, (UNDEF: 2)
     a18:	04090074 	streq	r0, [r9], #-116	; 0xffffff8c
     a1c:	000000e6 	andeq	r0, r0, r6, ror #1
     a20:	01780409 	cmneq	r8, r9, lsl #8
     a24:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
     a28:	01000007 	tsteq	r0, r7
     a2c:	0e80067e 	mcreq	6, 4, r0, cr0, cr14, {3}
     a30:	00d80001 	sbcseq	r0, r8, r1
     a34:	9c010000 	stcls	0, cr0, [r1], {-0}
     a38:	00000218 	andeq	r0, r0, r8, lsl r2
     a3c:	0007090b 	andeq	r0, r7, fp, lsl #18
     a40:	1a7e0100 	bne	1f80e48 <__bss_end+0x1f6b308>
     a44:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     a48:	0b6c9102 	bleq	1b24e58 <__bss_end+0x1b0f318>
     a4c:	00000710 	andeq	r0, r0, r0, lsl r7
     a50:	b92d7e01 	pushlt	{r0, r9, sl, fp, ip, sp, lr}
     a54:	02000001 	andeq	r0, r0, #1
     a58:	f40c6891 	vst2.32	{d6-d7}, [ip :64], r1
     a5c:	01000006 	tsteq	r0, r6
     a60:	01721580 	cmneq	r2, r0, lsl #11
     a64:	91020000 	mrsls	r0, (UNDEF: 2)
     a68:	06cf0c74 	uxtb16eq	r0, r4, ror #24
     a6c:	81010000 	mrshi	r0, (UNDEF: 1)
     a70:	0000800e 	andeq	r8, r0, lr
     a74:	70910200 	addsvc	r0, r1, r0, lsl #4
     a78:	06b00a00 	ldrteq	r0, [r0], r0, lsl #20
     a7c:	67010000 	strvs	r0, [r1, -r0]
     a80:	010de806 	tsteq	sp, r6, lsl #16
     a84:	00009800 	andeq	r9, r0, r0, lsl #16
     a88:	5c9c0100 	ldfpls	f0, [ip], {0}
     a8c:	0b000002 	bleq	a9c <_start-0x7564>
     a90:	00000709 	andeq	r0, r0, r9, lsl #14
     a94:	bf1d6701 	svclt	0x001d6701
     a98:	02000001 	andeq	r0, r0, #1
     a9c:	100b6c91 	mulne	fp, r1, ip
     aa0:	01000007 	tsteq	r0, r7
     aa4:	01b93067 			; <UNDEFINED> instruction: 0x01b93067
     aa8:	91020000 	mrsls	r0, (UNDEF: 2)
     aac:	03140c68 	tsteq	r4, #104, 24	; 0x6800
     ab0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     ab4:	00017216 	andeq	r7, r1, r6, lsl r2
     ab8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     abc:	069c0a00 	ldreq	r0, [ip], r0, lsl #20
     ac0:	60010000 	andvs	r0, r1, r0
     ac4:	010dbc06 	tsteq	sp, r6, lsl #24
     ac8:	00002c00 	andeq	r2, r0, r0, lsl #24
     acc:	829c0100 	addshi	r0, ip, #0, 2
     ad0:	0b000002 	bleq	ae0 <_start-0x7520>
     ad4:	000006e1 	andeq	r0, r0, r1, ror #13
     ad8:	b9266001 	stmdblt	r6!, {r0, sp, lr}
     adc:	02000001 	andeq	r0, r0, #1
     ae0:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
     ae4:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
     ae8:	54064c01 	strpl	r4, [r6], #-3073	; 0xfffff3ff
     aec:	6800010d 	stmdavs	r0, {r0, r2, r3, r8}
     af0:	01000000 	mrseq	r0, (UNDEF: 0)
     af4:	07090b9c 			; <UNDEFINED> instruction: 0x07090b9c
     af8:	4c010000 	stcmi	0, cr0, [r1], {-0}
     afc:	0001bf1e 	andeq	fp, r1, lr, lsl pc
     b00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b04:	07840000 	streq	r0, [r4, r0]
     b08:	00040000 	andeq	r0, r4, r0
     b0c:	00000483 	andeq	r0, r0, r3, lsl #9
     b10:	00370104 	eorseq	r0, r7, r4, lsl #2
     b14:	e00c0000 	and	r0, ip, r0
     b18:	b0000008 	andlt	r0, r0, r8
     b1c:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     b20:	b000010f 	andlt	r0, r0, pc, lsl #2
     b24:	7800000b 	stmdavc	r0, {r0, r1, r3}
     b28:	02000007 	andeq	r0, r0, #7
     b2c:	0000077f 	andeq	r0, r0, pc, ror r7
     b30:	3117d102 	tstcc	r7, r2, lsl #2
     b34:	03000000 	movweq	r0, #0
     b38:	06310704 	ldrteq	r0, [r1], -r4, lsl #14
     b3c:	04040000 	streq	r0, [r4], #-0
     b40:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     b44:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     b48:	0000013d 	andeq	r0, r0, sp, lsr r1
     b4c:	6b040803 	blvs	102b60 <__bss_end+0xed020>
     b50:	03000001 	movweq	r0, #1
     b54:	06400601 	strbeq	r0, [r0], -r1, lsl #12
     b58:	01030000 	mrseq	r0, (UNDEF: 3)
     b5c:	00063e08 	andeq	r3, r6, r8, lsl #28
     b60:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
     b64:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b68:	a9070203 	stmdbge	r7, {r0, r1, r9}
     b6c:	03000000 	movweq	r0, #0
     b70:	01420504 	cmpeq	r2, r4, lsl #10
     b74:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     b78:	03000000 	movweq	r0, #0
     b7c:	062c0704 	strteq	r0, [ip], -r4, lsl #14
     b80:	75050000 	strvc	r0, [r5, #-0]
     b84:	03000000 	movweq	r0, #0
     b88:	06270708 	strteq	r0, [r7], -r8, lsl #14
     b8c:	04060000 	streq	r0, [r6], #-0
     b90:	00008807 	andeq	r8, r0, r7, lsl #16
     b94:	08010300 	stmdaeq	r1, {r8, r9}
     b98:	00000647 	andeq	r0, r0, r7, asr #12
     b9c:	00a10408 	adceq	r0, r1, r8, lsl #8
     ba0:	96070000 	strls	r0, [r7], -r0
     ba4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     ba8:	00000c02 	andeq	r0, r0, r2, lsl #24
     bac:	1c610300 	stclne	3, cr0, [r1], #-0
     bb0:	00000075 	andeq	r0, r0, r5, ror r0
     bb4:	0003690a 	andeq	r6, r3, sl, lsl #18
     bb8:	69041400 	stmdbvs	r4, {sl, ip}
     bbc:	0000fd08 	andeq	pc, r0, r8, lsl #26
     bc0:	031c0b00 	tsteq	ip, #0, 22
     bc4:	6b040000 	blvs	100bcc <__bss_end+0xeb08c>
     bc8:	0000a20f 	andeq	sl, r0, pc, lsl #4
     bcc:	220b0000 	andcs	r0, fp, #0
     bd0:	04000005 	streq	r0, [r0], #-5
     bd4:	01021f6c 	tsteq	r2, ip, ror #30
     bd8:	0b040000 	bleq	100be0 <__bss_end+0xeb0a0>
     bdc:	00000439 	andeq	r0, r0, r9, lsr r4
     be0:	021f6d04 	andseq	r6, pc, #4, 26	; 0x100
     be4:	08000001 	stmdaeq	r0, {r0}
     be8:	00033e0b 	andeq	r3, r3, fp, lsl #28
     bec:	096e0400 	stmdbeq	lr!, {sl}^
     bf0:	00000088 	andeq	r0, r0, r8, lsl #1
     bf4:	02e70b0c 	rsceq	r0, r7, #12, 22	; 0x3000
     bf8:	6f040000 	svcvs	0x00040000
     bfc:	00008809 	andeq	r8, r0, r9, lsl #16
     c00:	05001000 	streq	r1, [r0, #-0]
     c04:	000000ae 	andeq	r0, r0, lr, lsr #1
     c08:	00fd0408 	rscseq	r0, sp, r8, lsl #8
     c0c:	35020000 	strcc	r0, [r2, #-0]
     c10:	04000005 	streq	r0, [r0], #-5
     c14:	00ae1b71 	adceq	r1, lr, r1, ror fp
     c18:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     c1c:	0a000001 	beq	c28 <_start-0x73d8>
     c20:	00000591 	muleq	r0, r1, r5
     c24:	0873040c 	ldmdaeq	r3!, {r2, r3, sl}^
     c28:	0000014e 	andeq	r0, r0, lr, asr #2
     c2c:	00031c0b 	andeq	r1, r3, fp, lsl #24
     c30:	0f750400 	svceq	0x00750400
     c34:	000000a2 	andeq	r0, r0, r2, lsr #1
     c38:	05220b00 	streq	r0, [r2, #-2816]!	; 0xfffff500
     c3c:	76040000 	strvc	r0, [r4], -r0
     c40:	0001021e 	andeq	r0, r1, lr, lsl r2
     c44:	390b0400 	stmdbcc	fp, {sl}
     c48:	04000004 	streq	r0, [r0], #-4
     c4c:	01021e77 	tsteq	r2, r7, ror lr
     c50:	00080000 	andeq	r0, r8, r0
     c54:	0004a902 	andeq	sl, r4, r2, lsl #18
     c58:	20790400 	rsbscs	r0, r9, r0, lsl #8
     c5c:	00000119 	andeq	r0, r0, r9, lsl r1
     c60:	00014e05 	andeq	r4, r1, r5, lsl #28
     c64:	05a10a00 	streq	r0, [r1, #2560]!	; 0xa00
     c68:	04140000 	ldreq	r0, [r4], #-0
     c6c:	0194107e 	orrseq	r1, r4, lr, ror r0
     c70:	c80b0000 	stmdagt	fp, {}	; <UNPREDICTABLE>
     c74:	04000004 	streq	r0, [r0], #-4
     c78:	007c2280 	rsbseq	r2, ip, r0, lsl #5
     c7c:	0b000000 	bleq	c84 <_start-0x737c>
     c80:	00000314 	andeq	r0, r0, r4, lsl r3
     c84:	94178104 	ldrls	r8, [r7], #-260	; 0xfffffefc
     c88:	04000001 	streq	r0, [r0], #-1
     c8c:	0003350b 	andeq	r3, r3, fp, lsl #10
     c90:	19820400 	stmibne	r2, {sl}
     c94:	0000015a 	andeq	r0, r0, sl, asr r1
     c98:	04080008 	streq	r0, [r8], #-8
     c9c:	00000114 	andeq	r0, r0, r4, lsl r1
     ca0:	00070a02 	andeq	r0, r7, r2, lsl #20
     ca4:	03830400 	orreq	r0, r3, #0, 8
     ca8:	0000015f 	andeq	r0, r0, pc, asr r1
     cac:	0007fd0a 	andeq	pc, r7, sl, lsl #26
     cb0:	68050800 	stmdavs	r5, {fp}
     cb4:	0001ce10 	andeq	ip, r1, r0, lsl lr
     cb8:	083e0b00 	ldmdaeq	lr!, {r8, r9, fp}
     cbc:	6a050000 	bvs	140cc4 <__bss_end+0x12b184>
     cc0:	00006910 	andeq	r6, r0, r0, lsl r9
     cc4:	610b0000 	mrsvs	r0, (UNDEF: 11)
     cc8:	05000008 	streq	r0, [r0, #-8]
     ccc:	00a2106b 	adceq	r1, r2, fp, rrx
     cd0:	00040000 	andeq	r0, r4, r0
     cd4:	00089002 	andeq	r9, r8, r2
     cd8:	036c0500 	cmneq	ip, #0, 10
     cdc:	000001a6 	andeq	r0, r0, r6, lsr #3
     ce0:	0009880a 	andeq	r8, r9, sl, lsl #16
     ce4:	79014c00 	stmdbvc	r1, {sl, fp, lr}
     ce8:	00027710 	andeq	r7, r2, r0, lsl r7
     cec:	085a0b00 	ldmdaeq	sl, {r8, r9, fp}^
     cf0:	7b010000 	blvc	40cf8 <__bss_end+0x2b1b8>
     cf4:	0002770f 	andeq	r7, r2, pc, lsl #14
     cf8:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     cfc:	0100000a 	tsteq	r0, sl
     d00:	02770f7c 	rsbseq	r0, r7, #124, 30	; 0x1f0
     d04:	0b040000 	bleq	100d0c <__bss_end+0xeb1cc>
     d08:	00000a5d 	andeq	r0, r0, sp, asr sl
     d0c:	770f7e01 	strvc	r7, [pc, -r1, lsl #28]
     d10:	08000002 	stmdaeq	r0, {r1}
     d14:	0008330b 	andeq	r3, r8, fp, lsl #6
     d18:	0f7f0100 	svceq	0x007f0100
     d1c:	00000277 	andeq	r0, r0, r7, ror r2
     d20:	0a2f0b0c 	beq	bc3958 <__bss_end+0xbade18>
     d24:	81010000 	mrshi	r0, (UNDEF: 1)
     d28:	00019a08 	andeq	r9, r1, r8, lsl #20
     d2c:	300b1000 	andcc	r1, fp, r0
     d30:	01000009 	tsteq	r0, r9
     d34:	019a0882 	orrseq	r0, sl, r2, lsl #17
     d38:	0b240000 	bleq	900d40 <__bss_end+0x8eb200>
     d3c:	00000a1d 	andeq	r0, r0, sp, lsl sl
     d40:	7c228401 	cfstrsvc	mvf8, [r2], #-4
     d44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d48:	0008d70b 	andeq	sp, r8, fp, lsl #14
     d4c:	19850100 	stmibne	r5, {r8}
     d50:	00000075 	andeq	r0, r0, r5, ror r0
     d54:	0a670b3c 	beq	19c3a4c <__bss_end+0x19adf0c>
     d58:	86010000 	strhi	r0, [r1], -r0
     d5c:	00007519 	andeq	r7, r0, r9, lsl r5
     d60:	040b4000 	streq	r4, [fp], #-0
     d64:	0100000a 	tsteq	r0, sl
     d68:	00702088 	rsbseq	r2, r0, r8, lsl #1
     d6c:	0b440000 	bleq	1100d74 <__bss_end+0x10eb234>
     d70:	00000998 	muleq	r0, r8, r9
     d74:	70208901 	eorvc	r8, r0, r1, lsl #18
     d78:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     d7c:	4d040800 	stcmi	8, cr0, [r4, #-0]
     d80:	02000000 	andeq	r0, r0, #0
     d84:	00000973 	andeq	r0, r0, r3, ror r9
     d88:	da039001 	ble	e4d94 <__bss_end+0xcf254>
     d8c:	02000001 	andeq	r0, r0, #1
     d90:	000008a6 	andeq	r0, r0, r6, lsr #17
     d94:	9a129801 	bls	4a6da0 <__bss_end+0x491260>
     d98:	07000002 	streq	r0, [r0, -r2]
     d9c:	00000289 	andeq	r0, r0, r9, lsl #5
     da0:	027d0408 	rsbseq	r0, sp, #8, 8	; 0x8000000
     da4:	9a070000 	bls	1c0dac <__bss_end+0x1ab26c>
     da8:	0c000002 	stceq	0, cr0, [r0], {2}
     dac:	0000074f 	andeq	r0, r0, pc, asr #14
     db0:	16056901 	strne	r6, [r5], -r1, lsl #18
     db4:	00000069 	andeq	r0, r0, r9, rrx
     db8:	00011b58 	andeq	r1, r1, r8, asr fp
     dbc:	00000048 	andeq	r0, r0, r8, asr #32
     dc0:	02e19c01 	rsceq	r9, r1, #256	; 0x100
     dc4:	550d0000 	strpl	r0, [sp, #-0]
     dc8:	0100000a 	tsteq	r0, sl
     dcc:	95430569 	strbls	r0, [r3, #-1385]	; 0xfffffa97
     dd0:	02000002 	andeq	r0, r0, #2
     dd4:	9e0e6c91 	mcrls	12, 0, r6, cr14, cr1, {4}
     dd8:	01000008 	tsteq	r0, r8
     ddc:	6916056b 	ldmdbvs	r6, {r0, r1, r3, r5, r6, r8, sl}
     de0:	02000000 	andeq	r0, r0, #0
     de4:	0f007491 	svceq	0x00007491
     de8:	000008c8 	andeq	r0, r0, r8, asr #17
     dec:	1d055d01 	stcne	13, cr5, [r5, #-4]
     df0:	00000069 	andeq	r0, r0, r9, rrx
     df4:	00011b0c 	andeq	r1, r1, ip, lsl #22
     df8:	0000004c 	andeq	r0, r0, ip, asr #32
     dfc:	031d9c01 	tsteq	sp, #256	; 0x100
     e00:	550d0000 	strpl	r0, [sp, #-0]
     e04:	0100000a 	tsteq	r0, sl
     e08:	9540055d 	strbls	r0, [r0, #-1373]	; 0xfffffaa3
     e0c:	02000002 	andeq	r0, r0, #2
     e10:	9e0e6c91 	mcrls	12, 0, r6, cr14, cr1, {4}
     e14:	01000008 	tsteq	r0, r8
     e18:	6916055f 	ldmdbvs	r6, {r0, r1, r2, r3, r4, r6, r8, sl}
     e1c:	02000000 	andeq	r0, r0, #0
     e20:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     e24:	000007a0 	andeq	r0, r0, r0, lsr #15
     e28:	16055201 	strne	r5, [r5], -r1, lsl #4
     e2c:	00000069 	andeq	r0, r0, r9, rrx
     e30:	00011acc 	andeq	r1, r1, ip, asr #21
     e34:	00000040 	andeq	r0, r0, r0, asr #32
     e38:	03599c01 	cmpeq	r9, #256	; 0x100
     e3c:	550d0000 	strpl	r0, [sp, #-0]
     e40:	0100000a 	tsteq	r0, sl
     e44:	95440552 	strbls	r0, [r4, #-1362]	; 0xfffffaae
     e48:	02000002 	andeq	r0, r0, #2
     e4c:	9e0e6c91 	mcrls	12, 0, r6, cr14, cr1, {4}
     e50:	01000008 	tsteq	r0, r8
     e54:	69160554 	ldmdbvs	r6, {r2, r4, r6, r8, sl}
     e58:	02000000 	andeq	r0, r0, #0
     e5c:	0f007491 	svceq	0x00007491
     e60:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
     e64:	1d054601 	stcne	6, cr4, [r5, #-4]
     e68:	00000069 	andeq	r0, r0, r9, rrx
     e6c:	00011a88 	andeq	r1, r1, r8, lsl #21
     e70:	00000044 	andeq	r0, r0, r4, asr #32
     e74:	03959c01 	orrseq	r9, r5, #256	; 0x100
     e78:	550d0000 	strpl	r0, [sp, #-0]
     e7c:	0100000a 	tsteq	r0, sl
     e80:	95410546 	strbls	r0, [r1, #-1350]	; 0xfffffaba
     e84:	02000002 	andeq	r0, r0, #2
     e88:	9e0e6c91 	mcrls	12, 0, r6, cr14, cr1, {4}
     e8c:	01000008 	tsteq	r0, r8
     e90:	69160548 	ldmdbvs	r6, {r3, r6, r8, sl}
     e94:	02000000 	andeq	r0, r0, #0
     e98:	10007491 	mulne	r0, r1, r4
     e9c:	000009f5 	strdeq	r0, [r0], -r5
     ea0:	0d050601 	stceq	6, cr0, [r5, #-4]
     ea4:	00011984 	andeq	r1, r1, r4, lsl #19
     ea8:	00000104 	andeq	r0, r0, r4, lsl #2
     eac:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
     eb0:	550d0000 	strpl	r0, [sp, #-0]
     eb4:	0100000a 	tsteq	r0, sl
     eb8:	892a0506 	stmdbhi	sl!, {r1, r2, r8, sl}
     ebc:	02000002 	andeq	r0, r0, #2
     ec0:	10007491 	mulne	r0, r1, r4
     ec4:	000007ca 	andeq	r0, r0, sl, asr #15
     ec8:	0d04f801 	stceq	8, cr15, [r4, #-4]
     ecc:	000118f4 	strdeq	r1, [r1], -r4
     ed0:	00000090 	muleq	r0, r0, r0
     ed4:	03f59c01 	mvnseq	r9, #256	; 0x100
     ed8:	550d0000 	strpl	r0, [sp, #-0]
     edc:	0100000a 	tsteq	r0, sl
     ee0:	a03204f8 	ldrshtge	r0, [r2], -r8
     ee4:	02000002 	andeq	r0, r0, #2
     ee8:	cb0d7491 	blgt	35e134 <__bss_end+0x3485f4>
     eec:	01000009 	tsteq	r0, r9
     ef0:	964704f8 			; <UNDEFINED> instruction: 0x964704f8
     ef4:	02000000 	andeq	r0, r0, #0
     ef8:	10007091 	mulne	r0, r1, r0
     efc:	000007ea 	andeq	r0, r0, sl, ror #15
     f00:	0d04d201 	sfmeq	f5, 1, [r4, #-4]
     f04:	000117c8 	andeq	r1, r1, r8, asr #15
     f08:	0000012c 	andeq	r0, r0, ip, lsr #2
     f0c:	043d9c01 	ldrteq	r9, [sp], #-3073	; 0xfffff3ff
     f10:	550d0000 	strpl	r0, [sp, #-0]
     f14:	0100000a 	tsteq	r0, sl
     f18:	9a2904d2 	bls	a42268 <__bss_end+0xa2c728>
     f1c:	02000002 	andeq	r0, r0, #2
     f20:	650d7491 	strvs	r7, [sp, #-1169]	; 0xfffffb6f
     f24:	01000009 	tsteq	r0, r9
     f28:	963e04d2 			; <UNDEFINED> instruction: 0x963e04d2
     f2c:	02000000 	andeq	r0, r0, #0
     f30:	130d7091 	movwne	r7, #53393	; 0xd091
     f34:	0100000a 	tsteq	r0, sl
     f38:	695b04d2 	ldmdbvs	fp, {r1, r4, r6, r7, sl}^
     f3c:	02000000 	andeq	r0, r0, #0
     f40:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
     f44:	0000084d 	andeq	r0, r0, sp, asr #16
     f48:	0604a901 	streq	sl, [r4], -r1, lsl #18
     f4c:	00011794 	muleq	r1, r4, r7
     f50:	00000034 	andeq	r0, r0, r4, lsr r0
     f54:	04659c01 	strbteq	r9, [r5], #-3073	; 0xfffff3ff
     f58:	550d0000 	strpl	r0, [sp, #-0]
     f5c:	0100000a 	tsteq	r0, sl
     f60:	892104a9 	stmdbhi	r1!, {r0, r3, r5, r7, sl}
     f64:	02000002 	andeq	r0, r0, #2
     f68:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     f6c:	00000947 	andeq	r0, r0, r7, asr #18
     f70:	18049d01 	stmdane	r4, {r0, r8, sl, fp, ip, pc}
     f74:	00000075 	andeq	r0, r0, r5, ror r0
     f78:	00011764 	andeq	r1, r1, r4, ror #14
     f7c:	00000030 	andeq	r0, r0, r0, lsr r0
     f80:	04a19c01 	strteq	r9, [r1], #3073	; 0xc01
     f84:	550d0000 	strpl	r0, [sp, #-0]
     f88:	0100000a 	tsteq	r0, sl
     f8c:	954a049d 	strbls	r0, [sl, #-1181]	; 0xfffffb63
     f90:	02000002 	andeq	r0, r0, #2
     f94:	9d0e6c91 	stcls	12, cr6, [lr, #-580]	; 0xfffffdbc
     f98:	01000008 	tsteq	r0, r8
     f9c:	7518049f 	ldrvc	r0, [r8, #-1183]	; 0xfffffb61
     fa0:	02000000 	andeq	r0, r0, #0
     fa4:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
     fa8:	00000768 	andeq	r0, r0, r8, ror #14
     fac:	18048f01 	stmdane	r4, {r0, r8, r9, sl, fp, pc}
     fb0:	00000075 	andeq	r0, r0, r5, ror r0
     fb4:	00011730 	andeq	r1, r1, r0, lsr r7
     fb8:	00000034 	andeq	r0, r0, r4, lsr r0
     fbc:	04dd9c01 	ldrbeq	r9, [sp], #3073	; 0xc01
     fc0:	550d0000 	strpl	r0, [sp, #-0]
     fc4:	0100000a 	tsteq	r0, sl
     fc8:	9543048f 	strbls	r0, [r3, #-1167]	; 0xfffffb71
     fcc:	02000002 	andeq	r0, r0, #2
     fd0:	9d0e6c91 	stcls	12, cr6, [lr, #-580]	; 0xfffffdbc
     fd4:	01000008 	tsteq	r0, r8
     fd8:	75180491 	ldrvc	r0, [r8, #-1169]	; 0xfffffb6f
     fdc:	02000000 	andeq	r0, r0, #0
     fe0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
     fe4:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
     fe8:	16045601 	strne	r5, [r4], -r1, lsl #12
     fec:	00000069 	andeq	r0, r0, r9, rrx
     ff0:	00011650 	andeq	r1, r1, r0, asr r6
     ff4:	000000e0 	andeq	r0, r0, r0, ror #1
     ff8:	05499c01 	strbeq	r9, [r9, #-3073]	; 0xfffff3ff
     ffc:	550d0000 	strpl	r0, [sp, #-0]
    1000:	0100000a 	tsteq	r0, sl
    1004:	89390456 	ldmdbhi	r9!, {r1, r2, r4, r6, sl}
    1008:	02000002 	andeq	r0, r0, #2
    100c:	cb0d6c91 	blgt	35c258 <__bss_end+0x346718>
    1010:	01000009 	tsteq	r0, r9
    1014:	8a4f0456 	bhi	13c2174 <__bss_end+0x13ac634>
    1018:	02000000 	andeq	r0, r0, #0
    101c:	860d6891 			; <UNDEFINED> instruction: 0x860d6891
    1020:	01000007 	tsteq	r0, r7
    1024:	496f0456 	stmdbmi	pc!, {r1, r2, r4, r6, sl}^	; <UNPREDICTABLE>
    1028:	02000005 	andeq	r0, r0, #5
    102c:	9e0e6491 	mcrls	4, 0, r6, cr14, cr1, {4}
    1030:	01000008 	tsteq	r0, r8
    1034:	69160458 	ldmdbvs	r6, {r3, r4, r6, sl}
    1038:	02000000 	andeq	r0, r0, #0
    103c:	b40e7491 	strlt	r7, [lr], #-1169	; 0xfffffb6f
    1040:	01000009 	tsteq	r0, r9
    1044:	75180459 	ldrvc	r0, [r8, #-1113]	; 0xfffffba7
    1048:	02000000 	andeq	r0, r0, #0
    104c:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
    1050:	00006904 	andeq	r6, r0, r4, lsl #18
    1054:	08071200 	stmdaeq	r7, {r9, ip}
    1058:	c1010000 	mrsgt	r0, (UNDEF: 1)
    105c:	00691603 	rsbeq	r1, r9, r3, lsl #12
    1060:	144c0000 	strbne	r0, [ip], #-0
    1064:	02040001 	andeq	r0, r4, #1
    1068:	9c010000 	stcls	0, cr0, [r1], {-0}
    106c:	000005db 	ldrdeq	r0, [r0], -fp
    1070:	000a550d 	andeq	r5, sl, sp, lsl #10
    1074:	03c10100 	biceq	r0, r1, #0, 2
    1078:	00028939 	andeq	r8, r2, r9, lsr r9
    107c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1080:	0009cb0d 	andeq	ip, r9, sp, lsl #22
    1084:	03c10100 	biceq	r0, r1, #0, 2
    1088:	00008a4f 	andeq	r8, r0, pc, asr #20
    108c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1090:	000c6a0d 	andeq	r6, ip, sp, lsl #20
    1094:	03c10100 	biceq	r0, r1, #0, 2
    1098:	0000a266 	andeq	sl, r0, r6, ror #4
    109c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    10a0:	0008710d 	andeq	r7, r8, sp, lsl #2
    10a4:	03c10100 	biceq	r0, r1, #0, 2
    10a8:	00006982 	andeq	r6, r0, r2, lsl #19
    10ac:	58910200 	ldmpl	r1, {r9}
    10b0:	00097a0e 	andeq	r7, r9, lr, lsl #20
    10b4:	03c30100 	biceq	r0, r3, #0, 2
    10b8:	00006916 	andeq	r6, r0, r6, lsl r9
    10bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10c0:	000dbb0e 	andeq	fp, sp, lr, lsl #22
    10c4:	03c40100 	biceq	r0, r4, #0, 2
    10c8:	0001ce0e 	andeq	ip, r1, lr, lsl #28
    10cc:	68910200 	ldmvs	r1, {r9}
    10d0:	00081c0e 	andeq	r1, r8, lr, lsl #24
    10d4:	03c50100 	biceq	r0, r5, #0, 2
    10d8:	0002770e 	andeq	r7, r2, lr, lsl #14
    10dc:	70910200 	addsvc	r0, r1, r0, lsl #4
    10e0:	072a1200 	streq	r1, [sl, -r0, lsl #4]!
    10e4:	86010000 	strhi	r0, [r1], -r0
    10e8:	00691603 	rsbeq	r1, r9, r3, lsl #12
    10ec:	13700000 	cmnne	r0, #0
    10f0:	00dc0001 	sbcseq	r0, ip, r1
    10f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f8:	00000657 	andeq	r0, r0, r7, asr r6
    10fc:	000a550d 	andeq	r5, sl, sp, lsl #10
    1100:	03860100 	orreq	r0, r6, #0, 2
    1104:	0002893d 	andeq	r8, r2, sp, lsr r9
    1108:	6c910200 	lfmvs	f0, 4, [r1], {0}
    110c:	0009650d 	andeq	r6, r9, sp, lsl #10
    1110:	03860100 	orreq	r0, r6, #0, 2
    1114:	00009c59 	andeq	r9, r0, r9, asr ip
    1118:	68910200 	ldmvs	r1, {r9}
    111c:	0007860d 	andeq	r8, r7, sp, lsl #12
    1120:	03860100 	orreq	r0, r6, #0, 2
    1124:	0005497e 	andeq	r4, r5, lr, ror r9
    1128:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    112c:	0009e70d 	andeq	lr, r9, sp, lsl #14
    1130:	03860100 	orreq	r0, r6, #0, 2
    1134:	000069a7 	andeq	r6, r0, r7, lsr #19
    1138:	60910200 	addsvs	r0, r1, r0, lsl #4
    113c:	00089e0e 	andeq	r9, r8, lr, lsl #28
    1140:	03880100 	orreq	r0, r8, #0, 2
    1144:	00006916 	andeq	r6, r0, r6, lsl r9
    1148:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    114c:	0009b40e 	andeq	fp, r9, lr, lsl #8
    1150:	03890100 	orreq	r0, r9, #0, 2
    1154:	00007518 	andeq	r7, r0, r8, lsl r5
    1158:	70910200 	addsvc	r0, r1, r0, lsl #4
    115c:	087e1200 	ldmdaeq	lr!, {r9, ip}^
    1160:	41010000 	mrsmi	r0, (UNDEF: 1)
    1164:	00691602 	rsbeq	r1, r9, r2, lsl #12
    1168:	11cc0000 	bicne	r0, ip, r0
    116c:	01a40001 			; <UNDEFINED> instruction: 0x01a40001
    1170:	9c010000 	stcls	0, cr0, [r1], {-0}
    1174:	000006d3 	ldrdeq	r0, [r0], -r3
    1178:	000a550d 	andeq	r5, sl, sp, lsl #10
    117c:	02410100 	subeq	r0, r1, #0, 2
    1180:	00028936 	andeq	r8, r2, r6, lsr r9
    1184:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1188:	0009650d 	andeq	r6, r9, sp, lsl #10
    118c:	02410100 	subeq	r0, r1, #0, 2
    1190:	00009c52 	andeq	r9, r0, r2, asr ip
    1194:	60910200 	addsvs	r0, r1, r0, lsl #4
    1198:	000c6a0d 	andeq	r6, ip, sp, lsl #20
    119c:	02410100 	subeq	r0, r1, #0, 2
    11a0:	0000a26e 	andeq	sl, r0, lr, ror #4
    11a4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    11a8:	0009e70d 	andeq	lr, r9, sp, lsl #14
    11ac:	02410100 	subeq	r0, r1, #0, 2
    11b0:	0000698a 	andeq	r6, r0, sl, lsl #19
    11b4:	58910200 	ldmpl	r1, {r9}
    11b8:	00097a0e 	andeq	r7, r9, lr, lsl #20
    11bc:	02430100 	subeq	r0, r3, #0, 2
    11c0:	00006916 	andeq	r6, r0, r6, lsl r9
    11c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c8:	000dbb0e 	andeq	fp, sp, lr, lsl #22
    11cc:	02440100 	subeq	r0, r4, #0, 2
    11d0:	0001ce0e 	andeq	ip, r1, lr, lsl #28
    11d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11d8:	09a01200 	stmibeq	r0!, {r9, ip}
    11dc:	42010000 	andmi	r0, r1, #0
    11e0:	02890e01 	addeq	r0, r9, #1, 28
    11e4:	11040000 	mrsne	r0, (UNDEF: 4)
    11e8:	00c80001 	sbceq	r0, r8, r1
    11ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    11f0:	0000074f 	andeq	r0, r0, pc, asr #14
    11f4:	0009220d 	andeq	r2, r9, sp, lsl #4
    11f8:	01420100 	mrseq	r0, (UNDEF: 82)
    11fc:	0000753a 	andeq	r7, r0, sl, lsr r5
    1200:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1204:	000a670d 	andeq	r6, sl, sp, lsl #14
    1208:	01420100 	mrseq	r0, (UNDEF: 82)
    120c:	00007560 	andeq	r7, r0, r0, ror #10
    1210:	60910200 	addsvs	r0, r1, r0, lsl #4
    1214:	0007430d 	andeq	r4, r7, sp, lsl #6
    1218:	01420100 	mrseq	r0, (UNDEF: 82)
    121c:	0000547a 	andeq	r5, r0, sl, ror r4
    1220:	5f910200 	svcpl	0x00910200
    1224:	0007df0e 	andeq	sp, r7, lr, lsl #30
    1228:	01440100 	mrseq	r0, (UNDEF: 84)
    122c:	00029a09 	andeq	r9, r2, r9, lsl #20
    1230:	70910200 	addsvc	r0, r1, r0, lsl #4
    1234:	000a430e 	andeq	r4, sl, lr, lsl #6
    1238:	01450100 	mrseq	r0, (UNDEF: 85)
    123c:	00002508 	andeq	r2, r0, r8, lsl #10
    1240:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1244:	00089e0e 	andeq	r9, r8, lr, lsl #28
    1248:	01460100 	mrseq	r0, (UNDEF: 86)
    124c:	0002890e 	andeq	r8, r2, lr, lsl #18
    1250:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1254:	09d41300 	ldmibeq	r4, {r8, r9, ip}^
    1258:	17010000 	strne	r0, [r1, -r0]
    125c:	00690f01 	rsbeq	r0, r9, r1, lsl #30
    1260:	0ff00000 	svceq	0x00f00000	; IMB
    1264:	01140001 	tsteq	r4, r1
    1268:	9c010000 	stcls	0, cr0, [r1], {-0}
    126c:	000a550d 	andeq	r5, sl, sp, lsl #10
    1270:	01170100 	tsteq	r7, r0, lsl #2
    1274:	00028930 	andeq	r8, r2, r0, lsr r9
    1278:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    127c:	0007e00d 	andeq	lr, r7, sp
    1280:	01170100 	tsteq	r7, r0, lsl #2
    1284:	00006947 	andeq	r6, r0, r7, asr #18
    1288:	70910200 	addsvc	r0, r1, r0, lsl #4
    128c:	0dd20000 	ldcleq	0, cr0, [r2]
    1290:	00040000 	andeq	r0, r4, r0
    1294:	000005cd 	andeq	r0, r0, sp, asr #11
    1298:	00370104 	eorseq	r0, r7, r4, lsl #2
    129c:	c40c0000 	strgt	r0, [ip], #-0
    12a0:	b000000d 	andlt	r0, r0, sp
    12a4:	a0000001 	andge	r0, r0, r1
    12a8:	2400011b 	strcs	r0, [r0], #-283	; 0xfffffee5
    12ac:	a7000019 	smladge	r0, r9, r0, r0
    12b0:	0200000c 	andeq	r0, r0, #12
    12b4:	06400601 	strbeq	r0, [r0], -r1, lsl #12
    12b8:	25030000 	strcs	r0, [r3, #-0]
    12bc:	02000000 	andeq	r0, r0, #0
    12c0:	063e0801 	ldrteq	r0, [lr], -r1, lsl #16
    12c4:	02020000 	andeq	r0, r2, #0
    12c8:	0006ff05 	andeq	pc, r6, r5, lsl #30
    12cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    12d0:	000000a9 	andeq	r0, r0, r9, lsr #1
    12d4:	42050402 	andmi	r0, r5, #33554432	; 0x2000000
    12d8:	04000001 	streq	r0, [r0], #-1
    12dc:	00000046 	andeq	r0, r0, r6, asr #32
    12e0:	2c070402 	cfstrscs	mvf0, [r7], {2}
    12e4:	04000006 	streq	r0, [r0], #-6
    12e8:	00000052 	andeq	r0, r0, r2, asr r0
    12ec:	3d050802 	stccc	8, cr0, [r5, #-8]
    12f0:	02000001 	andeq	r0, r0, #1
    12f4:	06270708 	strteq	r0, [r7], -r8, lsl #14
    12f8:	04050000 	streq	r0, [r5], #-0
    12fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1300:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1304:	00000631 	andeq	r0, r0, r1, lsr r6
    1308:	00077f06 	andeq	r7, r7, r6, lsl #30
    130c:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    1310:	00000073 	andeq	r0, r0, r3, ror r0
    1314:	6b040802 	blvs	103324 <__bss_end+0xed7e4>
    1318:	07000001 	streq	r0, [r0, -r1]
    131c:	08010204 	stmdaeq	r1, {r2, r9}
    1320:	00000647 	andeq	r0, r0, r7, asr #12
    1324:	0000bc06 	andeq	fp, r0, r6, lsl #24
    1328:	10470300 	subne	r0, r7, r0, lsl #6
    132c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1330:	00a80408 	adceq	r0, r8, r8, lsl #8
    1334:	b3090000 	movwlt	r0, #36864	; 0x9000
    1338:	0a000000 	beq	1340 <_start-0x6cc0>
    133c:	0000008d 	andeq	r0, r0, sp, lsl #1
    1340:	000c0600 	andeq	r0, ip, r0, lsl #12
    1344:	61040000 	mrsvs	r0, (UNDEF: 4)
    1348:	0000521c 	andeq	r5, r0, ip, lsl r2
    134c:	00b30400 	adcseq	r0, r3, r0, lsl #8
    1350:	2d060000 	stccs	0, cr0, [r6, #-0]
    1354:	0500000d 	streq	r0, [r0, #-13]
    1358:	00d01957 	sbcseq	r1, r0, r7, asr r9
    135c:	04080000 	streq	r0, [r8], #-0
    1360:	000000d6 	ldrdeq	r0, [r0], -r6
    1364:	0000460b 	andeq	r4, r0, fp, lsl #12
    1368:	0000e500 	andeq	lr, r0, r0, lsl #10
    136c:	008d0a00 	addeq	r0, sp, r0, lsl #20
    1370:	0c000000 	stceq	0, cr0, [r0], {-0}
    1374:	00000369 	andeq	r0, r0, r9, ror #6
    1378:	08690614 	stmdaeq	r9!, {r2, r4, r9, sl}^
    137c:	00000134 	andeq	r0, r0, r4, lsr r1
    1380:	00031c0d 	andeq	r1, r3, sp, lsl #24
    1384:	0f6b0600 	svceq	0x006b0600
    1388:	000000b3 	strheq	r0, [r0], -r3
    138c:	05220d00 	streq	r0, [r2, #-3328]!	; 0xfffff300
    1390:	6c060000 	stcvs	0, cr0, [r6], {-0}
    1394:	0001391f 	andeq	r3, r1, pc, lsl r9
    1398:	390d0400 	stmdbcc	sp, {sl}
    139c:	06000004 	streq	r0, [r0], -r4
    13a0:	01391f6d 	teqeq	r9, sp, ror #30
    13a4:	0d080000 	stceq	0, cr0, [r8, #-0]
    13a8:	0000033e 	andeq	r0, r0, lr, lsr r3
    13ac:	8d096e06 	stchi	14, cr6, [r9, #-24]	; 0xffffffe8
    13b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    13b4:	0002e70d 	andeq	lr, r2, sp, lsl #14
    13b8:	096f0600 	stmdbeq	pc!, {r9, sl}^	; <UNPREDICTABLE>
    13bc:	0000008d 	andeq	r0, r0, sp, lsl #1
    13c0:	e5040010 	str	r0, [r4, #-16]
    13c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13c8:	00013404 	andeq	r3, r1, r4, lsl #8
    13cc:	05350600 	ldreq	r0, [r5, #-1536]!	; 0xfffffa00
    13d0:	71060000 	mrsvc	r0, (UNDEF: 6)
    13d4:	0000e51b 	andeq	lr, r0, fp, lsl r5
    13d8:	013f0400 	teqeq	pc, r0, lsl #8
    13dc:	910c0000 	mrsls	r0, (UNDEF: 12)
    13e0:	0c000005 	stceq	0, cr0, [r0], {5}
    13e4:	85087306 	strhi	r7, [r8, #-774]	; 0xfffffcfa
    13e8:	0d000001 	stceq	0, cr0, [r0, #-4]
    13ec:	0000031c 	andeq	r0, r0, ip, lsl r3
    13f0:	b30f7506 	movwlt	r7, #62726	; 0xf506
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	0005220d 	andeq	r2, r5, sp, lsl #4
    13fc:	1e760600 	cdpne	6, 7, cr0, cr6, cr0, {0}
    1400:	00000139 	andeq	r0, r0, r9, lsr r1
    1404:	04390d04 	ldrteq	r0, [r9], #-3332	; 0xfffff2fc
    1408:	77060000 	strvc	r0, [r6, -r0]
    140c:	0001391e 	andeq	r3, r1, lr, lsl r9
    1410:	06000800 	streq	r0, [r0], -r0, lsl #16
    1414:	000004a9 	andeq	r0, r0, r9, lsr #9
    1418:	50207906 	eorpl	r7, r0, r6, lsl #18
    141c:	04000001 	streq	r0, [r0], #-1
    1420:	00000185 	andeq	r0, r0, r5, lsl #3
    1424:	0005a10c 	andeq	sl, r5, ip, lsl #2
    1428:	7e061400 	cfcpysvc	mvf1, mvf6
    142c:	0001cb10 	andeq	ip, r1, r0, lsl fp
    1430:	04c80d00 	strbeq	r0, [r8], #3328	; 0xd00
    1434:	80060000 	andhi	r0, r6, r0
    1438:	00005922 	andeq	r5, r0, r2, lsr #18
    143c:	140d0000 	strne	r0, [sp], #-0
    1440:	06000003 	streq	r0, [r0], -r3
    1444:	01cb1781 	biceq	r1, fp, r1, lsl #15
    1448:	0d040000 	stceq	0, cr0, [r4, #-0]
    144c:	00000335 	andeq	r0, r0, r5, lsr r3
    1450:	91198206 	tstls	r9, r6, lsl #4
    1454:	08000001 	stmdaeq	r0, {r0}
    1458:	4b040800 	blmi	103460 <__bss_end+0xed920>
    145c:	06000001 	streq	r0, [r0], -r1
    1460:	0000070a 	andeq	r0, r0, sl, lsl #14
    1464:	96038306 	strls	r8, [r3], -r6, lsl #6
    1468:	03000001 	movweq	r0, #1
    146c:	000001d1 	ldrdeq	r0, [r0], -r1
    1470:	000c5d06 	andeq	r5, ip, r6, lsl #26
    1474:	10630700 	rsbne	r0, r3, r0, lsl #14
    1478:	0000008d 	andeq	r0, r0, sp, lsl #1
    147c:	0007fd0c 	andeq	pc, r7, ip, lsl #26
    1480:	68070800 	stmdavs	r7, {fp}
    1484:	00021610 	andeq	r1, r2, r0, lsl r6
    1488:	083e0d00 	ldmdaeq	lr!, {r8, sl, fp}
    148c:	6a070000 	bvs	1c1494 <__bss_end+0x1ab954>
    1490:	00004610 	andeq	r4, r0, r0, lsl r6
    1494:	610d0000 	mrsvs	r0, (UNDEF: 13)
    1498:	07000008 	streq	r0, [r0, -r8]
    149c:	00b3106b 	adcseq	r1, r3, fp, rrx
    14a0:	00040000 	andeq	r0, r4, r0
    14a4:	00089006 	andeq	r9, r8, r6
    14a8:	036c0700 	cmneq	ip, #0, 14
    14ac:	000001ee 	andeq	r0, r0, lr, ror #3
    14b0:	000e6c0c 	andeq	r6, lr, ip, lsl #24
    14b4:	71070c00 	tstvc	r7, r0, lsl #24
    14b8:	00025710 	andeq	r5, r2, r0, lsl r7
    14bc:	0f930d00 	svceq	0x00930d00
    14c0:	73070000 	movwvc	r0, #28672	; 0x7000
    14c4:	00008d08 	andeq	r8, r0, r8, lsl #26
    14c8:	950d0000 	strls	r0, [sp, #-0]
    14cc:	0700000d 	streq	r0, [r0, -sp]
    14d0:	00521074 	subseq	r1, r2, r4, ror r0
    14d4:	0d040000 	stceq	0, cr0, [r4, #-0]
    14d8:	00000b18 	andeq	r0, r0, r8, lsl fp
    14dc:	52107507 	andspl	r7, r0, #29360128	; 0x1c00000
    14e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14e4:	0e240600 	cfmadda32eq	mvax0, mvax0, mvfx4, mvfx0
    14e8:	76070000 	strvc	r0, [r7], -r0
    14ec:	00022203 	andeq	r2, r2, r3, lsl #4
    14f0:	02570300 	subseq	r0, r7, #0, 6
    14f4:	04080000 	streq	r0, [r8], #-0
    14f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14fc:	00026803 	andeq	r6, r2, r3, lsl #16
    1500:	52040800 	andpl	r0, r4, #0, 16
    1504:	0c000000 	stceq	0, cr0, [r0], {-0}
    1508:	00000a7d 	andeq	r0, r0, sp, ror sl
    150c:	10660148 	rsbne	r0, r6, r8, asr #2
    1510:	000002e2 	andeq	r0, r0, r2, ror #5
    1514:	00015e0d 	andeq	r5, r1, sp, lsl #28
    1518:	1b680100 	blne	1a01920 <__bss_end+0x19ebde0>
    151c:	000002e2 	andeq	r0, r0, r2, ror #5
    1520:	05d70d00 	ldrbeq	r0, [r7, #3328]	; 0xd00
    1524:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1528:	00013f0f 	andeq	r3, r1, pc, lsl #30
    152c:	040d0400 	streq	r0, [sp], #-1024	; 0xfffffc00
    1530:	01000006 	tsteq	r0, r6
    1534:	013f0f6f 	teqeq	pc, pc, ror #30
    1538:	0d180000 	ldceq	0, cr0, [r8, #-0]
    153c:	000004eb 	andeq	r0, r0, fp, ror #9
    1540:	52197001 	andspl	r7, r9, #1
    1544:	2c000000 	stccs	0, cr0, [r0], {-0}
    1548:	000f050d 	andeq	r0, pc, sp, lsl #10
    154c:	14710100 	ldrbtne	r0, [r1], #-256	; 0xffffff00
    1550:	00000273 	andeq	r0, r0, r3, ror r2
    1554:	0a720d30 	beq	1c84a1c <__bss_end+0x1c6eedc>
    1558:	72010000 	andvc	r0, r1, #0
    155c:	0002e811 	andeq	lr, r2, r1, lsl r8
    1560:	da0d3400 	ble	34e568 <__bss_end+0x338a28>
    1564:	0100000e 	tsteq	r0, lr
    1568:	00c41486 	sbceq	r1, r4, r6, lsl #9
    156c:	00440000 	subeq	r0, r4, r0
    1570:	00590408 	subseq	r0, r9, r8, lsl #8
    1574:	250e0000 	strcs	r0, [lr, #-0]
    1578:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    157c:	0f000002 	svceq	0x00000002
    1580:	00000073 	andeq	r0, r0, r3, ror r0
    1584:	6506000f 	strvs	r0, [r6, #-15]
    1588:	0100000b 	tsteq	r0, fp
    158c:	02790393 	rsbseq	r0, r9, #1275068418	; 0x4c000002
    1590:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    1594:	10000002 	andne	r0, r0, r2
    1598:	000002a7 	andeq	r0, r0, r7, lsr #5
    159c:	21239f01 			; <UNDEFINED> instruction: 0x21239f01
    15a0:	05000003 	streq	r0, [r0, #-3]
    15a4:	0147e403 	cmpeq	r7, r3, lsl #8
    15a8:	f8040800 			; <UNDEFINED> instruction: 0xf8040800
    15ac:	04000002 	streq	r0, [r0], #-2
    15b0:	0000031b 	andeq	r0, r0, fp, lsl r3
    15b4:	0001d10e 	andeq	sp, r1, lr, lsl #2
    15b8:	00033600 	andeq	r3, r3, r0, lsl #12
    15bc:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    15c0:	00040000 	andeq	r0, r4, r0
    15c4:	000acd11 	andeq	ip, sl, r1, lsl sp
    15c8:	1ea30100 	fdvnes	f0, f3, f0
    15cc:	00000326 	andeq	r0, r0, r6, lsr #6
    15d0:	47e80305 	strbmi	r0, [r8, r5, lsl #6]!
    15d4:	f4110001 			; <UNDEFINED> instruction: 0xf4110001
    15d8:	0100000a 	tsteq	r0, sl
    15dc:	01d11ea4 	bicseq	r1, r1, r4, lsr #29
    15e0:	03050000 	movweq	r0, #20480	; 0x5000
    15e4:	0001484c 	andeq	r4, r1, ip, asr #16
    15e8:	000b0611 	andeq	r0, fp, r1, lsl r6
    15ec:	1ea50100 	fdvnes	f0, f5, f0
    15f0:	000001d1 	ldrdeq	r0, [r0], -r1
    15f4:	48600305 	stmdami	r0!, {r0, r2, r8, r9}^
    15f8:	f3110001 	vhadd.u16	d0, d1, d1
    15fc:	0100000e 	tsteq	r0, lr
    1600:	038429a6 	orreq	r2, r4, #2719744	; 0x298000
    1604:	03050000 	movweq	r0, #20480	; 0x5000
    1608:	00014874 	andeq	r4, r1, r4, ror r8
    160c:	01d10408 	bicseq	r0, r1, r8, lsl #8
    1610:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
    1614:	03000003 	movweq	r0, #3
    1618:	0000037e 	andeq	r0, r0, lr, ror r3
    161c:	000c2111 	andeq	r2, ip, r1, lsl r1
    1620:	29a70100 	stmibcs	r7!, {r8}
    1624:	00000384 	andeq	r0, r0, r4, lsl #7
    1628:	48780305 	ldmdami	r8!, {r0, r2, r8, r9}^
    162c:	d2110001 	andsle	r0, r1, #1
    1630:	0100000b 	tsteq	r0, fp
    1634:	01d11ea8 	bicseq	r1, r1, r8, lsr #29
    1638:	03050000 	movweq	r0, #20480	; 0x5000
    163c:	0001487c 	andeq	r4, r1, ip, ror r8
    1640:	000cef11 	andeq	lr, ip, r1, lsl pc
    1644:	1fac0100 	svcne	0x00ac0100
    1648:	000001d1 	ldrdeq	r0, [r0], -r1
    164c:	48900305 	ldmmi	r0, {r0, r2, r8, r9}
    1650:	77110001 	ldrvc	r0, [r1, -r1]
    1654:	0100000c 	tsteq	r0, ip
    1658:	005939ad 	subseq	r3, r9, sp, lsr #19
    165c:	03050000 	movweq	r0, #20480	; 0x5000
    1660:	000148a4 	andeq	r4, r1, r4, lsr #17
    1664:	000ba611 	andeq	sl, fp, r1, lsl r6
    1668:	1fb30100 	svcne	0x00b30100
    166c:	000001d1 	ldrdeq	r0, [r0], -r1
    1670:	48a80305 	stmiami	r8!, {r0, r2, r8, r9}
    1674:	0f110001 	svceq	0x00110001
    1678:	01000010 	tsteq	r0, r0, lsl r0
    167c:	005938be 	ldrheq	r3, [r9], #-142	; 0xffffff72
    1680:	03050000 	movweq	r0, #20480	; 0x5000
    1684:	000148bc 			; <UNDEFINED> instruction: 0x000148bc
    1688:	000c8611 	andeq	r8, ip, r1, lsl r6
    168c:	2ebf0100 	frdcse	f0, f7, f0
    1690:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1694:	48c00305 	stmiami	r0, {r0, r2, r8, r9}^
    1698:	3b110001 	blcc	4416a4 <__bss_end+0x42bb64>
    169c:	0100000c 	tsteq	r0, ip
    16a0:	00522fc0 	subseq	r2, r2, r0, asr #31
    16a4:	03050000 	movweq	r0, #20480	; 0x5000
    16a8:	000148c4 	andeq	r4, r1, r4, asr #17
    16ac:	000aa811 	andeq	sl, sl, r1, lsl r8
    16b0:	38c10100 	stmiacc	r1, {r8}^
    16b4:	00000059 	andeq	r0, r0, r9, asr r0
    16b8:	48c80305 	stmiami	r8, {r0, r2, r8, r9}^
    16bc:	bb110001 	bllt	4416c8 <__bss_end+0x42bb88>
    16c0:	0100000a 	tsteq	r0, sl
    16c4:	004d36c2 	subeq	r3, sp, r2, asr #13
    16c8:	03050000 	movweq	r0, #20480	; 0x5000
    16cc:	000148cc 	andeq	r4, r1, ip, asr #17
    16d0:	00103b11 	andseq	r3, r0, r1, lsl fp
    16d4:	38c30100 	stmiacc	r3, {r8}^
    16d8:	00000059 	andeq	r0, r0, r9, asr r0
    16dc:	48d00305 	ldmmi	r0, {r0, r2, r8, r9}^
    16e0:	57110001 	ldrpl	r0, [r1, -r1]
    16e4:	0100000b 	tsteq	r0, fp
    16e8:	005938c4 	subseq	r3, r9, r4, asr #17
    16ec:	03050000 	movweq	r0, #20480	; 0x5000
    16f0:	000148d4 	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
    16f4:	000c1411 	andeq	r1, ip, r1, lsl r4
    16f8:	2fc50100 	svccs	0x00c50100
    16fc:	0000004d 	andeq	r0, r0, sp, asr #32
    1700:	48d80305 	ldmmi	r8, {r0, r2, r8, r9}^
    1704:	ca110001 	bgt	441710 <__bss_end+0x42bbd0>
    1708:	0100000e 	tsteq	r0, lr
    170c:	004d2fc6 	subeq	r2, sp, r6, asr #31
    1710:	03050000 	movweq	r0, #20480	; 0x5000
    1714:	000148dc 	ldrdeq	r4, [r1], -ip
    1718:	000e0611 	andeq	r0, lr, r1, lsl r6
    171c:	2fc70100 	svccs	0x00c70100
    1720:	00000052 	andeq	r0, r0, r2, asr r0
    1724:	48e00305 	stmiami	r0!, {r0, r2, r8, r9}^
    1728:	80110001 	andshi	r0, r1, r1
    172c:	0100000d 	tsteq	r0, sp
    1730:	00b325c8 	adcseq	r2, r3, r8, asr #11
    1734:	03050000 	movweq	r0, #20480	; 0x5000
    1738:	00014754 	andeq	r4, r1, r4, asr r7
    173c:	000fb112 	andeq	fp, pc, r2, lsl r1	; <UNPREDICTABLE>
    1740:	09290100 	stmdbeq	r9!, {r8}
    1744:	0134900e 	teqeq	r4, lr
    1748:	00003400 	andeq	r3, r0, r0, lsl #8
    174c:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    1750:	13000004 	movwne	r0, #4
    1754:	00001035 	andeq	r1, r0, r5, lsr r0
    1758:	24092901 	strcs	r2, [r9], #-2305	; 0xfffff6ff
    175c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1760:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1764:	000b2514 	andeq	r2, fp, r4, lsl r5
    1768:	086a0100 	stmdaeq	sl!, {r8}^
    176c:	00031b10 	andeq	r1, r3, r0, lsl fp
    1770:	0133e000 	teqeq	r3, r0
    1774:	0000b000 	andeq	fp, r0, r0
    1778:	229c0100 	addscs	r0, ip, #0, 2
    177c:	13000005 	movwne	r0, #5
    1780:	00000b99 	muleq	r0, r9, fp
    1784:	37086a01 	strcc	r6, [r8, -r1, lsl #20]
    1788:	0000003f 	andeq	r0, r0, pc, lsr r0
    178c:	136e9102 	cmnne	lr, #-2147483648	; 0x80000000
    1790:	00001050 	andeq	r1, r0, r0, asr r0
    1794:	55086a01 	strpl	r6, [r8, #-2561]	; 0xfffff5ff
    1798:	00000273 	andeq	r0, r0, r3, ror r2
    179c:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    17a0:	00000d5a 	andeq	r0, r0, sl, asr sp
    17a4:	09086c01 	stmdbeq	r8, {r0, sl, fp, sp, lr}
    17a8:	0000031b 	andeq	r0, r0, fp, lsl r3
    17ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17b0:	000ff012 	andeq	pc, pc, r2, lsl r0	; <UNPREDICTABLE>
    17b4:	08500100 	ldmdaeq	r0, {r8}^
    17b8:	0133280d 	teqeq	r3, sp, lsl #16
    17bc:	0000b800 	andeq	fp, r0, r0, lsl #16
    17c0:	4a9c0100 	bmi	fe701bc8 <_estack+0xf66f1bc8>
    17c4:	13000005 	movwne	r0, #5
    17c8:	00000552 	andeq	r0, r0, r2, asr r5
    17cc:	3a085001 	bcc	2157d8 <__bss_end+0x1ffc98>
    17d0:	000000b3 	strheq	r0, [r0], -r3
    17d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17d8:	00109012 	andseq	r9, r0, r2, lsl r0
    17dc:	082d0100 	stmdaeq	sp!, {r8}
    17e0:	01326c0d 	teqeq	r2, sp, lsl #24
    17e4:	0000bc00 	andeq	fp, r0, r0, lsl #24
    17e8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    17ec:	16000005 	strne	r0, [r0], -r5
    17f0:	00013278 	andeq	r3, r1, r8, ror r2
    17f4:	00000098 	muleq	r0, r8, r0
    17f8:	000d3e15 	andeq	r3, sp, r5, lsl lr
    17fc:	08310100 	ldmdaeq	r1!, {r8}
    1800:	00004611 	andeq	r4, r0, r1, lsl r6
    1804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1808:	0132b816 	teqeq	r2, r6, lsl r8
    180c:	00005800 	andeq	r5, r0, r0, lsl #16
    1810:	10351500 	eorsne	r1, r5, r0, lsl #10
    1814:	3d010000 	stccc	0, cr0, [r1, #-0]
    1818:	031b0d08 	tsteq	fp, #8, 26	; 0x200
    181c:	91020000 	mrsls	r0, (UNDEF: 2)
    1820:	00000070 	andeq	r0, r0, r0, ror r0
    1824:	00106b12 	andseq	r6, r0, r2, lsl fp
    1828:	080d0100 	stmdaeq	sp, {r8}
    182c:	0131ac0d 	teqeq	r1, sp, lsl #24
    1830:	0000c000 	andeq	ip, r0, r0
    1834:	be9c0100 	fmllte	f0, f4, f0
    1838:	15000005 	strne	r0, [r0, #-5]
    183c:	000004eb 	andeq	r0, r0, fp, ror #9
    1840:	18080f01 	stmdane	r8, {r0, r8, r9, sl, fp}
    1844:	00000052 	andeq	r0, r0, r2, asr r0
    1848:	00749102 	rsbseq	r9, r4, r2, lsl #2
    184c:	000e5212 	andeq	r5, lr, r2, lsl r2
    1850:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1854:	0130ec0d 	teqeq	r0, sp, lsl #24
    1858:	0000c000 	andeq	ip, r0, r0
    185c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1860:	13000006 	movwne	r0, #6
    1864:	00001035 	andeq	r1, r0, r5, lsr r0
    1868:	3007b701 	andcc	fp, r7, r1, lsl #14
    186c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1870:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1874:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    1878:	5107b701 	tstpl	r7, r1, lsl #14
    187c:	0000026e 	andeq	r0, r0, lr, ror #4
    1880:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    1884:	000004eb 	andeq	r0, r0, fp, ror #9
    1888:	7007b701 	andvc	fp, r7, r1, lsl #14
    188c:	00000052 	andeq	r0, r0, r2, asr r0
    1890:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1894:	00000fe7 	andeq	r0, r0, r7, ror #31
    1898:	9807b701 	stmdals	r7, {r0, r8, r9, sl, ip, sp, pc}
    189c:	0000062c 	andeq	r0, r0, ip, lsr #12
    18a0:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    18a4:	00000b99 	muleq	r0, r9, fp
    18a8:	b107b701 	tstlt	r7, r1, lsl #14
    18ac:	0000003f 	andeq	r0, r0, pc, lsr r0
    18b0:	00009102 	andeq	r9, r0, r2, lsl #2
    18b4:	02630408 	rsbeq	r0, r3, #8, 8	; 0x8000000
    18b8:	26030000 	strcs	r0, [r3], -r0
    18bc:	12000006 	andne	r0, r0, #6
    18c0:	00000d21 	andeq	r0, r0, r1, lsr #26
    18c4:	08077601 	stmdaeq	r7, {r0, r9, sl, ip, sp, lr}
    18c8:	000130bc 	strheq	r3, [r1], -ip
    18cc:	00000030 	andeq	r0, r0, r0, lsr r0
    18d0:	06599c01 	ldrbeq	r9, [r9], -r1, lsl #24
    18d4:	4b130000 	blmi	4c18dc <__bss_end+0x4abd9c>
    18d8:	01000001 	tsteq	r0, r1
    18dc:	8d080776 	stchi	7, cr0, [r8, #-472]	; 0xfffffe28
    18e0:	02000000 	andeq	r0, r0, #0
    18e4:	17007491 			; <UNDEFINED> instruction: 0x17007491
    18e8:	00000f67 	andeq	r0, r0, r7, ror #30
    18ec:	06074201 	streq	r4, [r7], -r1, lsl #4
    18f0:	00013094 	muleq	r1, r4, r0
    18f4:	00000028 	andeq	r0, r0, r8, lsr #32
    18f8:	0d189c01 	ldceq	12, cr9, [r8, #-4]
    18fc:	0100000f 	tsteq	r0, pc
    1900:	460f0714 			; <UNDEFINED> instruction: 0x460f0714
    1904:	a0000000 	andge	r0, r0, r0
    1908:	f400012f 	vst4.8	{d0,d2,d4,d6}, [r0 :128]
    190c:	01000000 	mrseq	r0, (UNDEF: 0)
    1910:	0006b89c 	muleq	r6, ip, r8
    1914:	0dba1300 	ldceq	3, cr1, [sl]
    1918:	14010000 	strne	r0, [r1], #-0
    191c:	06be3a07 	ldrteq	r3, [lr], r7, lsl #20
    1920:	91020000 	mrsls	r0, (UNDEF: 2)
    1924:	0c69136c 	stcleq	3, cr1, [r9], #-432	; 0xfffffe50
    1928:	14010000 	strne	r0, [r1], #-0
    192c:	06c95a07 	strbeq	r5, [r9], r7, lsl #20
    1930:	91020000 	mrsls	r0, (UNDEF: 2)
    1934:	089e1568 	ldmeq	lr, {r3, r5, r6, r8, sl, ip}
    1938:	16010000 	strne	r0, [r1], -r0
    193c:	00460f07 	subeq	r0, r6, r7, lsl #30
    1940:	91020000 	mrsls	r0, (UNDEF: 2)
    1944:	04080074 	streq	r0, [r8], #-116	; 0xffffff8c
    1948:	00000216 	andeq	r0, r0, r6, lsl r2
    194c:	0006b803 	andeq	fp, r6, r3, lsl #16
    1950:	b3040800 	movwlt	r0, #18432	; 0x4800
    1954:	03000000 	movweq	r0, #0
    1958:	000006c3 	andeq	r0, r0, r3, asr #13
    195c:	000adf19 	andeq	sp, sl, r9, lsl pc
    1960:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    1964:	012f5806 			; <UNDEFINED> instruction: 0x012f5806
    1968:	00004800 	andeq	r4, r0, r0, lsl #16
    196c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    1970:	13000006 	movwne	r0, #6
    1974:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
    1978:	31070c01 	tstcc	r7, r1, lsl #24
    197c:	000006be 			; <UNDEFINED> instruction: 0x000006be
    1980:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1984:	000d0818 	andeq	r0, sp, r8, lsl r8
    1988:	06d90100 	ldrbeq	r0, [r9], r0, lsl #2
    198c:	00004616 	andeq	r4, r0, r6, lsl r6
    1990:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
    1994:	00011800 	andeq	r1, r1, r0, lsl #16
    1998:	429c0100 	addsmi	r0, ip, #0, 2
    199c:	13000007 	movwne	r0, #7
    19a0:	00000529 	andeq	r0, r0, r9, lsr #10
    19a4:	4406d901 	strmi	sp, [r6], #-2305	; 0xfffff6ff
    19a8:	00000748 	andeq	r0, r0, r8, asr #14
    19ac:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    19b0:	00000b8a 	andeq	r0, r0, sl, lsl #23
    19b4:	0906db01 	stmdbeq	r6, {r0, r8, r9, fp, ip, lr, pc}
    19b8:	0000031b 	andeq	r0, r0, fp, lsl r3
    19bc:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    19c0:	0000089e 	muleq	r0, lr, r8
    19c4:	0f06dc01 	svceq	0x0006dc01
    19c8:	00000046 	andeq	r0, r0, r6, asr #32
    19cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19d0:	01dd0408 	bicseq	r0, sp, r8, lsl #8
    19d4:	42030000 	andmi	r0, r3, #0
    19d8:	1a000007 	bne	19fc <_start-0x6604>
    19dc:	00000cb5 			; <UNDEFINED> instruction: 0x00000cb5
    19e0:	06068701 	streq	r8, [r6], -r1, lsl #14
    19e4:	00012da4 	andeq	r2, r1, r4, lsr #27
    19e8:	0000009c 	muleq	r0, ip, r0
    19ec:	07959c01 	ldreq	r9, [r5, r1, lsl #24]
    19f0:	29130000 	ldmdbcs	r3, {}	; <UNPREDICTABLE>
    19f4:	01000005 	tsteq	r0, r5
    19f8:	48310687 	ldmdami	r1!, {r0, r1, r2, r7, r9, sl}
    19fc:	02000007 	andeq	r0, r0, #7
    1a00:	6a136c91 	bvs	4dcc4c <__bss_end+0x4c710c>
    1a04:	0100000c 	tsteq	r0, ip
    1a08:	b34b0687 	movtlt	r0, #46727	; 0xb687
    1a0c:	02000000 	andeq	r0, r0, #0
    1a10:	52156891 	andspl	r6, r5, #9502720	; 0x910000
    1a14:	01000005 	tsteq	r0, r5
    1a18:	b30e0689 	movwlt	r0, #59017	; 0xe689
    1a1c:	02000000 	andeq	r0, r0, #0
    1a20:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1a24:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
    1a28:	06064b01 	streq	r4, [r6], -r1, lsl #22
    1a2c:	00012c9c 	muleq	r1, ip, ip
    1a30:	00000108 	andeq	r0, r0, r8, lsl #2
    1a34:	07c79c01 	strbeq	r9, [r7, r1, lsl #24]
    1a38:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    1a3c:	7800012d 	stmdavc	r0, {r0, r2, r3, r5, r8}
    1a40:	15000000 	strne	r0, [r0, #-0]
    1a44:	00000374 	andeq	r0, r0, r4, ror r3
    1a48:	03067c01 	movweq	r7, #27649	; 0x6c01
    1a4c:	00000389 	andeq	r0, r0, r9, lsl #7
    1a50:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1a54:	0e871800 	cdpeq	8, 8, cr1, cr7, cr0, {0}
    1a58:	2d010000 	stccs	0, cr0, [r1, #-0]
    1a5c:	00461006 	subeq	r1, r6, r6
    1a60:	2c200000 	stccs	0, cr0, [r0], #-0
    1a64:	007c0001 	rsbseq	r0, ip, r1
    1a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a6c:	00000823 	andeq	r0, r0, r3, lsr #16
    1a70:	000ce913 	andeq	lr, ip, r3, lsl r9
    1a74:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a78:	0001e23a 	andeq	lr, r1, sl, lsr r2
    1a7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a80:	000fdb13 	andeq	sp, pc, r3, lsl fp	; <UNPREDICTABLE>
    1a84:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a88:	00008d47 	andeq	r8, r0, r7, asr #26
    1a8c:	68910200 	ldmvs	r1, {r9}
    1a90:	00103615 	andseq	r3, r0, r5, lsl r6
    1a94:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    1a98:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1a9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aa0:	00089e15 	andeq	r9, r8, r5, lsl lr
    1aa4:	06300100 	ldrteq	r0, [r0], -r0, lsl #2
    1aa8:	00004610 	andeq	r4, r0, r0, lsl r6
    1aac:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ab0:	0bf91800 	bleq	ffe47ab8 <_estack+0xf7e37ab8>
    1ab4:	10010000 	andne	r0, r1, r0
    1ab8:	00c41306 	sbceq	r1, r4, r6, lsl #6
    1abc:	2bc40000 	blcs	ff101ac4 <_estack+0xf70f1ac4>
    1ac0:	005c0001 	subseq	r0, ip, r1
    1ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ac8:	0000086f 	andeq	r0, r0, pc, ror #16
    1acc:	000ce913 	andeq	lr, ip, r3, lsl r9
    1ad0:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    1ad4:	0001e23b 	andeq	lr, r1, fp, lsr r2
    1ad8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1adc:	00103615 	andseq	r3, r0, r5, lsl r6
    1ae0:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    1ae4:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1ae8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aec:	00089e15 	andeq	r9, r8, r5, lsl lr
    1af0:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    1af4:	0000c413 	andeq	ip, r0, r3, lsl r4
    1af8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1afc:	0b3c1a00 	bleq	f08304 <__bss_end+0xef27c4>
    1b00:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    1b04:	2b680705 	blcs	1a03720 <__bss_end+0x19edbe0>
    1b08:	005c0001 	subseq	r0, ip, r1
    1b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b10:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    1b14:	000ce913 	andeq	lr, ip, r3, lsl r9
    1b18:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    1b1c:	0001e22f 	andeq	lr, r1, pc, lsr #4
    1b20:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b24:	000d4b13 	andeq	r4, sp, r3, lsl fp
    1b28:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    1b2c:	0000c447 	andeq	ip, r0, r7, asr #8
    1b30:	68910200 	ldmvs	r1, {r9}
    1b34:	00103615 	andseq	r3, r0, r5, lsl r6
    1b38:	05f80100 	ldrbeq	r0, [r8, #256]!	; 0x100
    1b3c:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1b40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b44:	0e321a00 	vaddeq.f32	s2, s4, s0
    1b48:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1b4c:	294c0605 	stmdbcs	ip, {r0, r2, r9, sl}^
    1b50:	021c0001 	andseq	r0, ip, #1
    1b54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b58:	00000917 	andeq	r0, r0, r7, lsl r9
    1b5c:	00103515 	andseq	r3, r0, r5, lsl r5
    1b60:	05ab0100 	streq	r0, [fp, #256]!	; 0x100
    1b64:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1b68:	70910200 	addsvc	r0, r1, r0, lsl #4
    1b6c:	01298c1b 			; <UNDEFINED> instruction: 0x01298c1b
    1b70:	00008400 	andeq	r8, r0, r0, lsl #8
    1b74:	0008fc00 	andeq	pc, r8, r0, lsl #24
    1b78:	02cf1500 	sbceq	r1, pc, #0, 10
    1b7c:	b5010000 	strlt	r0, [r1, #-0]
    1b80:	037e0b05 	cmneq	lr, #5120	; 0x1400
    1b84:	91020000 	mrsls	r0, (UNDEF: 2)
    1b88:	10160074 	andsne	r0, r6, r4, ror r0
    1b8c:	1000012a 	andne	r0, r0, sl, lsr #2
    1b90:	15000001 	strne	r0, [r0, #-1]
    1b94:	0000031c 	andeq	r0, r0, ip, lsl r3
    1b98:	0305d601 	movweq	sp, #22017	; 0x5601
    1b9c:	000000b3 	strheq	r0, [r0], -r3
    1ba0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1ba4:	0a911c00 	beq	fe448bac <_estack+0xf6438bac>
    1ba8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    1bac:	00521804 	subseq	r1, r2, r4, lsl #16
    1bb0:	29280000 	stmdbcs	r8!, {}	; <UNPREDICTABLE>
    1bb4:	00240001 	eoreq	r0, r4, r1
    1bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bbc:	000bb91d 	andeq	fp, fp, sp, lsl r9
    1bc0:	04ea0100 	strbteq	r0, [sl], #256	; 0x100
    1bc4:	0000b30e 	andeq	fp, r0, lr, lsl #6
    1bc8:	0128f000 	msreq	CPSR_f, r0
    1bcc:	00003800 	andeq	r3, r0, r0, lsl #16
    1bd0:	6a9c0100 	bvs	fe701fd8 <_estack+0xf66f1fd8>
    1bd4:	15000009 	strne	r0, [r0, #-9]
    1bd8:	0000089e 	muleq	r0, lr, r8
    1bdc:	0e04ec01 	cdpeq	12, 0, cr14, cr4, cr1, {0}
    1be0:	000000b3 	strheq	r0, [r0], -r3
    1be4:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    1be8:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
    1bec:	1804ed01 	stmdane	r4, {r0, r8, sl, fp, sp, lr, pc}
    1bf0:	00000052 	andeq	r0, r0, r2, asr r0
    1bf4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1bf8:	000d6e18 	andeq	r6, sp, r8, lsl lr
    1bfc:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    1c00:	0000b30e 	andeq	fp, r0, lr, lsl #6
    1c04:	0128bc00 			; <UNDEFINED> instruction: 0x0128bc00
    1c08:	00003400 	andeq	r3, r0, r0, lsl #8
    1c0c:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    1c10:	15000009 	strne	r0, [r0, #-9]
    1c14:	00000f78 	andeq	r0, r0, r8, ror pc
    1c18:	0e04dd01 	cdpeq	13, 0, cr13, cr4, cr1, {0}
    1c1c:	000000b3 	strheq	r0, [r0], -r3
    1c20:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c24:	000ee418 	andeq	lr, lr, r8, lsl r4
    1c28:	04840100 	streq	r0, [r4], #256	; 0x100
    1c2c:	00004616 	andeq	r4, r0, r6, lsl r6
    1c30:	01271800 			; <UNDEFINED> instruction: 0x01271800
    1c34:	0001a400 	andeq	sl, r1, r0, lsl #8
    1c38:	eb9c0100 	bl	fe702040 <_estack+0xf66f2040>
    1c3c:	15000009 	strne	r0, [r0, #-9]
    1c40:	00001035 	andeq	r1, r0, r5, lsr r0
    1c44:	12048601 	andne	r8, r4, #1048576	; 0x100000
    1c48:	0000031b 	andeq	r0, r0, fp, lsl r3
    1c4c:	cb155401 	blgt	556c58 <__bss_end+0x541118>
    1c50:	0100000f 	tsteq	r0, pc
    1c54:	46160487 	ldrmi	r0, [r6], -r7, lsl #9
    1c58:	02000000 	andeq	r0, r0, #0
    1c5c:	64166c91 	ldrvs	r6, [r6], #-3217	; 0xfffff36f
    1c60:	24000127 	strcs	r0, [r0], #-295	; 0xfffffed9
    1c64:	15000001 	strne	r0, [r0, #-1]
    1c68:	00000b7b 	andeq	r0, r0, fp, ror fp
    1c6c:	13049a01 	movwne	r9, #18945	; 0x4a01
    1c70:	00000046 	andeq	r0, r0, r6, asr #32
    1c74:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1c78:	0c4d1700 	mcrreq	7, 0, r1, sp, cr0
    1c7c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1c80:	26e80604 	strbtcs	r0, [r8], r4, lsl #12
    1c84:	00300001 	eorseq	r0, r0, r1
    1c88:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c8c:	000c911e 	andeq	r9, ip, lr, lsl r1
    1c90:	04710100 	ldrbteq	r0, [r1], #-256	; 0xffffff00
    1c94:	0126b006 			; <UNDEFINED> instruction: 0x0126b006
    1c98:	00003800 	andeq	r3, r0, r0, lsl #16
    1c9c:	1a9c0100 	bne	fe7020a4 <_estack+0xf66f20a4>
    1ca0:	00000f7f 	andeq	r0, r0, pc, ror pc
    1ca4:	06043001 	streq	r3, [r4], -r1
    1ca8:	00012614 	andeq	r2, r1, r4, lsl r6
    1cac:	0000009c 	muleq	r0, ip, r0
    1cb0:	0a399c01 	beq	e68cbc <__bss_end+0xe5317c>
    1cb4:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    1cb8:	01000008 	tsteq	r0, r8
    1cbc:	460f0432 			; <UNDEFINED> instruction: 0x460f0432
    1cc0:	02000000 	andeq	r0, r0, #0
    1cc4:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    1cc8:	00000f54 	andeq	r0, r0, r4, asr pc
    1ccc:	10040201 	andne	r0, r4, r1, lsl #4
    1cd0:	00000046 	andeq	r0, r0, r6, asr #32
    1cd4:	000124f8 	strdeq	r2, [r1], -r8
    1cd8:	0000011c 	andeq	r0, r0, ip, lsl r1
    1cdc:	0a959c01 	beq	fe568ce8 <_estack+0xf6558ce8>
    1ce0:	6c130000 	ldcvs	0, cr0, [r3], {-0}
    1ce4:	0100000b 	tsteq	r0, fp
    1ce8:	e2300402 	eors	r0, r0, #33554432	; 0x2000000
    1cec:	02000001 	andeq	r0, r0, #1
    1cf0:	7b156491 	blvc	55af3c <__bss_end+0x5453fc>
    1cf4:	0100000b 	tsteq	r0, fp
    1cf8:	46100404 	ldrmi	r0, [r0], -r4, lsl #8
    1cfc:	02000000 	andeq	r0, r0, #0
    1d00:	35157491 	ldrcc	r7, [r5, #-1169]	; 0xfffffb6f
    1d04:	01000010 	tsteq	r0, r0, lsl r0
    1d08:	1b0a0405 	blne	282d24 <__bss_end+0x26d1e4>
    1d0c:	02000003 	andeq	r0, r0, #3
    1d10:	b4157091 	ldrlt	r7, [r5], #-145	; 0xffffff6f
    1d14:	01000009 	tsteq	r0, r9
    1d18:	52190406 	andspl	r0, r9, #100663296	; 0x6000000
    1d1c:	02000000 	andeq	r0, r0, #0
    1d20:	1a006c91 	bne	1cf6c <__bss_end+0x742c>
    1d24:	0000105f 	andeq	r1, r0, pc, asr r0
    1d28:	0703d501 	streq	sp, [r3, -r1, lsl #10]
    1d2c:	00012400 	andeq	r2, r1, r0, lsl #8
    1d30:	000000f8 	strdeq	r0, [r0], -r8
    1d34:	0acd9c01 	beq	ff368d40 <_estack+0xf7358d40>
    1d38:	6c130000 	ldcvs	0, cr0, [r3], {-0}
    1d3c:	0100000b 	tsteq	r0, fp
    1d40:	e22003d5 	eor	r0, r0, #1409286147	; 0x54000003
    1d44:	02000001 	andeq	r0, r0, #1
    1d48:	35156c91 	ldrcc	r6, [r5, #-3217]	; 0xfffff36f
    1d4c:	01000010 	tsteq	r0, r0, lsl r0
    1d50:	1b0a03d7 	blne	282cb4 <__bss_end+0x26d174>
    1d54:	02000003 	andeq	r0, r0, #3
    1d58:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1d5c:	00000be4 	andeq	r0, r0, r4, ror #23
    1d60:	1703b301 	strne	fp, [r3, -r1, lsl #6]
    1d64:	00000046 	andeq	r0, r0, r6, asr #32
    1d68:	00012384 	andeq	r2, r1, r4, lsl #7
    1d6c:	0000007c 	andeq	r0, r0, ip, ror r0
    1d70:	0b199c01 	bleq	668d7c <__bss_end+0x65323c>
    1d74:	e9130000 	ldmdb	r3, {}	; <UNPREDICTABLE>
    1d78:	0100000c 	tsteq	r0, ip
    1d7c:	e23903b3 	eors	r0, r9, #-872415230	; 0xcc000002
    1d80:	02000001 	andeq	r0, r0, #1
    1d84:	9e156c91 	mrcls	12, 0, r6, cr5, cr1, {4}
    1d88:	01000008 	tsteq	r0, r8
    1d8c:	461003b5 			; <UNDEFINED> instruction: 0x461003b5
    1d90:	02000000 	andeq	r0, r0, #0
    1d94:	35157491 	ldrcc	r7, [r5, #-1169]	; 0xfffffb6f
    1d98:	01000010 	tsteq	r0, r0, lsl r0
    1d9c:	1f1703b6 	svcne	0x001703b6
    1da0:	0200000b 	andeq	r0, r0, #11
    1da4:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
    1da8:	00030404 	andeq	r0, r3, r4, lsl #8
    1dac:	0b190300 	bleq	6429b4 <__bss_end+0x62ce74>
    1db0:	be1a0000 	cdplt	0, 1, cr0, cr10, cr0, {0}
    1db4:	0100000f 	tsteq	r0, pc
    1db8:	80070373 	andhi	r0, r7, r3, ror r3
    1dbc:	04000122 	streq	r0, [r0], #-290	; 0xfffffede
    1dc0:	01000001 	tsteq	r0, r1
    1dc4:	000b5c9c 	muleq	fp, ip, ip
    1dc8:	0f221300 	svceq	0x00221300
    1dcc:	73010000 	movwvc	r0, #4096	; 0x1000
    1dd0:	01e22103 	mvneq	r2, r3, lsl #2
    1dd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd8:	1035156c 	eorsne	r1, r5, ip, ror #10
    1ddc:	75010000 	strvc	r0, [r1, #-0]
    1de0:	031b0a03 	tsteq	fp, #12288	; 0x3000
    1de4:	91020000 	mrsls	r0, (UNDEF: 2)
    1de8:	131a0074 	tstne	sl, #116	; 0x74
    1dec:	0100000e 	tsteq	r0, lr
    1df0:	d8070307 	stmdale	r7, {r0, r1, r2, r8, r9}
    1df4:	a8000120 	stmdage	r0, {r5, r8}
    1df8:	01000001 	tsteq	r0, r1
    1dfc:	000bc49c 	muleq	fp, ip, r4
    1e00:	0ce81300 	stcleq	3, cr1, [r8]
    1e04:	07010000 	streq	r0, [r1, -r0]
    1e08:	01e22503 	mvneq	r2, r3, lsl #10
    1e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e10:	0da51364 	stceq	3, cr1, [r5, #400]!	; 0x190
    1e14:	07010000 	streq	r0, [r1, -r0]
    1e18:	00524403 	subseq	r4, r2, r3, lsl #8
    1e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e20:	10351560 	eorsne	r1, r5, r0, ror #10
    1e24:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1e28:	031b0a03 	tsteq	fp, #12288	; 0x3000
    1e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e30:	0cd61570 	cfldr64eq	mvdx1, [r6], {112}	; 0x70
    1e34:	0a010000 	beq	41e3c <__bss_end+0x2c2fc>
    1e38:	00521903 	subseq	r1, r2, r3, lsl #18
    1e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e40:	0b7b156c 	bleq	1ec73f8 <__bss_end+0x1eb18b8>
    1e44:	0b010000 	bleq	41e4c <__bss_end+0x2c30c>
    1e48:	00461003 	subeq	r1, r6, r3
    1e4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e50:	a3180074 	tstge	r8, #116	; 0x74
    1e54:	0100000c 	tsteq	r0, ip
    1e58:	521902f1 	andspl	r0, r9, #268435471	; 0x1000000f
    1e5c:	80000000 	andhi	r0, r0, r0
    1e60:	58000120 	stmdapl	r0, {r5, r8}
    1e64:	01000000 	mrseq	r0, (UNDEF: 0)
    1e68:	000c109c 	muleq	ip, ip, r0
    1e6c:	0ce81300 	stcleq	3, cr1, [r8]
    1e70:	f1010000 	setend	le
    1e74:	01e23802 	mvneq	r3, r2, lsl #16
    1e78:	91020000 	mrsls	r0, (UNDEF: 2)
    1e7c:	1035156c 	eorsne	r1, r5, ip, ror #10
    1e80:	f3010000 	vhadd.u8	d0, d1, d0
    1e84:	031b0a02 	tsteq	fp, #8192	; 0x2000
    1e88:	91020000 	mrsls	r0, (UNDEF: 2)
    1e8c:	089d1574 	ldmeq	sp, {r2, r4, r5, r6, r8, sl, ip}
    1e90:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    1e94:	00521902 	subseq	r1, r2, r2, lsl #18
    1e98:	91020000 	mrsls	r0, (UNDEF: 2)
    1e9c:	cb1a0070 	blgt	682064 <__bss_end+0x66c524>
    1ea0:	0100000c 	tsteq	r0, ip
    1ea4:	fc0702c3 	stc2	2, cr0, [r7], {195}	; 0xc3
    1ea8:	8400011f 	strhi	r0, [r0], #-287	; 0xfffffee1
    1eac:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb0:	000c589c 	muleq	ip, ip, r8
    1eb4:	03271300 			; <UNDEFINED> instruction: 0x03271300
    1eb8:	c3010000 	movwgt	r0, #4096	; 0x1000
    1ebc:	00b32002 	adcseq	r2, r3, r2
    1ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ec4:	0552156c 	ldrbeq	r1, [r2, #-1388]	; 0xfffffa94
    1ec8:	c5010000 	strgt	r0, [r1, #-0]
    1ecc:	00b30f02 	adcseq	r0, r3, r2, lsl #30
    1ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ed4:	0fcb1570 	svceq	0x00cb1570
    1ed8:	c6010000 	strgt	r0, [r1], -r0
    1edc:	00461702 	subeq	r1, r6, r2, lsl #14
    1ee0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee4:	a11a0074 	tstge	sl, r4, ror r0
    1ee8:	0100000f 	tsteq	r0, pc
    1eec:	ec070282 	sfm	f0, 4, [r7], {130}	; 0x82
    1ef0:	1000011e 	andne	r0, r0, lr, lsl r1
    1ef4:	01000001 	tsteq	r0, r1
    1ef8:	000cc09c 	muleq	ip, ip, r0
    1efc:	0f321300 	svceq	0x00321300
    1f00:	82010000 	andhi	r0, r1, #0
    1f04:	06c92d02 	strbeq	r2, [r9], r2, lsl #26
    1f08:	91020000 	mrsls	r0, (UNDEF: 2)
    1f0c:	10261364 	eorne	r1, r6, r4, ror #6
    1f10:	82010000 	andhi	r0, r1, #0
    1f14:	00b34e02 	adcseq	r4, r3, r2, lsl #28
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	05521560 	ldrbeq	r1, [r2, #-1376]	; 0xfffffaa0
    1f20:	84010000 	strhi	r0, [r1], #-0
    1f24:	00b30f02 	adcseq	r0, r3, r2, lsl #30
    1f28:	91020000 	mrsls	r0, (UNDEF: 2)
    1f2c:	0fcb1570 	svceq	0x00cb1570
    1f30:	85010000 	strhi	r0, [r1, #-0]
    1f34:	00461002 	subeq	r1, r6, r2
    1f38:	91020000 	mrsls	r0, (UNDEF: 2)
    1f3c:	0e45156c 	cdpeq	5, 4, cr1, cr5, cr12, {3}
    1f40:	85010000 	strhi	r0, [r1, #-0]
    1f44:	00462102 	subeq	r2, r6, r2, lsl #2
    1f48:	91020000 	mrsls	r0, (UNDEF: 2)
    1f4c:	7b1a0074 	blvc	682124 <__bss_end+0x66c5e4>
    1f50:	0100000e 	tsteq	r0, lr
    1f54:	ec070240 	sfm	f0, 4, [r7], {64}	; 0x40
    1f58:	0000011d 	andeq	r0, r0, sp, lsl r1
    1f5c:	01000001 	tsteq	r0, r1
    1f60:	000cf89c 	muleq	ip, ip, r8
    1f64:	0f451300 	svceq	0x00451300
    1f68:	40010000 	andmi	r0, r1, r0
    1f6c:	01e22002 	mvneq	r2, r2
    1f70:	91020000 	mrsls	r0, (UNDEF: 2)
    1f74:	1035156c 	eorsne	r1, r5, ip, ror #10
    1f78:	42010000 	andmi	r0, r1, #0
    1f7c:	031b0a02 	tsteq	fp, #8192	; 0x2000
    1f80:	91020000 	mrsls	r0, (UNDEF: 2)
    1f84:	a4180074 	ldrge	r0, [r8], #-116	; 0xffffff8c
    1f88:	0100000e 	tsteq	r0, lr
    1f8c:	4616019b 			; <UNDEFINED> instruction: 0x4616019b
    1f90:	a0000000 	andge	r0, r0, r0
    1f94:	4c00011b 	stfmis	f0, [r0], {27}
    1f98:	01000002 	tsteq	r0, r2
    1f9c:	000dcf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    1fa0:	0d631300 	stcleq	3, cr1, [r3, #-0]
    1fa4:	9b010000 	blls	41fac <__bss_end+0x2c46c>
    1fa8:	00963601 	addseq	r3, r6, r1, lsl #12
    1fac:	91020000 	mrsls	r0, (UNDEF: 2)
    1fb0:	0db31364 	ldceq	3, cr1, [r3, #400]!	; 0x190
    1fb4:	9b010000 	blls	41fbc <__bss_end+0x2c47c>
    1fb8:	026e5c01 	rsbeq	r5, lr, #256	; 0x100
    1fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc0:	0b991360 	bleq	fe646d48 <_estack+0xf6636d48>
    1fc4:	9b010000 	blls	41fcc <__bss_end+0x2c48c>
    1fc8:	003f7301 	eorseq	r7, pc, r1, lsl #6
    1fcc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd0:	014b135e 	cmpeq	fp, lr, asr r3
    1fd4:	9b010000 	blls	41fdc <__bss_end+0x2c49c>
    1fd8:	008d8701 	addeq	r8, sp, r1, lsl #14
    1fdc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fe0:	04eb1358 	strbteq	r1, [fp], #856	; 0x358
    1fe4:	9b010000 	blls	41fec <__bss_end+0x2c4ac>
    1fe8:	0052ac01 	subseq	sl, r2, r1, lsl #24
    1fec:	91020000 	mrsls	r0, (UNDEF: 2)
    1ff0:	10821300 	addne	r1, r2, r0, lsl #6
    1ff4:	9b010000 	blls	41ffc <__bss_end+0x2c4bc>
    1ff8:	0dcfc501 	cfstr64eq	mvdx12, [pc, #4]	; 2004 <_start-0x5ffc>
    1ffc:	91020000 	mrsls	r0, (UNDEF: 2)
    2000:	10501304 	subsne	r1, r0, r4, lsl #6
    2004:	9b010000 	blls	4200c <__bss_end+0x2c4cc>
    2008:	0273e401 	rsbseq	lr, r3, #16777216	; 0x1000000
    200c:	91020000 	mrsls	r0, (UNDEF: 2)
    2010:	0fe71f08 	svceq	0x00e71f08
    2014:	9b010000 	blls	4201c <__bss_end+0x2c4dc>
    2018:	2c011001 	stccs	0, cr1, [r1], {1}
    201c:	02000006 	andeq	r0, r0, #6
    2020:	9e150c91 	mrcls	12, 0, r0, cr5, cr1, {4}
    2024:	01000008 	tsteq	r0, r8
    2028:	4616019d 			; <UNDEFINED> instruction: 0x4616019d
    202c:	02000000 	andeq	r0, r0, #0
    2030:	5a157491 	bpl	55f27c <__bss_end+0x54973c>
    2034:	0100000d 	tsteq	r0, sp
    2038:	1b0a019e 	blne	2826b8 <__bss_end+0x26cb78>
    203c:	02000003 	andeq	r0, r0, #3
    2040:	e0167091 	muls	r6, r1, r0
    2044:	9c00011b 	stflss	f0, [r0], {27}
    2048:	15000001 	strne	r0, [r0, #-1]
    204c:	0000015e 	andeq	r0, r0, lr, asr r1
    2050:	1301a901 	movwne	sl, #6401	; 0x1901
    2054:	00000273 	andeq	r0, r0, r3, ror r2
    2058:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    205c:	e2040800 	and	r0, r4, #0, 16
    2060:	00000001 	andeq	r0, r0, r1
    2064:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    2068:	04010005 	streq	r0, [r1], #-5
    206c:	000007d8 	ldrdeq	r0, [r0], -r8
    2070:	0011c311 	andseq	ip, r1, r1, lsl r3
    2074:	10cf1d00 	sbcne	r1, pc, r0, lsl #26
    2078:	01b00000 	movseq	r0, r0
    207c:	34c40000 	strbcc	r0, [r4], #0
    2080:	03a40001 			; <UNDEFINED> instruction: 0x03a40001
    2084:	15330000 	ldrne	r0, [r3, #-0]!
    2088:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    208c:	02000012 	andeq	r0, r0, #18
    2090:	0032100b 	eorseq	r1, r2, fp
    2094:	37060000 	strcc	r0, [r6, -r0]
    2098:	12000000 	andne	r0, r0, #0
    209c:	00000047 	andeq	r0, r0, r7, asr #32
    20a0:	00004707 	andeq	r4, r0, r7, lsl #14
    20a4:	00510700 	subseq	r0, r1, r0, lsl #14
    20a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    20ac:	00000631 	andeq	r0, r0, r1, lsr r6
    20b0:	00004709 	andeq	r4, r0, r9, lsl #14
    20b4:	0a041300 	beq	106cbc <__bss_end+0xf117c>
    20b8:	760d0208 	strvc	r0, [sp], -r8, lsl #4
    20bc:	01000000 	mrseq	r0, (UNDEF: 0)
    20c0:	00001174 	andeq	r1, r0, r4, ror r1
    20c4:	26180e02 	ldrcs	r0, [r8], -r2, lsl #28
    20c8:	00000000 	andeq	r0, r0, r0
    20cc:	00003001 	andeq	r3, r0, r1
    20d0:	0f0f0200 	svceq	0x000f0200
    20d4:	00000051 	andeq	r0, r0, r1, asr r0
    20d8:	1e040004 	cdpne	0, 0, cr0, cr4, cr4, {0}
    20dc:	02000012 	andeq	r0, r0, #18
    20e0:	00530310 	subseq	r0, r3, r0, lsl r3
    20e4:	760b0000 	strvc	r0, [fp], -r0
    20e8:	92000000 	andls	r0, r0, #0
    20ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    20f0:	00000047 	andeq	r0, r0, r7, asr #32
    20f4:	b5020047 	strlt	r0, [r2, #-71]	; 0xffffffb9
    20f8:	09000011 	stmdbeq	r0, {r0, r4}
    20fc:	00008219 	andeq	r8, r0, r9, lsl r2
    2100:	e4030500 	str	r0, [r3], #-1280	; 0xfffffb00
    2104:	0a000148 	beq	262c <_start-0x59d4>
    2108:	2e0c0128 	adfcsep	f0, f4, #0.0
    210c:	01000001 	tsteq	r0, r1
    2110:	0000123a 	andeq	r1, r0, sl, lsr r2
    2114:	2e100d01 	cdpcs	13, 1, cr0, cr0, cr1, {0}
    2118:	00000001 	andeq	r0, r0, r1
    211c:	0010b001 	andseq	fp, r0, r1
    2120:	100e0100 	andne	r0, lr, r0, lsl #2
    2124:	0000012e 	andeq	r0, r0, lr, lsr #2
    2128:	10b90104 	adcsne	r0, r9, r4, lsl #2
    212c:	0f010000 	svceq	0x00010000
    2130:	00012e10 	andeq	r2, r1, r0, lsl lr
    2134:	0c010800 	stceq	8, cr0, [r1], {-0}
    2138:	01000011 	tsteq	r0, r1, lsl r0
    213c:	012e1010 			; <UNDEFINED> instruction: 0x012e1010
    2140:	010c0000 	mrseq	r0, (UNDEF: 12)
    2144:	0000124f 	andeq	r1, r0, pc, asr #4
    2148:	2e101101 	mufcss	f1, f0, f1
    214c:	10000001 	andne	r0, r0, r1
    2150:	00119b01 	andseq	r9, r1, r1, lsl #22
    2154:	10120100 	andsne	r0, r2, r0, lsl #2
    2158:	0000012e 	andeq	r0, r0, lr, lsr #2
    215c:	12430114 	subne	r0, r3, #20, 2
    2160:	13010000 	movwne	r0, #4096	; 0x1000
    2164:	00012e10 	andeq	r2, r1, r0, lsl lr
    2168:	a3011800 	movwge	r1, #6144	; 0x1800
    216c:	01000011 	tsteq	r0, r1, lsl r0
    2170:	012e1014 			; <UNDEFINED> instruction: 0x012e1014
    2174:	011c0000 	tsteq	ip, r0
    2178:	000011ac 	andeq	r1, r0, ip, lsr #3
    217c:	2e101501 	cfmul32cs	mvfx1, mvfx0, mvfx1
    2180:	20000001 	andcs	r0, r0, r1
    2184:	0010c201 	andseq	ip, r0, r1, lsl #4
    2188:	10160100 	andsne	r0, r6, r0, lsl #2
    218c:	0000012e 	andeq	r0, r0, lr, lsr #2
    2190:	2c080024 	stccs	0, cr0, [r8], {36}	; 0x24
    2194:	04000006 	streq	r0, [r0], #-6
    2198:	0000117f 	andeq	r1, r0, pc, ror r1
    219c:	a3031701 	movwge	r1, #14081	; 0x3701
    21a0:	14000000 	strne	r0, [r0], #-0
    21a4:	00000133 	andeq	r0, r0, r3, lsr r1
    21a8:	00015802 	andeq	r5, r1, r2, lsl #16
    21ac:	5a2b1900 	bpl	ac85b4 <__bss_end+0xab2a74>
    21b0:	05000001 	streq	r0, [r0, #-1]
    21b4:	01442803 	cmpeq	r4, r3, lsl #16
    21b8:	013f0600 	teqeq	pc, r0, lsl #12
    21bc:	55090000 	strpl	r0, [r9, #-0]
    21c0:	0b000001 	bleq	21cc <_start-0x5e34>
    21c4:	0000012e 	andeq	r0, r0, lr, lsr #2
    21c8:	0000016f 	andeq	r0, r0, pc, ror #2
    21cc:	0000470c 	andeq	r4, r0, ip, lsl #14
    21d0:	02000200 	andeq	r0, r0, #0, 4
    21d4:	0000113d 	andeq	r1, r0, sp, lsr r1
    21d8:	015f161c 	cmpeq	pc, ip, lsl r6	; <UNPREDICTABLE>
    21dc:	03050000 	movweq	r0, #20480	; 0x5000
    21e0:	00014b24 	andeq	r4, r1, r4, lsr #22
    21e4:	0011690d 	andseq	r6, r1, sp, lsl #18
    21e8:	37886d00 	strcc	r6, [r8, r0, lsl #26]
    21ec:	00e00001 	rsceq	r0, r0, r1
    21f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    21f4:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    21f8:	71726905 	cmnvc	r2, r5, lsl #18
    21fc:	4c256d00 	stcmi	13, cr6, [r5], #-0
    2200:	02000000 	andeq	r0, r0, #0
    2204:	64026c91 	strvs	r6, [r2], #-3217	; 0xfffff36f
    2208:	6f000011 	svcvs	0x00000011
    220c:	00012e10 	andeq	r2, r1, r0, lsl lr
    2210:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2214:	11910d00 	orrsne	r0, r1, r0, lsl #26
    2218:	b45b0000 	ldrblt	r0, [fp], #-0
    221c:	d4000136 	strle	r0, [r0], #-310	; 0xfffffeca
    2220:	01000000 	mrseq	r0, (UNDEF: 0)
    2224:	0001e29c 	muleq	r1, ip, r2
    2228:	72690500 	rsbvc	r0, r9, #0, 10
    222c:	245b0071 	ldrbcs	r0, [fp], #-113	; 0xffffff8f
    2230:	0000004c 	andeq	r0, r0, ip, asr #32
    2234:	026c9102 	rsbeq	r9, ip, #-2147483648	; 0x80000000
    2238:	00001164 	andeq	r1, r0, r4, ror #2
    223c:	012e105d 	qsubeq	r1, sp, lr
    2240:	91020000 	mrsls	r0, (UNDEF: 2)
    2244:	140e0074 	strne	r0, [lr], #-116	; 0xffffff8c
    2248:	51000011 	tstpl	r0, r1, lsl r0
    224c:	00013650 	andeq	r3, r1, r0, asr r6
    2250:	00000064 	andeq	r0, r0, r4, rrx
    2254:	02219c01 	eoreq	r9, r1, #256	; 0x100
    2258:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    225c:	51007172 	tstpl	r0, r2, ror r1
    2260:	00004c26 	andeq	r4, r0, r6, lsr #24
    2264:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2268:	00117403 	andseq	r7, r1, r3, lsl #8
    226c:	26405100 	strbcs	r5, [r0], -r0, lsl #2
    2270:	02000000 	andeq	r0, r0, #0
    2274:	30037091 	mulcc	r3, r1, r0
    2278:	51000000 	mrspl	r0, (UNDEF: 0)
    227c:	00005152 	andeq	r5, r0, r2, asr r1
    2280:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2284:	11200f00 			; <UNDEFINED> instruction: 0x11200f00
    2288:	344c0000 	strbcc	r0, [ip], #-0
    228c:	1c000136 	stfnes	f0, [r0], {54}	; 0x36
    2290:	01000000 	mrseq	r0, (UNDEF: 0)
    2294:	11590f9c 			; <UNDEFINED> instruction: 0x11590f9c
    2298:	18470000 	stmdane	r7, {}^	; <UNPREDICTABLE>
    229c:	1c000136 	stfnes	f0, [r0], {54}	; 0x36
    22a0:	01000000 	mrseq	r0, (UNDEF: 0)
    22a4:	122f0e9c 	eorne	r0, pc, #156, 28	; 0x9c0
    22a8:	78360000 	ldmdavc	r6!, {}	; <UNPREDICTABLE>
    22ac:	a0000135 	andge	r0, r0, r5, lsr r1
    22b0:	01000000 	mrseq	r0, (UNDEF: 0)
    22b4:	0002639c 	muleq	r2, ip, r3
    22b8:	11290200 			; <UNDEFINED> instruction: 0x11290200
    22bc:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    22c0:	0000012e 	andeq	r0, r0, lr, lsr #2
    22c4:	15005401 	strne	r5, [r0, #-1025]	; 0xfffffbff
    22c8:	0000114d 	andeq	r1, r0, sp, asr #2
    22cc:	c40d1e01 	strgt	r1, [sp], #-3585	; 0xfffff1ff
    22d0:	b4000134 	strlt	r0, [r0], #-308	; 0xfffffecc
    22d4:	01000000 	mrseq	r0, (UNDEF: 0)
    22d8:	1145039c 			; <UNDEFINED> instruction: 0x1145039c
    22dc:	281e0000 	ldmdacs	lr, {}	; <UNPREDICTABLE>
    22e0:	0000012e 	andeq	r0, r0, lr, lsr #2
    22e4:	036c9102 	cmneq	ip, #-2147483648	; 0x80000000
    22e8:	00001138 	andeq	r1, r0, r8, lsr r1
    22ec:	004c441e 	subeq	r4, ip, lr, lsl r4
    22f0:	91020000 	mrsls	r0, (UNDEF: 2)
    22f4:	34dc1668 	ldrbcc	r1, [ip], #1640	; 0x668
    22f8:	007c0001 	rsbseq	r0, ip, r1
    22fc:	62100000 	andsvs	r0, r0, #0
    2300:	23007469 	movwcs	r7, #1129	; 0x469
    2304:	00000047 	andeq	r0, r0, r7, asr #32
    2308:	10749102 	rsbsne	r9, r4, r2, lsl #2
    230c:	00717269 	rsbseq	r7, r1, r9, ror #4
    2310:	00004726 	andeq	r4, r0, r6, lsr #14
    2314:	70910200 	addsvc	r0, r1, r0, lsl #4
    2318:	e0000000 	and	r0, r0, r0
    231c:	05000003 	streq	r0, [r0, #-3]
    2320:	28040100 	stmdacs	r4, {r8}
    2324:	0a000009 	beq	2350 <_start-0x5cb0>
    2328:	000011c3 	andeq	r1, r0, r3, asr #3
    232c:	0012571d 	andseq	r5, r2, sp, lsl r7
    2330:	0001b000 	andeq	fp, r1, r0
    2334:	01386800 	teqeq	r8, r0, lsl #16
    2338:	0005d800 	andeq	sp, r5, r0, lsl #16
    233c:	0016b700 	andseq	fp, r6, r0, lsl #14
    2340:	13340900 	teqne	r4, #0, 18
    2344:	005f0000 	subseq	r0, pc, r0
    2348:	5f470000 	svcpl	0x00470000
    234c:	04000000 	streq	r0, [r0], #-0
    2350:	00001381 	andeq	r1, r0, r1, lsl #7
    2354:	139c0400 	orrsne	r0, ip, #0, 8
    2358:	04010000 	streq	r0, [r1], #-0
    235c:	00001457 	andeq	r1, r0, r7, asr r4
    2360:	13750402 	cmnne	r5, #33554432	; 0x2000000
    2364:	04030000 	streq	r0, [r3], #-0
    2368:	000013aa 	andeq	r1, r0, sl, lsr #7
    236c:	12da0404 	sbcsne	r0, sl, #4, 8	; 0x4000000
    2370:	04050000 	streq	r0, [r5], #-0
    2374:	000012ee 	andeq	r1, r0, lr, ror #5
    2378:	01060006 	tsteq	r6, r6
    237c:	00063e08 	andeq	r3, r6, r8, lsl #28
    2380:	135e0900 	cmpne	lr, #0, 18
    2384:	005f0000 	subseq	r0, pc, r0
    2388:	815a0000 	cmphi	sl, r0
    238c:	04000000 	streq	r0, [r0], #-0
    2390:	0000136d 	andeq	r1, r0, sp, ror #6
    2394:	14890400 	strne	r0, [r9], #1024	; 0x400
    2398:	00010000 	andeq	r0, r1, r0
    239c:	4a01a00b 	bmi	6a3d0 <__bss_end+0x54890>
    23a0:	00019309 	andeq	r9, r1, r9, lsl #6
    23a4:	13ed0100 	mvnne	r0, #0, 2
    23a8:	934b0000 	movtls	r0, #45056	; 0xb000
    23ac:	00000001 	andeq	r0, r0, r1
    23b0:	0013f401 	andseq	pc, r3, r1, lsl #8
    23b4:	01aa4c00 			; <UNDEFINED> instruction: 0x01aa4c00
    23b8:	01180000 	tsteq	r8, r0
    23bc:	00001295 	muleq	r0, r5, r2
    23c0:	0001b14d 	andeq	fp, r1, sp, asr #2
    23c4:	ff011c00 			; <UNDEFINED> instruction: 0xff011c00
    23c8:	4e000013 	mcrmi	0, 0, r0, cr0, cr3, {0}
    23cc:	000001aa 	andeq	r0, r0, sl, lsr #3
    23d0:	12ce0124 	sbcne	r0, lr, #36, 2
    23d4:	b14f0000 	mrslt	r0, SPSR
    23d8:	28000001 	stmdacs	r0, {r0}
    23dc:	00140a01 	andseq	r0, r4, r1, lsl #20
    23e0:	01aa5000 			; <UNDEFINED> instruction: 0x01aa5000
    23e4:	01300000 	teqeq	r0, r0
    23e8:	000013b5 			; <UNDEFINED> instruction: 0x000013b5
    23ec:	0001b151 	andeq	fp, r1, r1, asr r1
    23f0:	15013400 	strne	r3, [r1, #-1024]	; 0xfffffc00
    23f4:	52000014 	andpl	r0, r0, #20
    23f8:	000001aa 	andeq	r0, r0, sl, lsr #3
    23fc:	13c9013c 	bicne	r0, r9, #60, 2
    2400:	b1530000 	cmplt	r3, r0
    2404:	40000001 	andmi	r0, r0, r1
    2408:	00142001 	andseq	r2, r4, r1
    240c:	01aa5400 			; <UNDEFINED> instruction: 0x01aa5400
    2410:	01480000 	mrseq	r0, (UNDEF: 72)
    2414:	000013c3 	andeq	r1, r0, r3, asr #7
    2418:	0001b155 	andeq	fp, r1, r5, asr r1
    241c:	2b014c00 	blcs	55424 <__bss_end+0x3f8e4>
    2420:	56000014 			; <UNDEFINED> instruction: 0x56000014
    2424:	000001aa 	andeq	r0, r0, sl, lsr #3
    2428:	13670154 	cmnne	r7, #84, 2
    242c:	b1570000 	cmplt	r7, r0
    2430:	58000001 	stmdapl	r0, {r0}
    2434:	00143601 	andseq	r3, r4, r1, lsl #12
    2438:	01aa5800 			; <UNDEFINED> instruction: 0x01aa5800
    243c:	01600000 	cmneq	r0, r0
    2440:	000012d4 	ldrdeq	r1, [r0], -r4
    2444:	0001b159 	andeq	fp, r1, r9, asr r1
    2448:	41016400 	tstmi	r1, r0, lsl #8
    244c:	5a000014 	bpl	24a4 <_start-0x5b5c>
    2450:	000001aa 	andeq	r0, r0, sl, lsr #3
    2454:	138d016c 	orrne	r0, sp, #108, 2
    2458:	b15b0000 	cmplt	fp, r0
    245c:	70000001 	andvc	r0, r0, r1
    2460:	00144c01 	andseq	r4, r4, r1, lsl #24
    2464:	01aa5c00 			; <UNDEFINED> instruction: 0x01aa5c00
    2468:	01780000 	cmneq	r8, r0
    246c:	00001347 	andeq	r1, r0, r7, asr #6
    2470:	0001b15d 	andeq	fp, r1, sp, asr r1
    2474:	73017c00 	movwvc	r7, #7168	; 0x1c00
    2478:	5e000014 	mcrpl	0, 0, r0, cr0, cr4, {0}
    247c:	000001aa 	andeq	r0, r0, sl, lsr #3
    2480:	13160184 	tstne	r6, #132, 2	; 0x21
    2484:	b15f0000 	cmplt	pc, r0
    2488:	88000001 	stmdahi	r0, {r0}
    248c:	00147e01 	andseq	r7, r4, r1, lsl #28
    2490:	01aa6000 			; <UNDEFINED> instruction: 0x01aa6000
    2494:	01900000 	orrseq	r0, r0, r0
    2498:	0000132e 	andeq	r1, r0, lr, lsr #6
    249c:	0001c161 	andeq	ip, r1, r1, ror #2
    24a0:	93019400 	movwls	r9, #5120	; 0x1400
    24a4:	62000013 	andvs	r0, r0, #19
    24a8:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    24ac:	aa070098 	bge	1c2714 <__bss_end+0x1acbd4>
    24b0:	a3000001 	movwge	r0, #1
    24b4:	08000001 	stmdaeq	r0, {r0}
    24b8:	000001a3 	andeq	r0, r0, r3, lsr #3
    24bc:	04060005 	streq	r0, [r6], #-5
    24c0:	00063107 	andeq	r3, r6, r7, lsl #2
    24c4:	07040600 	streq	r0, [r4, -r0, lsl #12]
    24c8:	0000062c 	andeq	r0, r0, ip, lsr #12
    24cc:	0001aa07 	andeq	sl, r1, r7, lsl #20
    24d0:	0001c100 	andeq	ip, r1, r0, lsl #2
    24d4:	01a30800 			; <UNDEFINED> instruction: 0x01a30800
    24d8:	00010000 	andeq	r0, r1, r0
    24dc:	0001aa07 	andeq	sl, r1, r7, lsl #20
    24e0:	0001d100 	andeq	sp, r1, r0, lsl #2
    24e4:	01a30800 			; <UNDEFINED> instruction: 0x01a30800
    24e8:	00000000 	andeq	r0, r0, r0
    24ec:	00129b0c 	andseq	r9, r2, ip, lsl #22
    24f0:	03640100 	cmneq	r4, #0, 2
    24f4:	00000081 	andeq	r0, r0, r1, lsl #1
    24f8:	0001d10d 	andeq	sp, r1, sp, lsl #2
    24fc:	01580e00 	cmpeq	r8, r0, lsl #28
    2500:	66010000 	strvs	r0, [r1], -r0
    2504:	0001fa24 	andeq	pc, r1, r4, lsr #20
    2508:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    250c:	0f000144 	svceq	0x00000144
    2510:	0001dd04 	andeq	sp, r1, r4, lsl #26
    2514:	01f41000 	mvnseq	r1, r0
    2518:	03050000 	movweq	r0, #20480	; 0x5000
    251c:	c2000013 	andgt	r0, r0, #19
    2520:	00013de8 	andeq	r3, r1, r8, ror #27
    2524:	00000058 	andeq	r0, r0, r8, asr r0
    2528:	023e9c01 	eorseq	r9, lr, #256	; 0x100
    252c:	ad020000 	stcge	0, cr0, [r2, #-0]
    2530:	c2000012 	andgt	r0, r0, #18
    2534:	0001a326 	andeq	sl, r1, r6, lsr #6
    2538:	6c910200 	lfmvs	f0, 4, [r1], {0}
    253c:	00116403 	andseq	r6, r1, r3, lsl #8
    2540:	aa10c400 	bge	433548 <__bss_end+0x41da08>
    2544:	02000001 	andeq	r0, r0, #1
    2548:	e6037491 			; <UNDEFINED> instruction: 0xe6037491
    254c:	c5000013 	strgt	r0, [r0, #-19]	; 0xffffffed
    2550:	0001aa10 	andeq	sl, r1, r0, lsl sl
    2554:	70910200 	addsvc	r0, r1, r0, lsl #4
    2558:	13cf0500 	bicne	r0, pc, #0, 10
    255c:	30a50000 	adccc	r0, r5, r0
    2560:	b800013c 	stmdalt	r0, {r2, r3, r4, r5, r8}
    2564:	01000001 	tsteq	r0, r1
    2568:	00028b9c 	muleq	r2, ip, fp
    256c:	12ad0200 	adcne	r0, sp, #0, 4
    2570:	25a50000 	strcs	r0, [r5, #0]!
    2574:	000001a3 	andeq	r0, r0, r3, lsr #3
    2578:	026c9102 	rsbeq	r9, ip, #-2147483648	; 0x80000000
    257c:	000013e1 	andeq	r1, r0, r1, ror #7
    2580:	00263ea5 	eoreq	r3, r6, r5, lsr #29
    2584:	91020000 	mrsls	r0, (UNDEF: 2)
    2588:	1164036b 	cmnne	r4, fp, ror #6
    258c:	10a70000 	adcne	r0, r7, r0
    2590:	000001aa 	andeq	r0, r0, sl, lsr #3
    2594:	03749102 	cmneq	r4, #-2147483648	; 0x80000000
    2598:	000013e6 	andeq	r1, r0, r6, ror #7
    259c:	01aa10a8 			; <UNDEFINED> instruction: 0x01aa10a8
    25a0:	91020000 	mrsls	r0, (UNDEF: 2)
    25a4:	1d050070 	stcne	0, cr0, [r5, #-448]	; 0xfffffe40
    25a8:	88000013 	stmdahi	r0, {r0, r1, r4}
    25ac:	00013a80 	andeq	r3, r1, r0, lsl #21
    25b0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    25b4:	02d89c01 	sbcseq	r9, r8, #256	; 0x100
    25b8:	ad020000 	stcge	0, cr0, [r2, #-0]
    25bc:	88000012 	stmdahi	r0, {r1, r4}
    25c0:	0001a324 	andeq	sl, r1, r4, lsr #6
    25c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    25c8:	0013e102 	andseq	lr, r3, r2, lsl #2
    25cc:	263d8800 	ldrtcs	r8, [sp], -r0, lsl #16
    25d0:	02000000 	andeq	r0, r0, #0
    25d4:	64036b91 	strvs	r6, [r3], #-2961	; 0xfffff46f
    25d8:	8a000011 	bhi	2624 <_start-0x59dc>
    25dc:	0001aa10 	andeq	sl, r1, r0, lsl sl
    25e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25e4:	0013e603 	andseq	lr, r3, r3, lsl #12
    25e8:	aa108b00 	bge	4251f0 <__bss_end+0x40f6b0>
    25ec:	02000001 	andeq	r0, r0, #1
    25f0:	11007091 	swpne	r7, r1, [r0]
    25f4:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    25f8:	01058401 	tsteq	r5, r1, lsl #8
    25fc:	30000003 	andcc	r0, r0, r3
    2600:	5000013a 	andpl	r0, r0, sl, lsr r1
    2604:	01000000 	mrseq	r0, (UNDEF: 0)
    2608:	0003019c 	muleq	r3, ip, r1
    260c:	12ad0200 	adcne	r0, sp, #0, 4
    2610:	1b840000 	blne	fe102618 <_estack+0xf60f2618>
    2614:	000001a3 	andeq	r0, r0, r3, lsr #3
    2618:	00749102 	rsbseq	r9, r4, r2, lsl #2
    261c:	69050412 	stmdbvs	r5, {r1, r4, sl}
    2620:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
    2624:	00001466 	andeq	r1, r0, r6, ror #8
    2628:	01397879 	teqeq	r9, r9, ror r8
    262c:	0000b800 	andeq	fp, r0, r0, lsl #16
    2630:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    2634:	02000003 	andeq	r0, r0, #3
    2638:	000012ad 	andeq	r1, r0, sp, lsr #5
    263c:	01a31b79 			; <UNDEFINED> instruction: 0x01a31b79
    2640:	91020000 	mrsls	r0, (UNDEF: 2)
    2644:	1340026c 	movtne	r0, #620	; 0x26c
    2648:	30790000 	rsbscc	r0, r9, r0
    264c:	000001a3 	andeq	r0, r0, r3, lsr #3
    2650:	03689102 	cmneq	r8, #-2147483648	; 0x80000000
    2654:	000013e6 	andeq	r1, r0, r6, ror #7
    2658:	01aa107a 			; <UNDEFINED> instruction: 0x01aa107a
    265c:	91020000 	mrsls	r0, (UNDEF: 2)
    2660:	11640374 	smcne	16436	; 0x4034
    2664:	107b0000 	rsbsne	r0, fp, r0
    2668:	000001aa 	andeq	r0, r0, sl, lsr #3
    266c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2670:	0012bd13 	andseq	fp, r2, r3, lsl sp
    2674:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
    2678:	00013944 	andeq	r3, r1, r4, asr #18
    267c:	00000034 	andeq	r0, r0, r4, lsr r0
    2680:	03899c01 	orreq	r9, r9, #256	; 0x100
    2684:	ad020000 	stcge	0, cr0, [r2, #-0]
    2688:	75000012 	strvc	r0, [r0, #-18]	; 0xffffffee
    268c:	0001a324 	andeq	sl, r1, r4, lsr #6
    2690:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2694:	72696414 	rsbvc	r6, r9, #20, 8	; 0x14000000
    2698:	3a750100 	bcc	1d42aa0 <__bss_end+0x1d2cf60>
    269c:	00000066 	andeq	r0, r0, r6, rrx
    26a0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    26a4:	00134e15 	andseq	r4, r3, r5, lsl lr
    26a8:	06690100 	strbteq	r0, [r9], -r0, lsl #2
    26ac:	00013868 	andeq	r3, r1, r8, ror #16
    26b0:	000000dc 	ldrdeq	r0, [r0], -ip
    26b4:	ad029c01 	stcge	12, cr9, [r2, #-4]
    26b8:	69000012 	stmdbvs	r0, {r1, r4}
    26bc:	0001a323 	andeq	sl, r1, r3, lsr #6
    26c0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    26c4:	0013bb02 	andseq	fp, r3, r2, lsl #22
    26c8:	a3386900 	teqge	r8, #0, 18
    26cc:	02000001 	andeq	r0, r0, #1
    26d0:	e6036091 			; <UNDEFINED> instruction: 0xe6036091
    26d4:	6b000013 	blvs	2728 <_start-0x58d8>
    26d8:	00030106 	andeq	r0, r3, r6, lsl #2
    26dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    26e0:	6c617616 	stclvs	6, cr7, [r1], #-88	; 0xffffffa8
    26e4:	106d0100 	rsbne	r0, sp, r0, lsl #2
    26e8:	000001aa 	andeq	r0, r0, sl, lsr #3
    26ec:	03709102 	cmneq	r0, #-2147483648	; 0x80000000
    26f0:	0000146e 	andeq	r1, r0, lr, ror #8
    26f4:	0301066f 	movweq	r0, #5743	; 0x166f
    26f8:	91020000 	mrsls	r0, (UNDEF: 2)
    26fc:	e500006c 	str	r0, [r0, #-108]	; 0xffffff94
    2700:	04000002 	streq	r0, [r0], #-2
    2704:	000a9500 	andeq	r9, sl, r0, lsl #10
    2708:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    270c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2710:	00001508 	andeq	r1, r0, r8, lsl #10
    2714:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2718:	00013e40 	andeq	r3, r1, r0, asr #28
    271c:	000004ac 	andeq	r0, r0, ip, lsr #9
    2720:	000018a4 	andeq	r1, r0, r4, lsr #17
    2724:	00077f02 	andeq	r7, r7, r2, lsl #30
    2728:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    272c:	00000036 	andeq	r0, r0, r6, lsr r0
    2730:	00002503 	andeq	r2, r0, r3, lsl #10
    2734:	07040400 	streq	r0, [r4, -r0, lsl #8]
    2738:	00000631 	andeq	r0, r0, r1, lsr r6
    273c:	69050405 	stmdbvs	r5, {r0, r2, sl}
    2740:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    2744:	013d0508 	teqeq	sp, r8, lsl #10
    2748:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    274c:	00016b04 	andeq	r6, r1, r4, lsl #22
    2750:	06010400 	streq	r0, [r1], -r0, lsl #8
    2754:	00000640 	andeq	r0, r0, r0, asr #12
    2758:	3e080104 	adfcce	f0, f0, f4
    275c:	04000006 	streq	r0, [r0], #-6
    2760:	06ff0502 	ldrbteq	r0, [pc], r2, lsl #10
    2764:	02040000 	andeq	r0, r4, #0
    2768:	0000a907 	andeq	sl, r0, r7, lsl #18
    276c:	00670300 	rsbeq	r0, r7, r0, lsl #6
    2770:	04040000 	streq	r0, [r4], #-0
    2774:	00014205 	andeq	r4, r1, r5, lsl #4
    2778:	07040400 	streq	r0, [r4, -r0, lsl #8]
    277c:	0000062c 	andeq	r0, r0, ip, lsr #12
    2780:	27070804 	strcs	r0, [r7, -r4, lsl #16]
    2784:	06000006 	streq	r0, [r0], -r6
    2788:	59040704 	stmdbpl	r4, {r2, r8, r9, sl}
    278c:	04000000 	streq	r0, [r0], #-0
    2790:	06470801 	strbeq	r0, [r7], -r1, lsl #16
    2794:	5d080000 	stcpl	0, cr0, [r8, #-0]
    2798:	00000015 	andeq	r0, r0, r5, lsl r0
    279c:	0e5c0110 	mrceq	1, 2, r0, cr12, cr0, {0}
    27a0:	000000be 	strheq	r0, [r0], -lr
    27a4:	00156f09 	andseq	r6, r5, r9, lsl #30
    27a8:	175f0100 	ldrbne	r0, [pc, -r0, lsl #2]
    27ac:	000000c5 	andeq	r0, r0, r5, asr #1
    27b0:	00156809 	andseq	r6, r5, r9, lsl #16
    27b4:	10630100 	rsbne	r0, r3, r0, lsl #2
    27b8:	000000ca 	andeq	r0, r0, sl, asr #1
    27bc:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    27c0:	00000170 	andeq	r0, r0, r0, ror r1
    27c4:	0000be0a 	andeq	fp, r0, sl, lsl #28
    27c8:	00590b00 	subseq	r0, r9, r0, lsl #22
    27cc:	00db0000 	sbcseq	r0, fp, r0
    27d0:	360c0000 	strcc	r0, [ip], -r0
    27d4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    27d8:	810d000f 	tsthi	sp, pc
    27dc:	01000015 	tsteq	r0, r5, lsl r0
    27e0:	00970364 	addseq	r0, r7, r4, ror #6
    27e4:	03050000 	movweq	r0, #20480	; 0x5000
    27e8:	00014b30 	andeq	r4, r1, r0, lsr fp
    27ec:	0014c20e 	andseq	ip, r4, lr, lsl #4
    27f0:	68010800 	stmdavs	r1, {fp}
    27f4:	00011510 	andeq	r1, r1, r0, lsl r5
    27f8:	16300f00 	ldrtne	r0, [r0], -r0, lsl #30
    27fc:	6a010000 	bvs	42804 <__bss_end+0x2ccc4>
    2800:	00011517 	andeq	r1, r1, r7, lsl r5
    2804:	760f0000 	strvc	r0, [pc], -r0
    2808:	01000015 	tsteq	r0, r5, lsl r0
    280c:	0025096b 	eoreq	r0, r5, fp, ror #18
    2810:	00040000 	andeq	r0, r4, r0
    2814:	00ed0407 	rsceq	r0, sp, r7, lsl #8
    2818:	e2020000 	and	r0, r2, #0
    281c:	01000015 	tsteq	r0, r5, lsl r0
    2820:	00ed036c 	rsceq	r0, sp, ip, ror #6
    2824:	cb0d0000 	blgt	34282c <__bss_end+0x32ccec>
    2828:	01000015 	tsteq	r0, r5, lsl r0
    282c:	006e1d82 	rsbeq	r1, lr, r2, lsl #27
    2830:	03050000 	movweq	r0, #20480	; 0x5000
    2834:	00014430 	andeq	r4, r1, r0, lsr r4
    2838:	00159d0d 	andseq	r9, r5, sp, lsl #26
    283c:	15850100 	strne	r0, [r5, #256]	; 0x100
    2840:	00000031 	andeq	r0, r0, r1, lsr r0
    2844:	44340305 	ldrtmi	r0, [r4], #-773	; 0xfffffcfb
    2848:	db0d0001 	blle	342854 <__bss_end+0x32cd14>
    284c:	01000015 	tsteq	r0, r5, lsl r0
    2850:	011b1388 	tsteq	fp, r8, lsl #7
    2854:	03050000 	movweq	r0, #20480	; 0x5000
    2858:	00015b30 	andeq	r5, r1, r0, lsr fp
    285c:	0015870d 	andseq	r8, r5, sp, lsl #14
    2860:	1c880100 	stfnes	f0, [r8], {0}
    2864:	0000016f 	andeq	r0, r0, pc, ror #2
    2868:	5b380305 	blpl	e03484 <__bss_end+0xded944>
    286c:	04070001 	streq	r0, [r7], #-1
    2870:	0000011b 	andeq	r0, r0, fp, lsl r1
    2874:	00160d0d 	andseq	r0, r6, sp, lsl #26
    2878:	0f8c0100 	svceq	0x008c0100
    287c:	00000025 	andeq	r0, r0, r5, lsr #32
    2880:	47580305 	ldrbmi	r0, [r8, -r5, lsl #6]
    2884:	ed100001 	ldc	0, cr0, [r0, #-4]
    2888:	01000015 	tsteq	r0, r5, lsl r0
    288c:	00250891 	mlaeq	r5, r1, r8, r0
    2890:	03050000 	movweq	r0, #20480	; 0x5000
    2894:	00015b3c 	andeq	r5, r1, ip, lsr fp
    2898:	00149211 	andseq	r9, r4, r1, lsl r2
    289c:	01340100 	teqeq	r4, r0, lsl #2
    28a0:	0141980d 	cmpeq	r1, sp, lsl #16
    28a4:	00015400 	andeq	r5, r1, r0, lsl #8
    28a8:	e19c0100 	orrs	r0, ip, r0, lsl #2
    28ac:	12000001 	andne	r0, r0, #1
    28b0:	0000164b 	andeq	r1, r0, fp, asr #12
    28b4:	35013401 	strcc	r3, [r1, #-1025]	; 0xfffffbff
    28b8:	0000016f 	andeq	r0, r0, pc, ror #2
    28bc:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    28c0:	000006f4 	strdeq	r0, [r0], -r4
    28c4:	0d013601 	stceq	6, cr3, [r1, #-4]
    28c8:	0000016f 	andeq	r0, r0, pc, ror #2
    28cc:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    28d0:	00637570 	rsbeq	r7, r3, r0, ror r5
    28d4:	10013701 	andne	r3, r1, r1, lsl #14
    28d8:	0000008a 	andeq	r0, r0, sl, lsl #1
    28dc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    28e0:	0014cf11 	andseq	ip, r4, r1, lsl pc
    28e4:	01130100 	tsteq	r3, r0, lsl #2
    28e8:	0140c00d 	cmpeq	r0, sp
    28ec:	0000d800 	andeq	sp, r0, r0, lsl #16
    28f0:	199c0100 	ldmibne	ip, {r8}
    28f4:	13000002 	movwne	r0, #2
    28f8:	000014f7 	strdeq	r1, [r0], -r7
    28fc:	0d011501 	cfstr32eq	mvfx1, [r1, #-4]
    2900:	0000016f 	andeq	r0, r0, pc, ror #2
    2904:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    2908:	00001640 	andeq	r1, r0, r0, asr #12
    290c:	10011601 	andne	r1, r1, r1, lsl #12
    2910:	0000008a 	andeq	r0, r0, sl, lsl #1
    2914:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2918:	0015b515 	andseq	fp, r5, r5, lsl r5
    291c:	010d0100 	mrseq	r0, (UNDEF: 29)
    2920:	0140a806 	cmpeq	r0, r6, lsl #16
    2924:	00001800 	andeq	r1, r0, r0, lsl #16
    2928:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    292c:	000014ad 	andeq	r1, r0, sp, lsr #9
    2930:	08010701 	stmdaeq	r1, {r0, r8, r9, sl}
    2934:	00000025 	andeq	r0, r0, r5, lsr #32
    2938:	00014084 	andeq	r4, r1, r4, lsl #1
    293c:	00000024 	andeq	r0, r0, r4, lsr #32
    2940:	03179c01 	tsteq	r7, #256	; 0x100
    2944:	01000016 	tsteq	r0, r6, lsl r0
    2948:	400806ee 	andmi	r0, r8, lr, ror #13
    294c:	007c0001 	rsbseq	r0, ip, r1
    2950:	9c010000 	stcls	0, cr0, [r1], {-0}
    2954:	00000286 	andeq	r0, r0, r6, lsl #5
    2958:	00767018 	rsbseq	r7, r6, r8, lsl r0
    295c:	8817ee01 	ldmdahi	r7, {r0, r9, sl, fp, sp, lr, pc}
    2960:	02000000 	andeq	r0, r0, #0
    2964:	70196c91 	mulsvc	r9, r1, ip
    2968:	01006375 	tsteq	r0, r5, ror r3
    296c:	008a10f0 	strdeq	r1, [sl], r0
    2970:	91020000 	mrsls	r0, (UNDEF: 2)
    2974:	14e30d74 	strbtne	r0, [r3], #3444	; 0xd74
    2978:	f1010000 	setend	le
    297c:	00016f0d 	andeq	r6, r1, sp, lsl #30
    2980:	70910200 	addsvc	r0, r1, r0, lsl #4
    2984:	14ea1a00 	strbtne	r1, [sl], #2560	; 0xa00
    2988:	92010000 	andls	r0, r1, #0
    298c:	00008807 	andeq	r8, r0, r7, lsl #16
    2990:	013e4000 	teqeq	lr, r0
    2994:	0001c800 	andeq	ip, r1, r0, lsl #16
    2998:	1b9c0100 	blne	fe702da0 <_estack+0xf66f2da0>
    299c:	000015f7 	strdeq	r1, [r0], -r7
    29a0:	251c9201 	ldrcs	r9, [ip, #-513]	; 0xfffffdff
    29a4:	02000000 	andeq	r0, r0, #0
    29a8:	db0d6491 	blle	35bbf4 <__bss_end+0x3460b4>
    29ac:	01000014 	tsteq	r0, r4, lsl r0
    29b0:	016f0d94 			; <UNDEFINED> instruction: 0x016f0d94
    29b4:	91020000 	mrsls	r0, (UNDEF: 2)
    29b8:	158d0d74 	strne	r0, [sp, #3444]	; 0xd74
    29bc:	94010000 	strls	r0, [r1], #-0
    29c0:	00016f17 	andeq	r6, r1, r7, lsl pc
    29c4:	70910200 	addsvc	r0, r1, r0, lsl #4
    29c8:	0016210d 	andseq	r2, r6, sp, lsl #2
    29cc:	29940100 	ldmibcs	r4, {r8}
    29d0:	0000016f 	andeq	r0, r0, pc, ror #2
    29d4:	0d689102 	stfeqp	f1, [r8, #-8]!
    29d8:	000015ac 	andeq	r1, r0, ip, lsr #11
    29dc:	88079501 	stmdahi	r7, {r0, r8, sl, ip, pc}
    29e0:	02000000 	andeq	r0, r0, #0
    29e4:	00006c91 	muleq	r0, r1, ip
    29e8:	000000d7 	ldrdeq	r0, [r0], -r7
    29ec:	0c520004 	mrrceq	0, 0, r0, r2, cr4
    29f0:	01040000 	mrseq	r0, (UNDEF: 4)
    29f4:	00000037 	andeq	r0, r0, r7, lsr r0
    29f8:	00166c0c 	andseq	r6, r6, ip, lsl #24
    29fc:	0001b000 	andeq	fp, r1, r0
    2a00:	01430400 	cmpeq	r3, r0, lsl #8
    2a04:	00011800 	andeq	r1, r1, r0, lsl #16
    2a08:	001acf00 	andseq	ip, sl, r0, lsl #30
    2a0c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2a10:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2a14:	31070403 	tstcc	r7, r3, lsl #8
    2a18:	03000006 	movweq	r0, #6
    2a1c:	013d0508 	teqeq	sp, r8, lsl #10
    2a20:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2a24:	00016b04 	andeq	r6, r1, r4, lsl #22
    2a28:	03040400 	movweq	r0, #17408	; 0x4400
    2a2c:	062c0704 	strteq	r0, [ip], -r4, lsl #14
    2a30:	04030000 	streq	r0, [r3], #-0
    2a34:	00014205 	andeq	r4, r1, r5, lsl #4
    2a38:	06010300 	streq	r0, [r1], -r0, lsl #6
    2a3c:	00000640 	andeq	r0, r0, r0, asr #12
    2a40:	a9070203 	stmdbge	r7, {r0, r1, r9}
    2a44:	03000000 	movweq	r0, #0
    2a48:	063e0801 	ldrteq	r0, [lr], -r1, lsl #16
    2a4c:	61050000 	mrsvs	r0, (UNDEF: 5)
    2a50:	01000016 	tsteq	r0, r6, lsl r0
    2a54:	43840666 	orrmi	r0, r4, #106954752	; 0x6600000
    2a58:	00980001 	addseq	r0, r8, r1
    2a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a60:	00165b06 	andseq	r5, r6, r6, lsl #22
    2a64:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
    2a68:	00014340 	andeq	r4, r1, r0, asr #6
    2a6c:	00000044 	andeq	r0, r0, r4, asr #32
    2a70:	00ab9c01 	adceq	r9, fp, r1, lsl #24
    2a74:	30070000 	andcc	r0, r7, r0
    2a78:	01000000 	mrseq	r0, (UNDEF: 0)
    2a7c:	00411254 	subeq	r1, r1, r4, asr r2
    2a80:	91020000 	mrsls	r0, (UNDEF: 2)
    2a84:	0069086c 	rsbeq	r0, r9, ip, ror #16
    2a88:	25065601 	strcs	r5, [r6, #-1537]	; 0xfffff9ff
    2a8c:	02000000 	andeq	r0, r0, #0
    2a90:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    2a94:	00001666 	andeq	r1, r0, r6, ror #12
    2a98:	04064a01 	streq	r4, [r6], #-2561	; 0xfffff5ff
    2a9c:	3c000143 	stfccs	f0, [r0], {67}	; 0x43
    2aa0:	01000000 	mrseq	r0, (UNDEF: 0)
    2aa4:	0030079c 	mlaseq	r0, ip, r7, r0
    2aa8:	4a010000 	bmi	42ab0 <__bss_end+0x2cf70>
    2aac:	00004112 	andeq	r4, r0, r2, lsl r1
    2ab0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ab4:	01006908 	tsteq	r0, r8, lsl #18
    2ab8:	0025064c 	eoreq	r0, r5, ip, asr #12
    2abc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ac0:	Address 0x0000000000002ac0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <__bss_end+0x2aa56c>
  18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	00160400 	andseq	r0, r6, r0, lsl #8
  2c:	0b3a0e03 	bleq	e83840 <__bss_end+0xe6dd00>
  30:	0b390b3b 	bleq	e42d24 <__bss_end+0xe2d1e4>
  34:	00001349 	andeq	r1, r0, r9, asr #6
  38:	0b000f05 	bleq	3c54 <_start-0x43ac>
  3c:	0013490b 	andseq	r4, r3, fp, lsl #18
  40:	01150600 	tsteq	r5, r0, lsl #12
  44:	13011927 	movwne	r1, #6439	; 0x1927
  48:	05070000 	streq	r0, [r7, #-0]
  4c:	00134900 	andseq	r4, r3, r0, lsl #18
  50:	000f0800 	andeq	r0, pc, r0, lsl #16
  54:	00000b0b 	andeq	r0, r0, fp, lsl #22
  58:	03011309 	movweq	r1, #4873	; 0x1309
  5c:	3a0b0b0e 	bcc	2c2c9c <__bss_end+0x2ad15c>
  60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  64:	0013010b 	andseq	r0, r3, fp, lsl #2
  68:	000d0a00 	andeq	r0, sp, r0, lsl #20
  6c:	0b3a0803 	bleq	e82080 <__bss_end+0xe6c540>
  70:	0b390b3b 	bleq	e42d64 <__bss_end+0xe2d224>
  74:	0b381349 	bleq	e04da0 <__bss_end+0xdef260>
  78:	350b0000 	strcc	r0, [fp, #-0]
  7c:	00134900 	andseq	r4, r3, r0, lsl #18
  80:	00340c00 	eorseq	r0, r4, r0, lsl #24
  84:	0b3a0e03 	bleq	e83898 <__bss_end+0xe6dd58>
  88:	0b390b3b 	bleq	e42d7c <__bss_end+0xe2d23c>
  8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  90:	260d0000 	strcs	r0, [sp], -r0
  94:	00134900 	andseq	r4, r3, r0, lsl #18
  98:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  9c:	0b3a0e03 	bleq	e838b0 <__bss_end+0xe6dd70>
  a0:	0b390b3b 	bleq	e42d94 <__bss_end+0xe2d254>
  a4:	01111927 	tsteq	r1, r7, lsr #18
  a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
  b0:	0f000013 	svceq	0x00000013
  b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  b8:	0b3a0e03 	bleq	e838cc <__bss_end+0xe6dd8c>
  bc:	0b390b3b 	bleq	e42db0 <__bss_end+0xe2d270>
  c0:	01111927 	tsteq	r1, r7, lsr #18
  c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
  cc:	10000013 	andne	r0, r0, r3, lsl r0
  d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  d4:	0b3b0b3a 	bleq	ec2dc4 <__bss_end+0xead284>
  d8:	13490b39 	movtne	r0, #39737	; 0x9b39
  dc:	00001802 	andeq	r1, r0, r2, lsl #16
  e0:	3f002e11 	svccc	0x00002e11
  e4:	3a0e0319 	bcc	380d50 <__bss_end+0x36b210>
  e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  ec:	1119270b 	tstne	r9, fp, lsl #14
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  f8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
  fc:	03193f00 	tsteq	r9, #0, 30
 100:	3b0b3a0e 	blcc	2ce940 <__bss_end+0x2b8e00>
 104:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 108:	11134919 	tstne	r3, r9, lsl r9
 10c:	40061201 	andmi	r1, r6, r1, lsl #4
 110:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 114:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <__bss_end+0x2b8e1c>
 120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 124:	11134919 	tstne	r3, r9, lsl r9
 128:	40061201 	andmi	r1, r6, r1, lsl #4
 12c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 130:	01000000 	mrseq	r0, (UNDEF: 0)
 134:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 138:	0e030b13 	vmoveq.32	d3[0], r0
 13c:	01110e1b 	tsteq	r1, fp, lsl lr
 140:	17100612 			; <UNDEFINED> instruction: 0x17100612
 144:	24020000 	strcs	r0, [r2], #-0
 148:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 14c:	0008030b 	andeq	r0, r8, fp, lsl #6
 150:	00240300 	eoreq	r0, r4, r0, lsl #6
 154:	0b3e0b0b 	bleq	f82d88 <__bss_end+0xf6d248>
 158:	00000e03 	andeq	r0, r0, r3, lsl #28
 15c:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
 160:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 164:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 168:	0b3b0b3a 	bleq	ec2e58 <__bss_end+0xead318>
 16c:	13490b39 	movtne	r0, #39737	; 0x9b39
 170:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 174:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 178:	03193f00 	tsteq	r9, #0, 30
 17c:	3b0b3a0e 	blcc	2ce9bc <__bss_end+0x2b8e7c>
 180:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 188:	97184006 	ldrls	r4, [r8, -r6]
 18c:	00001942 	andeq	r1, r0, r2, asr #18
 190:	3f012e07 	svccc	0x00012e07
 194:	3a0e0319 	bcc	380e00 <__bss_end+0x36b2c0>
 198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 19c:	1119270b 	tstne	r9, fp, lsl #14
 1a0:	40061201 	andmi	r1, r6, r1, lsl #4
 1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a8:	00001301 	andeq	r1, r0, r1, lsl #6
 1ac:	11010b08 	tstne	r1, r8, lsl #22
 1b0:	01061201 	tsteq	r6, r1, lsl #4
 1b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 1b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1bc:	0b3b0b3a 	bleq	ec2eac <__bss_end+0xead36c>
 1c0:	13490b39 	movtne	r0, #39737	; 0x9b39
 1c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 1c8:	0b0a0000 	bleq	2801d0 <__bss_end+0x26a690>
 1cc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1d0:	0b000006 	bleq	1f0 <_start-0x7e10>
 1d4:	0b0b000f 	bleq	2c0218 <__bss_end+0x2aa6d8>
 1d8:	00001349 	andeq	r1, r0, r9, asr #6
 1dc:	0000350c 	andeq	r3, r0, ip, lsl #10
 1e0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1e8:	0b3b0b3a 	bleq	ec2ed8 <__bss_end+0xead398>
 1ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f8:	00130119 	andseq	r0, r3, r9, lsl r1
 1fc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 204:	0b3b0b3a 	bleq	ec2ef4 <__bss_end+0xead3b4>
 208:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 214:	00000019 	andeq	r0, r0, r9, lsl r0
 218:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 21c:	030b130e 	movweq	r1, #45838	; 0xb30e
 220:	110e1b0e 	tstne	lr, lr, lsl #22
 224:	10061201 	andne	r1, r6, r1, lsl #4
 228:	02000017 	andeq	r0, r0, #23
 22c:	0b0b0024 	bleq	2c02c4 <__bss_end+0x2aa784>
 230:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 234:	24030000 	strcs	r0, [r3], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	000e030b 	andeq	r0, lr, fp, lsl #6
 240:	000f0400 	andeq	r0, pc, r0, lsl #8
 244:	00000b0b 	andeq	r0, r0, fp, lsl #22
 248:	03001605 	movweq	r1, #1541	; 0x605
 24c:	3b0b3a0e 	blcc	2cea8c <__bss_end+0x2b8f4c>
 250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 254:	06000013 			; <UNDEFINED> instruction: 0x06000013
 258:	13490035 	movtne	r0, #36917	; 0x9035
 25c:	13070000 	movwne	r0, #28672	; 0x7000
 260:	0b0e0301 	bleq	380e6c <__bss_end+0x36b32c>
 264:	3b0b3a0b 	blcc	2cea98 <__bss_end+0x2b8f58>
 268:	010b390b 	tsteq	fp, fp, lsl #18
 26c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 274:	0b3b0b3a 	bleq	ec2f64 <__bss_end+0xead424>
 278:	13490b39 	movtne	r0, #39737	; 0x9b39
 27c:	00000b38 	andeq	r0, r0, r8, lsr fp
 280:	0b000f09 	bleq	3eac <_start-0x4154>
 284:	0013490b 	andseq	r4, r3, fp, lsl #18
 288:	00260a00 	eoreq	r0, r6, r0, lsl #20
 28c:	00001349 	andeq	r1, r0, r9, asr #6
 290:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 294:	00130119 	andseq	r0, r3, r9, lsl r1
 298:	00050c00 	andeq	r0, r5, r0, lsl #24
 29c:	00001349 	andeq	r1, r0, r9, asr #6
 2a0:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 2a4:	00130113 	andseq	r0, r3, r3, lsl r1
 2a8:	00210e00 	eoreq	r0, r1, r0, lsl #28
 2ac:	0b2f1349 	bleq	bc4fd8 <__bss_end+0xbaf498>
 2b0:	340f0000 	strcc	r0, [pc], #-0	; 2b8 <_start-0x7d48>
 2b4:	3a0e0300 	bcc	380ebc <__bss_end+0x36b37c>
 2b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2c0:	10000018 	andne	r0, r0, r8, lsl r0
 2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2c8:	0b3b0b3a 	bleq	ec2fb8 <__bss_end+0xead478>
 2cc:	13490b39 	movtne	r0, #39737	; 0x9b39
 2d0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 2d4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 2d8:	03193f01 	tsteq	r9, #1, 30
 2dc:	3b0b3a0e 	blcc	2ceb1c <__bss_end+0x2b8fdc>
 2e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 2e4:	11134919 	tstne	r3, r9, lsl r9
 2e8:	40061201 	andmi	r1, r6, r1, lsl #4
 2ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2f0:	00001301 	andeq	r1, r0, r1, lsl #6
 2f4:	03000512 	movweq	r0, #1298	; 0x512
 2f8:	3b0b3a0e 	blcc	2ceb38 <__bss_end+0x2b8ff8>
 2fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 300:	00180213 	andseq	r0, r8, r3, lsl r2
 304:	00341300 	eorseq	r1, r4, r0, lsl #6
 308:	0b3a0e03 	bleq	e83b1c <__bss_end+0xe6dfdc>
 30c:	0b39053b 	bleq	e41800 <__bss_end+0xe2bcc0>
 310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 314:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 318:	3a0e0301 	bcc	380f24 <__bss_end+0x36b3e4>
 31c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 320:	1119270b 	tstne	r9, fp, lsl #14
 324:	40061201 	andmi	r1, r6, r1, lsl #4
 328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 32c:	00001301 	andeq	r1, r0, r1, lsl #6
 330:	3f012e15 	svccc	0x00012e15
 334:	3a0e0319 	bcc	380fa0 <__bss_end+0x36b460>
 338:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	1119270b 	tstne	r9, fp, lsl #14
 340:	40061201 	andmi	r1, r6, r1, lsl #4
 344:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 348:	00001301 	andeq	r1, r0, r1, lsl #6
 34c:	11010b16 	tstne	r1, r6, lsl fp
 350:	00061201 	andeq	r1, r6, r1, lsl #4
 354:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 358:	0b3a0e03 	bleq	e83b6c <__bss_end+0xe6e02c>
 35c:	0b390b3b 	bleq	e43050 <__bss_end+0xe2d510>
 360:	01111927 	tsteq	r1, r7, lsr #18
 364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 368:	01194296 			; <UNDEFINED> instruction: 0x01194296
 36c:	18000013 	stmdane	r0, {r0, r1, r4}
 370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 374:	0b3a0e03 	bleq	e83b88 <__bss_end+0xe6e048>
 378:	0b390b3b 	bleq	e4306c <__bss_end+0xe2d52c>
 37c:	01111927 	tsteq	r1, r7, lsr #18
 380:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 384:	01194296 			; <UNDEFINED> instruction: 0x01194296
 388:	19000013 	stmdbne	r0, {r0, r1, r4}
 38c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 390:	0b3b0b3a 	bleq	ec3080 <__bss_end+0xead540>
 394:	13490b39 	movtne	r0, #39737	; 0x9b39
 398:	00001802 	andeq	r1, r0, r2, lsl #16
 39c:	3f012e1a 	svccc	0x00012e1a
 3a0:	3a0e0319 	bcc	38100c <__bss_end+0x36b4cc>
 3a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 3ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3b0:	96184006 	ldrls	r4, [r8], -r6
 3b4:	00001942 	andeq	r1, r0, r2, asr #18
 3b8:	01110100 	tsteq	r1, r0, lsl #2
 3bc:	0b130e25 	bleq	4c3c58 <__bss_end+0x4ae118>
 3c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3c8:	00001710 	andeq	r1, r0, r0, lsl r7
 3cc:	0b002402 	bleq	93dc <__module_entries_end+0x1338>
 3d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3d4:	0300000e 	movweq	r0, #14
 3d8:	0b0b0024 	bleq	2c0470 <__bss_end+0x2aa930>
 3dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3e0:	35040000 	strcc	r0, [r4, #-0]
 3e4:	00134900 	andseq	r4, r3, r0, lsl #18
 3e8:	000f0500 	andeq	r0, pc, r0, lsl #10
 3ec:	00000b0b 	andeq	r0, r0, fp, lsl #22
 3f0:	03001606 	movweq	r1, #1542	; 0x606
 3f4:	3b0b3a0e 	blcc	2cec34 <__bss_end+0x2b90f4>
 3f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3fc:	07000013 	smladeq	r0, r3, r0, r0
 400:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 404:	0b3a0b0b 	bleq	e83038 <__bss_end+0xe6d4f8>
 408:	0b390b3b 	bleq	e430fc <__bss_end+0xe2d5bc>
 40c:	00001301 	andeq	r1, r0, r1, lsl #6
 410:	03000d08 	movweq	r0, #3336	; 0xd08
 414:	3b0b3a0e 	blcc	2cec54 <__bss_end+0x2b9114>
 418:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 41c:	000b3813 	andeq	r3, fp, r3, lsl r8
 420:	000f0900 	andeq	r0, pc, r0, lsl #18
 424:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 428:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 42c:	03193f01 	tsteq	r9, #1, 30
 430:	3b0b3a0e 	blcc	2cec70 <__bss_end+0x2b9130>
 434:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 438:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 43c:	97184006 	ldrls	r4, [r8, -r6]
 440:	13011942 	movwne	r1, #6466	; 0x1942
 444:	050b0000 	streq	r0, [fp, #-0]
 448:	3a0e0300 	bcc	381050 <__bss_end+0x36b510>
 44c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 450:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 454:	0c000018 	stceq	0, cr0, [r0], {24}
 458:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 45c:	0b3b0b3a 	bleq	ec314c <__bss_end+0xead60c>
 460:	13490b39 	movtne	r0, #39737	; 0x9b39
 464:	00001802 	andeq	r1, r0, r2, lsl #16
 468:	3f012e0d 	svccc	0x00012e0d
 46c:	3a0e0319 	bcc	3810d8 <__bss_end+0x36b598>
 470:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 474:	1119270b 	tstne	r9, fp, lsl #14
 478:	40061201 	andmi	r1, r6, r1, lsl #4
 47c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 480:	01000000 	mrseq	r0, (UNDEF: 0)
 484:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 488:	0e030b13 	vmoveq.32	d3[0], r0
 48c:	01110e1b 	tsteq	r1, fp, lsl lr
 490:	17100612 			; <UNDEFINED> instruction: 0x17100612
 494:	16020000 	strne	r0, [r2], -r0
 498:	3a0e0300 	bcc	3810a0 <__bss_end+0x36b560>
 49c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4a0:	0013490b 	andseq	r4, r3, fp, lsl #18
 4a4:	00240300 	eoreq	r0, r4, r0, lsl #6
 4a8:	0b3e0b0b 	bleq	f830dc <__bss_end+0xf6d59c>
 4ac:	00000e03 	andeq	r0, r0, r3, lsl #28
 4b0:	0b002404 	bleq	94c8 <__module_entries_end+0x1424>
 4b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4b8:	05000008 	streq	r0, [r0, #-8]
 4bc:	13490035 	movtne	r0, #36917	; 0x9035
 4c0:	0f060000 	svceq	0x00060000
 4c4:	000b0b00 	andeq	r0, fp, r0, lsl #22
 4c8:	00260700 	eoreq	r0, r6, r0, lsl #14
 4cc:	00001349 	andeq	r1, r0, r9, asr #6
 4d0:	0b000f08 	bleq	40f8 <_start-0x3f08>
 4d4:	0013490b 	andseq	r4, r3, fp, lsl #18
 4d8:	00260900 	eoreq	r0, r6, r0, lsl #18
 4dc:	130a0000 	movwne	r0, #40960	; 0xa000
 4e0:	0b0e0301 	bleq	3810ec <__bss_end+0x36b5ac>
 4e4:	3b0b3a0b 	blcc	2ced18 <__bss_end+0x2b91d8>
 4e8:	010b390b 	tsteq	fp, fp, lsl #18
 4ec:	0b000013 	bleq	540 <_start-0x7ac0>
 4f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4f4:	0b3b0b3a 	bleq	ec31e4 <__bss_end+0xead6a4>
 4f8:	13490b39 	movtne	r0, #39737	; 0x9b39
 4fc:	00000b38 	andeq	r0, r0, r8, lsr fp
 500:	3f012e0c 	svccc	0x00012e0c
 504:	3a0e0319 	bcc	381170 <__bss_end+0x36b630>
 508:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 50c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 510:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 514:	97184006 	ldrls	r4, [r8, -r6]
 518:	13011942 	movwne	r1, #6466	; 0x1942
 51c:	050d0000 	streq	r0, [sp, #-0]
 520:	3a0e0300 	bcc	381128 <__bss_end+0x36b5e8>
 524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 52c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 530:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 534:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 538:	13490b39 	movtne	r0, #39737	; 0x9b39
 53c:	00001802 	andeq	r1, r0, r2, lsl #16
 540:	03012e0f 	movweq	r2, #7695	; 0x1e0f
 544:	3b0b3a0e 	blcc	2ced84 <__bss_end+0x2b9244>
 548:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 54c:	11134919 	tstne	r3, r9, lsl r9
 550:	40061201 	andmi	r1, r6, r1, lsl #4
 554:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 558:	00001301 	andeq	r1, r0, r1, lsl #6
 55c:	03012e10 	movweq	r2, #7696	; 0x1e10
 560:	3b0b3a0e 	blcc	2ceda0 <__bss_end+0x2b9260>
 564:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 568:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 56c:	96184006 	ldrls	r4, [r8], -r6
 570:	13011942 	movwne	r1, #6466	; 0x1942
 574:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 578:	03193f01 	tsteq	r9, #1, 30
 57c:	3b0b3a0e 	blcc	2cedbc <__bss_end+0x2b927c>
 580:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 584:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 588:	96184006 	ldrls	r4, [r8], -r6
 58c:	13011942 	movwne	r1, #6466	; 0x1942
 590:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 594:	03193f01 	tsteq	r9, #1, 30
 598:	3b0b3a0e 	blcc	2cedd8 <__bss_end+0x2b9298>
 59c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 5a0:	11134919 	tstne	r3, r9, lsl r9
 5a4:	40061201 	andmi	r1, r6, r1, lsl #4
 5a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5ac:	00001301 	andeq	r1, r0, r1, lsl #6
 5b0:	3f012e13 	svccc	0x00012e13
 5b4:	3a0e0319 	bcc	381220 <__bss_end+0x36b6e0>
 5b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 5c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 5c4:	96184006 	ldrls	r4, [r8], -r6
 5c8:	00001942 	andeq	r1, r0, r2, asr #18
 5cc:	01110100 	tsteq	r1, r0, lsl #2
 5d0:	0b130e25 	bleq	4c3e6c <__bss_end+0x4ae32c>
 5d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5dc:	00001710 	andeq	r1, r0, r0, lsl r7
 5e0:	0b002402 	bleq	95f0 <__module_entries_end+0x154c>
 5e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 5e8:	0300000e 	movweq	r0, #14
 5ec:	13490026 	movtne	r0, #36902	; 0x9026
 5f0:	35040000 	strcc	r0, [r4, #-0]
 5f4:	00134900 	andseq	r4, r3, r0, lsl #18
 5f8:	00240500 	eoreq	r0, r4, r0, lsl #10
 5fc:	0b3e0b0b 	bleq	f83230 <__bss_end+0xf6d6f0>
 600:	00000803 	andeq	r0, r0, r3, lsl #16
 604:	03001606 	movweq	r1, #1542	; 0x606
 608:	3b0b3a0e 	blcc	2cee48 <__bss_end+0x2b9308>
 60c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 610:	07000013 	smladeq	r0, r3, r0, r0
 614:	0b0b000f 	bleq	2c0658 <__bss_end+0x2aab18>
 618:	0f080000 	svceq	0x00080000
 61c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 620:	09000013 	stmdbeq	r0, {r0, r1, r4}
 624:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 628:	00001301 	andeq	r1, r0, r1, lsl #6
 62c:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
 630:	0b000013 	bleq	684 <_start-0x797c>
 634:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 638:	13011349 	movwne	r1, #4937	; 0x1349
 63c:	130c0000 	movwne	r0, #49152	; 0xc000
 640:	0b0e0301 	bleq	38124c <__bss_end+0x36b70c>
 644:	3b0b3a0b 	blcc	2cee78 <__bss_end+0x2b9338>
 648:	010b390b 	tsteq	fp, fp, lsl #18
 64c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 650:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 654:	0b3b0b3a 	bleq	ec3344 <__bss_end+0xead804>
 658:	13490b39 	movtne	r0, #39737	; 0x9b39
 65c:	00000b38 	andeq	r0, r0, r8, lsr fp
 660:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
 664:	00130113 	andseq	r0, r3, r3, lsl r1
 668:	00210f00 	eoreq	r0, r1, r0, lsl #30
 66c:	0b2f1349 	bleq	bc5398 <__bss_end+0xbaf858>
 670:	34100000 	ldrcc	r0, [r0], #-0
 674:	3a0e0300 	bcc	38127c <__bss_end+0x36b73c>
 678:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 67c:	3f13490b 	svccc	0x0013490b
 680:	00180219 	andseq	r0, r8, r9, lsl r2
 684:	00341100 	eorseq	r1, r4, r0, lsl #2
 688:	0b3a0e03 	bleq	e83e9c <__bss_end+0xe6e35c>
 68c:	0b390b3b 	bleq	e43380 <__bss_end+0xe2d840>
 690:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 694:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 698:	3a0e0301 	bcc	3812a4 <__bss_end+0x36b764>
 69c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6a0:	1119270b 	tstne	r9, fp, lsl #14
 6a4:	40061201 	andmi	r1, r6, r1, lsl #4
 6a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6ac:	00001301 	andeq	r1, r0, r1, lsl #6
 6b0:	03000513 	movweq	r0, #1299	; 0x513
 6b4:	3b0b3a0e 	blcc	2ceef4 <__bss_end+0x2b93b4>
 6b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 6bc:	00180213 	andseq	r0, r8, r3, lsl r2
 6c0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 6c4:	0b3a0e03 	bleq	e83ed8 <__bss_end+0xe6e398>
 6c8:	0b39053b 	bleq	e41bbc <__bss_end+0xe2c07c>
 6cc:	13491927 	movtne	r1, #39207	; 0x9927
 6d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6d8:	00130119 	andseq	r0, r3, r9, lsl r1
 6dc:	00341500 	eorseq	r1, r4, r0, lsl #10
 6e0:	0b3a0e03 	bleq	e83ef4 <__bss_end+0xe6e3b4>
 6e4:	0b39053b 	bleq	e41bd8 <__bss_end+0xe2c098>
 6e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6ec:	0b160000 	bleq	5806f4 <__bss_end+0x56abb4>
 6f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 6f4:	17000006 	strne	r0, [r0, -r6]
 6f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 6fc:	0b3a0e03 	bleq	e83f10 <__bss_end+0xe6e3d0>
 700:	0b39053b 	bleq	e41bf4 <__bss_end+0xe2c0b4>
 704:	01111927 	tsteq	r1, r7, lsr #18
 708:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 70c:	00194297 	mulseq	r9, r7, r2
 710:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 714:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 71c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 720:	01111349 	tsteq	r1, r9, asr #6
 724:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 728:	01194296 			; <UNDEFINED> instruction: 0x01194296
 72c:	19000013 	stmdbne	r0, {r0, r1, r4}
 730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 734:	0b3a0e03 	bleq	e83f48 <__bss_end+0xe6e408>
 738:	0b39053b 	bleq	e41c2c <__bss_end+0xe2c0ec>
 73c:	01111927 	tsteq	r1, r7, lsr #18
 740:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 744:	01194297 			; <UNDEFINED> instruction: 0x01194297
 748:	1a000013 	bne	79c <_start-0x7864>
 74c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 750:	0b3a0e03 	bleq	e83f64 <__bss_end+0xe6e424>
 754:	0b39053b 	bleq	e41c48 <__bss_end+0xe2c108>
 758:	01111927 	tsteq	r1, r7, lsr #18
 75c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 760:	01194296 			; <UNDEFINED> instruction: 0x01194296
 764:	1b000013 	blne	7b8 <_start-0x7848>
 768:	0111010b 	tsteq	r1, fp, lsl #2
 76c:	13010612 	movwne	r0, #5650	; 0x1612
 770:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 774:	03193f00 	tsteq	r9, #0, 30
 778:	3b0b3a0e 	blcc	2cefb8 <__bss_end+0x2b9478>
 77c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 780:	11134919 	tstne	r3, r9, lsl r9
 784:	40061201 	andmi	r1, r6, r1, lsl #4
 788:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 78c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 790:	03193f01 	tsteq	r9, #1, 30
 794:	3b0b3a0e 	blcc	2cefd4 <__bss_end+0x2b9494>
 798:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 79c:	11134919 	tstne	r3, r9, lsl r9
 7a0:	40061201 	andmi	r1, r6, r1, lsl #4
 7a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7a8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ac:	3f002e1e 	svccc	0x00002e1e
 7b0:	3a0e0319 	bcc	38141c <__bss_end+0x36b8dc>
 7b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7b8:	1119270b 	tstne	r9, fp, lsl #14
 7bc:	40061201 	andmi	r1, r6, r1, lsl #4
 7c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7c4:	051f0000 	ldreq	r0, [pc, #-0]	; 7cc <_start-0x7834>
 7c8:	3a0e0300 	bcc	3813d0 <__bss_end+0x36b890>
 7cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
 7d4:	00000018 	andeq	r0, r0, r8, lsl r0
 7d8:	03000d01 	movweq	r0, #3329	; 0xd01
 7dc:	3b0b3a0e 	blcc	2cf01c <__bss_end+0x2b94dc>
 7e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 7e4:	000b3813 	andeq	r3, fp, r3, lsl r8
 7e8:	00340200 	eorseq	r0, r4, r0, lsl #4
 7ec:	213a0e03 	teqcs	sl, r3, lsl #28
 7f0:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
 7f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 7f8:	03000018 	movweq	r0, #24
 7fc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 800:	3b01213a 	blcc	48cf0 <__bss_end+0x331b0>
 804:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 808:	00180213 	andseq	r0, r8, r3, lsl r2
 80c:	00160400 	andseq	r0, r6, r0, lsl #8
 810:	0b3a0e03 	bleq	e84024 <__bss_end+0xe6e4e4>
 814:	0b390b3b 	bleq	e43508 <__bss_end+0xe2d9c8>
 818:	00001349 	andeq	r1, r0, r9, asr #6
 81c:	03000505 	movweq	r0, #1285	; 0x505
 820:	01213a08 			; <UNDEFINED> instruction: 0x01213a08
 824:	0b390b3b 	bleq	e43518 <__bss_end+0xe2d9d8>
 828:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 82c:	0f060000 	svceq	0x00060000
 830:	04210b00 	strteq	r0, [r1], #-2816	; 0xfffff500
 834:	00001349 	andeq	r1, r0, r9, asr #6
 838:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
 83c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 840:	210b0024 	tstcs	fp, r4, lsr #32
 844:	07213e04 	streq	r3, [r1, -r4, lsl #28]!
 848:	00000e03 	andeq	r0, r0, r3, lsl #28
 84c:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 850:	0a000013 	beq	8a4 <_start-0x775c>
 854:	0b0b0113 	bleq	2c0ca8 <__bss_end+0x2ab168>
 858:	0b3b0b3a 	bleq	ec3548 <__bss_end+0xeada08>
 85c:	01092139 	tsteq	r9, r9, lsr r1
 860:	0b000013 	bleq	8b4 <_start-0x774c>
 864:	13490101 	movtne	r0, #37121	; 0x9101
 868:	00001301 	andeq	r1, r0, r1, lsl #6
 86c:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 870:	000b2f13 	andeq	r2, fp, r3, lsl pc
 874:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 878:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 87c:	3b01213a 	blcc	48d6c <__bss_end+0x3322c>
 880:	0621390b 	strteq	r3, [r1], -fp, lsl #18
 884:	01111927 	tsteq	r1, r7, lsr #18
 888:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 88c:	1301197a 	movwne	r1, #6522	; 0x197a
 890:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 894:	03193f01 	tsteq	r9, #1, 30
 898:	01213a0e 			; <UNDEFINED> instruction: 0x01213a0e
 89c:	21390b3b 	teqcs	r9, fp, lsr fp
 8a0:	11192706 	tstne	r9, r6, lsl #14
 8a4:	40061201 	andmi	r1, r6, r1, lsl #4
 8a8:	01197c18 	tsteq	r9, r8, lsl ip
 8ac:	0f000013 	svceq	0x00000013
 8b0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 8b4:	213a0e03 	teqcs	sl, r3, lsl #28
 8b8:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
 8bc:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
 8c0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8c4:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
 8c8:	34100000 	ldrcc	r0, [r0], #-0
 8cc:	3a080300 	bcc	2014d4 <__bss_end+0x1eb994>
 8d0:	0b3b0121 	bleq	ec0d5c <__bss_end+0xeab21c>
 8d4:	49102139 	ldmdbmi	r0, {r0, r3, r4, r5, r8, sp}
 8d8:	00180213 	andseq	r0, r8, r3, lsl r2
 8dc:	01111100 	tsteq	r1, r0, lsl #2
 8e0:	0b130e25 	bleq	4c417c <__bss_end+0x4ae63c>
 8e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 8e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8ec:	00001710 	andeq	r1, r0, r0, lsl r7
 8f0:	27011512 	smladcs	r1, r2, r5, r1
 8f4:	00130119 	andseq	r0, r3, r9, lsl r1
 8f8:	000f1300 	andeq	r1, pc, r0, lsl #6
 8fc:	00000b0b 	andeq	r0, r0, fp, lsl #22
 900:	49003514 	stmdbmi	r0, {r2, r4, r8, sl, ip, sp}
 904:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 908:	0e03012e 	adfeqsp	f0, f3, #0.5
 90c:	0b3b0b3a 	bleq	ec35fc <__bss_end+0xeadabc>
 910:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 914:	06120111 			; <UNDEFINED> instruction: 0x06120111
 918:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
 91c:	0b160000 	bleq	580924 <__bss_end+0x56ade4>
 920:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 924:	00000006 	andeq	r0, r0, r6
 928:	03000d01 	movweq	r0, #3329	; 0xd01
 92c:	01213a0e 			; <UNDEFINED> instruction: 0x01213a0e
 930:	21390b3b 	teqcs	r9, fp, lsr fp
 934:	38134910 	ldmdacc	r3, {r4, r8, fp, lr}
 938:	0200000b 	andeq	r0, r0, #11
 93c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 940:	3b01213a 	blcc	48e30 <__bss_end+0x332f0>
 944:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 948:	00180213 	andseq	r0, r8, r3, lsl r2
 94c:	00340300 	eorseq	r0, r4, r0, lsl #6
 950:	213a0e03 	teqcs	sl, r3, lsl #28
 954:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
 958:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 95c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
 960:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 964:	00000b1c 	andeq	r0, r0, ip, lsl fp
 968:	3f012e05 	svccc	0x00012e05
 96c:	3a0e0319 	bcc	3815d8 <__bss_end+0x36ba98>
 970:	0b3b0121 	bleq	ec0dfc <__bss_end+0xeab2bc>
 974:	27062139 	smladxcs	r6, r9, r1, r2
 978:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 97c:	7a184006 	bvc	61099c <__bss_end+0x5fae5c>
 980:	00130119 	andseq	r0, r3, r9, lsl r1
 984:	00240600 	eoreq	r0, r4, r0, lsl #12
 988:	0b3e0b0b 	bleq	f835bc <__bss_end+0xf6da7c>
 98c:	00000e03 	andeq	r0, r0, r3, lsl #28
 990:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 994:	00130113 	andseq	r0, r3, r3, lsl r1
 998:	00210800 	eoreq	r0, r1, r0, lsl #16
 99c:	0b2f1349 	bleq	bc56c8 <__bss_end+0xbafb88>
 9a0:	04090000 	streq	r0, [r9], #-0
 9a4:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
 9a8:	210b0721 	tstcs	fp, r1, lsr #14
 9ac:	3a134901 	bcc	4d2db8 <__bss_end+0x4bd278>
 9b0:	0b3b0221 	bleq	ec123c <__bss_end+0xeab6fc>
 9b4:	01062139 	tsteq	r6, r9, lsr r1
 9b8:	0a000013 	beq	a0c <_start-0x75f4>
 9bc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 9c0:	0e030b13 	vmoveq.32	d3[0], r0
 9c4:	01110e1b 	tsteq	r1, fp, lsl lr
 9c8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 9cc:	130b0000 	movwne	r0, #45056	; 0xb000
 9d0:	3a0b0b01 	bcc	2c35dc <__bss_end+0x2ada9c>
 9d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9d8:	0013010b 	andseq	r0, r3, fp, lsl #2
 9dc:	00160c00 	andseq	r0, r6, r0, lsl #24
 9e0:	0b3a0e03 	bleq	e841f4 <__bss_end+0xe6e6b4>
 9e4:	0b390b3b 	bleq	e436d8 <__bss_end+0xe2db98>
 9e8:	00001349 	andeq	r1, r0, r9, asr #6
 9ec:	4900350d 	stmdbmi	r0, {r0, r2, r3, r8, sl, ip, sp}
 9f0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 9f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9f8:	0b3b0b3a 	bleq	ec36e8 <__bss_end+0xeadba8>
 9fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 a00:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 a04:	0f0f0000 	svceq	0x000f0000
 a08:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 a0c:	10000013 	andne	r0, r0, r3, lsl r0
 a10:	13490026 	movtne	r0, #36902	; 0x9026
 a14:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 a18:	03193f01 	tsteq	r9, #1, 30
 a1c:	3b0b3a0e 	blcc	2cf25c <__bss_end+0x2b971c>
 a20:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 a24:	11134919 	tstne	r3, r9, lsl r9
 a28:	40061201 	andmi	r1, r6, r1, lsl #4
 a2c:	01197a18 	tsteq	r9, r8, lsl sl
 a30:	12000013 	andne	r0, r0, #19
 a34:	0b0b0024 	bleq	2c0acc <__bss_end+0x2aaf8c>
 a38:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 a3c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 a40:	03193f01 	tsteq	r9, #1, 30
 a44:	3b0b3a0e 	blcc	2cf284 <__bss_end+0x2b9744>
 a48:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 a4c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a50:	7c184006 	ldcvc	0, cr4, [r8], {6}
 a54:	00130119 	andseq	r0, r3, r9, lsl r1
 a58:	00051400 	andeq	r1, r5, r0, lsl #8
 a5c:	0b3a0803 	bleq	e82a70 <__bss_end+0xe6cf30>
 a60:	0b390b3b 	bleq	e43754 <__bss_end+0xe2dc14>
 a64:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 a68:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 a6c:	03193f01 	tsteq	r9, #1, 30
 a70:	3b0b3a0e 	blcc	2cf2b0 <__bss_end+0x2b9770>
 a74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 a78:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a7c:	7a184006 	bvc	610a9c <__bss_end+0x5faf5c>
 a80:	16000019 			; <UNDEFINED> instruction: 0x16000019
 a84:	08030034 	stmdaeq	r3, {r2, r4, r5}
 a88:	0b3b0b3a 	bleq	ec3778 <__bss_end+0xeadc38>
 a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
 a90:	00001802 	andeq	r1, r0, r2, lsl #16
 a94:	01110100 	tsteq	r1, r0, lsl #2
 a98:	0b130e25 	bleq	4c4334 <__bss_end+0x4ae7f4>
 a9c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 aa0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 aa4:	00001710 	andeq	r1, r0, r0, lsl r7
 aa8:	03001602 	movweq	r1, #1538	; 0x602
 aac:	3b0b3a0e 	blcc	2cf2ec <__bss_end+0x2b97ac>
 ab0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 ab4:	03000013 	movweq	r0, #19
 ab8:	13490026 	movtne	r0, #36902	; 0x9026
 abc:	24040000 	strcs	r0, [r4], #-0
 ac0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ac4:	000e030b 	andeq	r0, lr, fp, lsl #6
 ac8:	00240500 	eoreq	r0, r4, r0, lsl #10
 acc:	0b3e0b0b 	bleq	f83700 <__bss_end+0xf6dbc0>
 ad0:	00000803 	andeq	r0, r0, r3, lsl #16
 ad4:	0b000f06 	bleq	46f4 <_start-0x390c>
 ad8:	0700000b 	streq	r0, [r0, -fp]
 adc:	0b0b000f 	bleq	2c0b20 <__bss_end+0x2aafe0>
 ae0:	00001349 	andeq	r1, r0, r9, asr #6
 ae4:	03011708 	movweq	r1, #5896	; 0x1708
 ae8:	3a050b0e 	bcc	143728 <__bss_end+0x12dbe8>
 aec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 af0:	0013010b 	andseq	r0, r3, fp, lsl #2
 af4:	000d0900 	andeq	r0, sp, r0, lsl #18
 af8:	0b3a0e03 	bleq	e8430c <__bss_end+0xe6e7cc>
 afc:	0b390b3b 	bleq	e437f0 <__bss_end+0xe2dcb0>
 b00:	00001349 	andeq	r1, r0, r9, asr #6
 b04:	4900350a 	stmdbmi	r0, {r1, r3, r8, sl, ip, sp}
 b08:	0b000013 	bleq	b5c <_start-0x74a4>
 b0c:	13490101 	movtne	r0, #37121	; 0x9101
 b10:	00001301 	andeq	r1, r0, r1, lsl #6
 b14:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
 b18:	00052f13 	andeq	r2, r5, r3, lsl pc
 b1c:	00340d00 	eorseq	r0, r4, r0, lsl #26
 b20:	0b3a0e03 	bleq	e84334 <__bss_end+0xe6e7f4>
 b24:	0b390b3b 	bleq	e43818 <__bss_end+0xe2dcd8>
 b28:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b2c:	130e0000 	movwne	r0, #57344	; 0xe000
 b30:	0b0e0301 	bleq	38173c <__bss_end+0x36bbfc>
 b34:	3b0b3a0b 	blcc	2cf368 <__bss_end+0x2b9828>
 b38:	010b390b 	tsteq	fp, fp, lsl #18
 b3c:	0f000013 	svceq	0x00000013
 b40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 b44:	0b3b0b3a 	bleq	ec3834 <__bss_end+0xeadcf4>
 b48:	13490b39 	movtne	r0, #39737	; 0x9b39
 b4c:	00000b38 	andeq	r0, r0, r8, lsr fp
 b50:	03003410 	movweq	r3, #1040	; 0x410
 b54:	3b0b3a0e 	blcc	2cf394 <__bss_end+0x2b9854>
 b58:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 b5c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 b60:	11000018 	tstne	r0, r8, lsl r0
 b64:	0e03012e 	adfeqsp	f0, f3, #0.5
 b68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 b6c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 b70:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b74:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b78:	00130119 	andseq	r0, r3, r9, lsl r1
 b7c:	00051200 	andeq	r1, r5, r0, lsl #4
 b80:	0b3a0e03 	bleq	e84394 <__bss_end+0xe6e854>
 b84:	0b39053b 	bleq	e42078 <__bss_end+0xe2c538>
 b88:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 b8c:	34130000 	ldrcc	r0, [r3], #-0
 b90:	3a0e0300 	bcc	381798 <__bss_end+0x36bc58>
 b94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 b98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 b9c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 ba0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 ba4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ba8:	13490b39 	movtne	r0, #39737	; 0x9b39
 bac:	00001802 	andeq	r1, r0, r2, lsl #16
 bb0:	3f002e15 	svccc	0x00002e15
 bb4:	3a0e0319 	bcc	381820 <__bss_end+0x36bce0>
 bb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 bbc:	1119270b 	tstne	r9, fp, lsl #14
 bc0:	40061201 	andmi	r1, r6, r1, lsl #4
 bc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 bc8:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 bcc:	03193f00 	tsteq	r9, #0, 30
 bd0:	3b0b3a0e 	blcc	2cf410 <__bss_end+0x2b98d0>
 bd4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 bd8:	11134919 	tstne	r3, r9, lsl r9
 bdc:	40061201 	andmi	r1, r6, r1, lsl #4
 be0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 be4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 be8:	03193f01 	tsteq	r9, #1, 30
 bec:	3b0b3a0e 	blcc	2cf42c <__bss_end+0x2b98ec>
 bf0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 bf4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 bf8:	96184006 	ldrls	r4, [r8], -r6
 bfc:	13011942 	movwne	r1, #6466	; 0x1942
 c00:	05180000 	ldreq	r0, [r8, #-0]
 c04:	3a080300 	bcc	20180c <__bss_end+0x1ebccc>
 c08:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 c10:	19000018 	stmdbne	r0, {r3, r4}
 c14:	08030034 	stmdaeq	r3, {r2, r4, r5}
 c18:	0b3b0b3a 	bleq	ec3908 <__bss_end+0xeaddc8>
 c1c:	13490b39 	movtne	r0, #39737	; 0x9b39
 c20:	00001802 	andeq	r1, r0, r2, lsl #16
 c24:	3f012e1a 	svccc	0x00012e1a
 c28:	3a0e0319 	bcc	381894 <__bss_end+0x36bd54>
 c2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c30:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 c34:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 c38:	96184006 	ldrls	r4, [r8], -r6
 c3c:	00001942 	andeq	r1, r0, r2, asr #18
 c40:	0300051b 	movweq	r0, #1307	; 0x51b
 c44:	3b0b3a0e 	blcc	2cf484 <__bss_end+0x2b9944>
 c48:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 c4c:	00180213 	andseq	r0, r8, r3, lsl r2
 c50:	11010000 	mrsne	r0, (UNDEF: 1)
 c54:	130e2501 	movwne	r2, #58625	; 0xe501
 c58:	1b0e030b 	blne	38188c <__bss_end+0x36bd4c>
 c5c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 c60:	00171006 	andseq	r1, r7, r6
 c64:	00240200 	eoreq	r0, r4, r0, lsl #4
 c68:	0b3e0b0b 	bleq	f8389c <__bss_end+0xf6dd5c>
 c6c:	00000803 	andeq	r0, r0, r3, lsl #16
 c70:	0b002403 	bleq	9c84 <__module_entries_end+0x1be0>
 c74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 c78:	0400000e 	streq	r0, [r0], #-14
 c7c:	0b0b000f 	bleq	2c0cc0 <__bss_end+0x2ab180>
 c80:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 c84:	03193f00 	tsteq	r9, #0, 30
 c88:	3b0b3a0e 	blcc	2cf4c8 <__bss_end+0x2b9988>
 c8c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 c90:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 c94:	96184006 	ldrls	r4, [r8], -r6
 c98:	00001942 	andeq	r1, r0, r2, asr #18
 c9c:	3f012e06 	svccc	0x00012e06
 ca0:	3a0e0319 	bcc	38190c <__bss_end+0x36bdcc>
 ca4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 ca8:	1119270b 	tstne	r9, fp, lsl #14
 cac:	40061201 	andmi	r1, r6, r1, lsl #4
 cb0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 cb4:	00001301 	andeq	r1, r0, r1, lsl #6
 cb8:	03000507 	movweq	r0, #1287	; 0x507
 cbc:	3b0b3a0e 	blcc	2cf4fc <__bss_end+0x2b99bc>
 cc0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 cc4:	00180213 	andseq	r0, r8, r3, lsl r2
 cc8:	00340800 	eorseq	r0, r4, r0, lsl #16
 ccc:	0b3a0803 	bleq	e82ce0 <__bss_end+0xe6d1a0>
 cd0:	0b390b3b 	bleq	e439c4 <__bss_end+0xe2de84>
 cd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 cd8:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 cdc:	03193f01 	tsteq	r9, #1, 30
 ce0:	3b0b3a0e 	blcc	2cf520 <__bss_end+0x2b99e0>
 ce4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 ce8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 cec:	96184006 	ldrls	r4, [r8], -r6
 cf0:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00010000 	andeq	r0, r1, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02160002 	andseq	r0, r6, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00010344 	andeq	r0, r1, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03b20002 			; <UNDEFINED> instruction: 0x03b20002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	08610002 	stmdaeq	r1!, {r1}^
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00010d54 	andeq	r0, r1, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b060002 	bleq	180094 <__bss_end+0x16a554>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	128e0002 	addne	r0, lr, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00011ba0 	andeq	r1, r1, r0, lsr #23
  b4:	00001924 	andeq	r1, r0, r4, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	20640002 	rsbcs	r0, r4, r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000134c4 	andeq	r3, r1, r4, asr #9
  d4:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	231b0002 	tstcs	fp, #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00013868 	andeq	r3, r1, r8, ror #16
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	26ff0002 	ldrbtcs	r0, [pc], r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00013e40 	andeq	r3, r1, r0, asr #28
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	29e80002 	stmibcs	r8!, {r1}^
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00014304 	andeq	r4, r1, r4, lsl #6
 134:	00000118 	andeq	r0, r0, r8, lsl r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001c8 	andeq	r0, r0, r8, asr #3
       4:	00cf0003 	sbceq	r0, pc, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6176752f 	cmnvs	r6, pc, lsr #10
      24:	6f442f6e 	svcvs	0x00442f6e
      28:	6f6c6e77 	svcvs	0x006c6e77
      2c:	2f736461 	svccs	0x00736461
      30:	70736152 	rsbsvc	r6, r3, r2, asr r1
      34:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      38:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
      3c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      40:	534f5452 	movtpl	r5, #62546	; 0xf452
      44:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
      48:	4f545265 	svcmi	0x00545265
      4c:	6f532f53 	svcvs	0x00532f53
      50:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      54:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
      58:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
      5c:	43472f65 	movtmi	r2, #32613	; 0x7f65
      60:	61522f43 	cmpvs	r2, r3, asr #30
      64:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
      68:	50797272 	rsbspl	r7, r9, r2, ror r2
      6c:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
      70:	2f656d6f 	svccs	0x00656d6f
      74:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
      78:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
      7c:	616f6c6e 	cmnvs	pc, lr, ror #24
      80:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
      84:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      88:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      8c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      90:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      94:	2f534f54 	svccs	0x00534f54
      98:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      9c:	534f5452 	movtpl	r5, #62546	; 0xf452
      a0:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd79 <_estack+0xf7fefd79>
      a4:	2f656372 	svccs	0x00656372
      a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      ac:	00656475 	rsbeq	r6, r5, r5, ror r4
      b0:	726f7000 	rsbvc	r7, pc, #0
      b4:	00632e74 	rsbeq	r2, r3, r4, ror lr
      b8:	70000001 	andvc	r0, r0, r1
      bc:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
      c0:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      c4:	00020068 	andeq	r0, r2, r8, rrx
      c8:	726f7000 	rsbvc	r7, pc, #0
      cc:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
      d0:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      d4:	00000100 	andeq	r0, r0, r0, lsl #2
      d8:	00010500 	andeq	r0, r1, r0, lsl #10
      dc:	00000205 	andeq	r0, r0, r5, lsl #4
      e0:	f7030001 			; <UNDEFINED> instruction: 0xf7030001
      e4:	10050100 	andne	r0, r5, r0, lsl #2
      e8:	4e0e05bd 	mcrmi	5, 0, r0, cr14, cr13, {5}
      ec:	056e1205 	strbeq	r1, [lr, #-517]!	; 0xfffffdfb
      f0:	10052e2c 	andne	r2, r5, ip, lsr #28
      f4:	4b0e052e 	blmi	3815b4 <__bss_end+0x36ba74>
      f8:	05681005 	strbeq	r1, [r8, #-5]!
      fc:	1205670e 	andne	r6, r5, #3670016	; 0x380000
     100:	2e100567 	cfmsc32cs	mvfx0, mvfx0, mvfx7
     104:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
     108:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     10c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     110:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     114:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     118:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     11c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     120:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     124:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     128:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     12c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     130:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     134:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     138:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     13c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     140:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     144:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     148:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     14c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     150:	10056a12 	andne	r6, r5, r2, lsl sl
     154:	4b0e052e 	blmi	381614 <__bss_end+0x36bad4>
     158:	056a1005 	strbeq	r1, [sl, #-5]!
     15c:	21056808 	tstcs	r5, r8, lsl #16
     160:	2e04052e 	cfsh32cs	mvfx0, mvfx4, #30
     164:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
     168:	1005a10e 	andne	sl, r5, lr, lsl #2
     16c:	6809056c 	stmdavs	r9, {r2, r3, r5, r6, r8, sl}
     170:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     174:	02051622 	andeq	r1, r5, #35651584	; 0x2200000
     178:	0905314d 	stmdbeq	r5, {r0, r2, r3, r6, r8, ip, sp}
     17c:	2f010531 	svccs	0x00010531
     180:	0a034d4e 	beq	d36c0 <__bss_end+0xbdb80>
     184:	9f020582 	svcls	0x00020582
     188:	31070531 	tstcc	r7, r1, lsr r5
     18c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     190:	05884b01 	streq	r4, [r8, #2817]	; 0xb01
     194:	02056b11 	andeq	r6, r5, #17408	; 0x4400
     198:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     19c:	0d053007 	stceq	0, cr3, [r5, #-28]	; 0xffffffe4
     1a0:	4b07052e 	blmi	1c1660 <__bss_end+0x1abb20>
     1a4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1a8:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1ac:	4b07052e 	blmi	1c166c <__bss_end+0x1abb2c>
     1b0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1b4:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1b8:	4b07052e 	blmi	1c1678 <__bss_end+0x1abb38>
     1bc:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1c0:	4c844c02 	stcmi	12, cr4, [r4], {2}
     1c4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     1c8:	0101000e 	tsteq	r1, lr
     1cc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     1d0:	00730003 	rsbseq	r0, r3, r3
     1d4:	01020000 	mrseq	r0, (UNDEF: 2)
     1d8:	000d0efb 	strdeq	r0, [sp], -fp
     1dc:	01010101 	tsteq	r1, r1, lsl #2
     1e0:	01000000 	mrseq	r0, (UNDEF: 0)
     1e4:	2f010000 	svccs	0x00010000
     1e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     1ec:	6176752f 	cmnvs	r6, pc, lsr #10
     1f0:	6f442f6e 	svcvs	0x00442f6e
     1f4:	6f6c6e77 	svcvs	0x006c6e77
     1f8:	2f736461 	svccs	0x00736461
     1fc:	70736152 	rsbsvc	r6, r3, r2, asr r1
     200:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     204:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     208:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     20c:	534f5452 	movtpl	r5, #62546	; 0xf452
     210:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     214:	4f545265 	svcmi	0x00545265
     218:	6f532f53 	svcvs	0x00532f53
     21c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     220:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     224:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     228:	43472f65 	movtmi	r2, #32613	; 0x7f65
     22c:	61522f43 	cmpvs	r2, r3, asr #30
     230:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     234:	50797272 	rsbspl	r7, r9, r2, ror r2
     238:	70000069 	andvc	r0, r0, r9, rrx
     23c:	6974726f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     240:	632e7273 			; <UNDEFINED> instruction: 0x632e7273
     244:	00000100 	andeq	r0, r0, r0, lsl #2
     248:	00010500 	andeq	r0, r1, r0, lsl #10
     24c:	03440205 	movteq	r0, #16901	; 0x4205
     250:	f5030001 			; <UNDEFINED> instruction: 0xf5030001
     254:	0c050100 	stfeqs	f0, [r5], {-0}
     258:	a0020552 	andge	r0, r2, r2, asr r5
     25c:	02342f2f 	eorseq	r2, r4, #47, 30	; 0xbc
     260:	01051324 	tsteq	r5, r4, lsr #6
     264:	d60e036c 	strle	r0, [lr], -ip, ror #6
     268:	31160205 	tstcc	r6, r5, lsl #4
     26c:	31152c02 	tstcc	r5, r2, lsl #24
     270:	24020105 	strcs	r0, [r2], #-261	; 0xfffffefb
     274:	031c0513 	tsteq	ip, #79691776	; 0x4c00000
     278:	02056616 	andeq	r6, r5, #23068672	; 0x1600000
     27c:	132c0213 			; <UNDEFINED> instruction: 0x132c0213
     280:	0201052f 	andeq	r0, r1, #197132288	; 0xbc00000
     284:	2a031324 	bcs	c4f1c <__bss_end+0xaf3dc>
     288:	4c020566 	cfstr32mi	mvfx0, [r2], {102}	; 0x66
     28c:	0a031305 	beq	c4ea8 <__bss_end+0xaf368>
     290:	9f01059e 	svcls	0x0001059e
     294:	4b1805a1 	blmi	601920 <__bss_end+0x5ebde0>
     298:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     29c:	19054d14 	stmdbne	r5, {r2, r4, r8, sl, fp, lr}
     2a0:	4a0505a2 	bmi	141930 <__bss_end+0x12bdf0>
     2a4:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
     2a8:	0e02a601 	cfmadd32eq	mvax0, mvfx10, mvfx2, mvfx1
     2ac:	e0010100 	and	r0, r1, r0, lsl #2
     2b0:	03000002 	movweq	r0, #2
     2b4:	00011700 	andeq	r1, r1, r0, lsl #14
     2b8:	fb010200 	blx	40ac2 <__bss_end+0x2af82>
     2bc:	01000d0e 	tsteq	r0, lr, lsl #26
     2c0:	00010101 	andeq	r0, r1, r1, lsl #2
     2c4:	00010000 	andeq	r0, r1, r0
     2c8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     2cc:	2f656d6f 	svccs	0x00656d6f
     2d0:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     2d4:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     2d8:	616f6c6e 	cmnvs	pc, lr, ror #24
     2dc:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     2e0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     2e4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     2e8:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     2ec:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     2f0:	2f534f54 	svccs	0x00534f54
     2f4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2f8:	534f5452 	movtpl	r5, #62546	; 0xf452
     2fc:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffffd5 <_estack+0xf7feffd5>
     300:	00656372 	rsbeq	r6, r5, r2, ror r3
     304:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 250 <_start-0x7db0>
     308:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     30c:	442f6e61 	strtmi	r6, [pc], #-3681	; 314 <_start-0x7cec>
     310:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     314:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     318:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     31c:	72656270 	rsbvc	r6, r5, #112, 4
     320:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     324:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     328:	4f545265 	svcmi	0x00545265
     32c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     330:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     334:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     338:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     33c:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     340:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     344:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     348:	2f656d6f 	svccs	0x00656d6f
     34c:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     350:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     354:	616f6c6e 	cmnvs	pc, lr, ror #24
     358:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     35c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     360:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     364:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     368:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     36c:	2f534f54 	svccs	0x00534f54
     370:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     374:	534f5452 	movtpl	r5, #62546	; 0xf452
     378:	756f532f 	strbvc	r5, [pc, #-815]!	; 51 <_start-0x7faf>
     37c:	2f656372 	svccs	0x00656372
     380:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     384:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     388:	4343472f 	movtmi	r4, #14127	; 0x372f
     38c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     390:	72656270 	rsbvc	r6, r5, #112, 4
     394:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     398:	72630000 	rsbvc	r0, r3, #0
     39c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3a0:	632e656e 			; <UNDEFINED> instruction: 0x632e656e
     3a4:	00000100 	andeq	r0, r0, r0, lsl #2
     3a8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     3ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     3b0:	6f700000 	svcvs	0x00700000
     3b4:	616d7472 	smcvs	55106	; 0xd742
     3b8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     3bc:	00030068 	andeq	r0, r3, r8, rrx
     3c0:	6f726300 	svcvs	0x00726300
     3c4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3c8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     3cc:	00000002 	andeq	r0, r0, r2
     3d0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     3d4:	0105f002 	tsteq	r5, r2	; <UNPREDICTABLE>
     3d8:	018a0300 	orreq	r0, sl, r0, lsl #6
     3dc:	bf1e0501 	svclt	0x001e0501
     3e0:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     3e4:	05056a1a 	streq	r6, [r5, #-2586]	; 0xfffff5e6
     3e8:	4c17054a 	cfldr32mi	mvfx0, [r7], {74}	; 0x4a
     3ec:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     3f0:	0f053205 	svceq	0x00053205
     3f4:	4e180568 	cfmsc32mi	mvfx0, mvfx8, mvfx8
     3f8:	05671b05 	strbeq	r1, [r7, #-2821]!	; 0xfffff4fb
     3fc:	24056718 	strcs	r6, [r5], #-1816	; 0xfffff8e8
     400:	69030567 	stmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl}
     404:	69678783 	stmdbvs	r7!, {r0, r1, r7, r8, r9, sl, pc}^
     408:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
     40c:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     410:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     414:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     418:	08060304 	stmdaeq	r6, {r2, r8, r9}
     41c:	09056a92 	stmdbeq	r5, {r1, r4, r7, r9, fp, sp, lr}
     420:	2f01054d 	svccs	0x0001054d
     424:	a32405be 			; <UNDEFINED> instruction: 0xa32405be
     428:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     42c:	02056b34 	andeq	r6, r5, #52, 22	; 0xd000
     430:	1205694a 	andne	r6, r5, #1212416	; 0x128000
     434:	4a040584 	bmi	101a4c <__bss_end+0xebf0c>
     438:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     43c:	03054a61 	movweq	r4, #23137	; 0x5a61
     440:	5905a44a 	stmdbpl	r5, {r1, r3, r6, sl, sp, pc}
     444:	4a03054a 	bmi	c1974 <__bss_end+0xabe34>
     448:	05850405 	streq	r0, [r5, #1029]	; 0x405
     44c:	03056a32 	movweq	r6, #23090	; 0x5a32
     450:	8401054a 	strhi	r0, [r1], #-1354	; 0xfffffab6
     454:	6a0705da 	bvs	1c1bc4 <__bss_end+0x1ac084>
     458:	05330305 	ldreq	r0, [r3, #-773]!	; 0xfffffcfb
     45c:	1405a024 	strne	sl, [r5], #-36	; 0xffffffdc
     460:	4b04054a 	blmi	101990 <__bss_end+0xebe50>
     464:	a0840305 	addge	r0, r4, r5, lsl #6
     468:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     46c:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     470:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     474:	03060905 	movweq	r0, #26885	; 0x6905
     478:	05900873 	ldreq	r0, [r0, #2163]	; 0x873
     47c:	01054a07 	tsteq	r5, r7, lsl #20
     480:	da4a0f03 	ble	1284094 <__bss_end+0x126e554>
     484:	05691105 	strbeq	r1, [r9, #-261]!	; 0xfffffefb
     488:	0f054a25 	svceq	0x00054a25
     48c:	4b070566 	blmi	1c1a2c <__bss_end+0x1abeec>
     490:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
     494:	1b059f0f 	blne	1680d8 <__bss_end+0x152598>
     498:	4a0505a1 	bmi	141b24 <__bss_end+0x12bfe4>
     49c:	05500b05 	ldrbeq	r0, [r0, #-2821]	; 0xfffff4fb
     4a0:	2305671b 	movwcs	r6, #22299	; 0x571b
     4a4:	6a080583 	bvs	201ab8 <__bss_end+0x1ebf78>
     4a8:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
     4ac:	1e05660b 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx11
     4b0:	4a1c054c 	bmi	7019e8 <__bss_end+0x6ebea8>
     4b4:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     4b8:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
     4bc:	a5050531 	strge	r0, [r5, #-1329]	; 0xfffffacf
     4c0:	05851f05 	streq	r1, [r5, #3845]	; 0xf05
     4c4:	06054a07 	streq	r4, [r5], -r7, lsl #20
     4c8:	8504054c 	strhi	r0, [r4, #-1356]	; 0xfffffab4
     4cc:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     4d0:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     4d4:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     4d8:	03060a05 	movweq	r0, #27141	; 0x6a05
     4dc:	05900865 	ldreq	r0, [r0, #2149]	; 0x865
     4e0:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     4e4:	054a6e03 	strbeq	r6, [sl, #-3587]	; 0xfffff1fd
     4e8:	11054a07 	tstne	r5, r7, lsl #20
     4ec:	054a3103 	strbeq	r3, [sl, #-259]	; 0xfffffefd
     4f0:	40088301 	andmi	r8, r8, r1, lsl #6
     4f4:	31680205 	cmncc	r8, r5, lsl #4
     4f8:	05310705 	ldreq	r0, [r1, #-1797]!	; 0xfffff8fb
     4fc:	05053023 	streq	r3, [r5, #-35]	; 0xffffffdd
     500:	4f03054a 	svcmi	0x0003054a
     504:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
     508:	0807059e 	stmdaeq	r7, {r1, r2, r3, r4, r7, r8, sl}
     50c:	03020520 	movweq	r0, #9504	; 0x2520
     510:	02004a0c 	andeq	r4, r0, #12, 20	; 0xc000
     514:	02060104 	andeq	r0, r6, #4, 2
     518:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     51c:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
     520:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
     524:	05a10603 	streq	r0, [r1, #1539]!	; 0x603
     528:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     52c:	16059e03 	strne	r9, [r5], -r3, lsl #28
     530:	03040200 	movweq	r0, #16896	; 0x4200
     534:	0002054a 	andeq	r0, r2, sl, asr #10
     538:	68030402 	stmdavs	r3, {r1, sl}
     53c:	74030405 	strvc	r0, [r3], #-1029	; 0xfffffbfb
     540:	0301052e 	movweq	r0, #5422	; 0x152e
     544:	05a22e0d 	streq	r2, [r2, #3597]!	; 0xe0d
     548:	02056912 	andeq	r6, r5, #294912	; 0x48000
     54c:	0003054a 	andeq	r0, r3, sl, asr #10
     550:	30030402 	andcc	r0, r3, r2, lsl #8
     554:	02004f05 	andeq	r4, r0, #5, 30
     558:	1e080304 	cdpne	3, 0, cr0, cr8, cr4, {0}
     55c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
     560:	6b660104 	blvs	1980978 <__bss_end+0x196ae38>
     564:	19054b4b 	stmdbne	r5, {r0, r1, r3, r6, r8, r9, fp, lr}
     568:	6721054e 	strvs	r0, [r1, -lr, asr #10]!
     56c:	08670105 	stmdaeq	r7!, {r0, r2, r8}^
     570:	89220524 	stmdbhi	r2!, {r2, r5, r8, sl}
     574:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     578:	05834b02 	streq	r4, [r3, #2818]	; 0xb02
     57c:	3705a015 	smladcc	r5, r5, r0, sl
     580:	6604054a 	strvs	r0, [r4], -sl, asr #10
     584:	6a4c0b05 	bvs	13031a0 <__bss_end+0x12ed660>
     588:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
     58c:	0a022f01 	beq	8c198 <__bss_end+0x76658>
     590:	e1010100 	mrs	r0, (UNDEF: 17)
     594:	03000001 	movweq	r0, #1
     598:	00010500 	andeq	r0, r1, r0, lsl #10
     59c:	fb010200 	blx	40da6 <__bss_end+0x2b266>
     5a0:	01000d0e 	tsteq	r0, lr, lsl #26
     5a4:	00010101 	andeq	r0, r1, r1, lsl #2
     5a8:	00010000 	andeq	r0, r1, r0
     5ac:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     5b0:	2f656d6f 	svccs	0x00656d6f
     5b4:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     5b8:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     5bc:	616f6c6e 	cmnvs	pc, lr, ror #24
     5c0:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     5c4:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     5c8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     5cc:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     5d0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     5d4:	2f534f54 	svccs	0x00534f54
     5d8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     5dc:	534f5452 	movtpl	r5, #62546	; 0xf452
     5e0:	756f532f 	strbvc	r5, [pc, #-815]!	; 2b9 <_start-0x7d47>
     5e4:	00656372 	rsbeq	r6, r5, r2, ror r3
     5e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 534 <_start-0x7acc>
     5ec:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     5f0:	442f6e61 	strtmi	r6, [pc], #-3681	; 5f8 <_start-0x7a08>
     5f4:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     5f8:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     5fc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     600:	72656270 	rsbvc	r6, r5, #112, 4
     604:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     608:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     60c:	4f545265 	svcmi	0x00545265
     610:	72462f53 	subvc	r2, r6, #332	; 0x14c
     614:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     618:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     61c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     620:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     624:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     628:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     62c:	2f656d6f 	svccs	0x00656d6f
     630:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     634:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     638:	616f6c6e 	cmnvs	pc, lr, ror #24
     63c:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     640:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     644:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     648:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     64c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     650:	2f534f54 	svccs	0x00534f54
     654:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     658:	534f5452 	movtpl	r5, #62546	; 0xf452
     65c:	756f532f 	strbvc	r5, [pc, #-815]!	; 335 <_start-0x7ccb>
     660:	2f656372 	svccs	0x00656372
     664:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     668:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     66c:	4343472f 	movtmi	r4, #14127	; 0x372f
     670:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     674:	72656270 	rsbvc	r6, r5, #112, 4
     678:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     67c:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     680:	632e7473 			; <UNDEFINED> instruction: 0x632e7473
     684:	00000100 	andeq	r0, r0, r0, lsl #2
     688:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     68c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     690:	6f700000 	svcvs	0x00700000
     694:	616d7472 	smcvs	55106	; 0xd742
     698:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     69c:	00030068 	andeq	r0, r3, r8, rrx
     6a0:	01050000 	mrseq	r0, (UNDEF: 5)
     6a4:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
     6a8:	0300010d 	movweq	r0, #269	; 0x10d
     6ac:	050100cc 	streq	r0, [r1, #-204]	; 0xffffff34
     6b0:	12058624 	andne	r8, r5, #36, 12	; 0x2400000
     6b4:	4e1e054a 	cfmac32mi	mvfx0, mvfx14, mvfx10
     6b8:	056a2c05 	strbeq	r2, [sl, #-3077]!	; 0xfffff3fb
     6bc:	30054a1a 	andcc	r4, r5, sl, lsl sl
     6c0:	4a1e054b 	bmi	781bf4 <__bss_end+0x76c0b4>
     6c4:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
     6c8:	05866701 	streq	r6, [r6, #1793]	; 0x701
     6cc:	01058416 	tsteq	r5, r6, lsl r4
     6d0:	0a058667 	beq	162074 <__bss_end+0x14c534>
     6d4:	682105a5 	stmdavs	r1!, {r0, r2, r5, r7, r8, sl}
     6d8:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     6dc:	1c054b24 			; <UNDEFINED> instruction: 0x1c054b24
     6e0:	4b09054a 	blmi	241c10 <__bss_end+0x22c0d0>
     6e4:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
     6e8:	05674b12 	strbeq	r4, [r7, #-2834]!	; 0xfffff4ee
     6ec:	0a05691d 	beq	15ab68 <__bss_end+0x145028>
     6f0:	4a1d0568 	bmi	741c98 <__bss_end+0x72c158>
     6f4:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     6f8:	05a31405 	streq	r1, [r3, #1029]!	; 0x405
     6fc:	66090304 	strvs	r0, [r9], -r4, lsl #6
     700:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
     704:	82140313 	andshi	r0, r4, #1275068416	; 0x4c000000
     708:	05660305 	strbeq	r0, [r6, #-773]!	; 0xfffffcfb
     70c:	0402007c 	streq	r0, [r2], #-124	; 0xffffff84
     710:	46052e03 	strmi	r2, [r5], -r3, lsl #28
     714:	01040200 	mrseq	r0, R12_usr
     718:	004e0566 	subeq	r0, lr, r6, ror #10
     71c:	4a010402 	bmi	4172c <__bss_end+0x2bbec>
     720:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     724:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
     728:	18056d24 	stmdane	r5, {r2, r5, r8, sl, fp, sp, lr}
     72c:	4b0f054a 	blmi	3c1c5c <__bss_end+0x3ac11c>
     730:	054a2405 	strbeq	r2, [sl, #-1029]	; 0xfffffbfb
     734:	15054b1c 	strne	r4, [r5, #-2844]	; 0xfffff4e4
     738:	6a1d0567 	bvs	741cdc <__bss_end+0x72c19c>
     73c:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
     740:	01054a1d 	tsteq	r5, sp, lsl sl
     744:	10058667 	andne	r8, r5, r7, ror #12
     748:	4a350585 	bmi	d41d64 <__bss_end+0xd2c224>
     74c:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     750:	35052f10 	strcc	r2, [r5, #-3856]	; 0xfffff0f0
     754:	4a25054a 	bmi	941c84 <__bss_end+0x92c144>
     758:	05320905 	ldreq	r0, [r2, #-2309]!	; 0xfffff6fb
     75c:	0405690c 	streq	r6, [r5], #-2316	; 0xfffff6f4
     760:	6823054a 	stmdavs	r3!, {r1, r3, r6, r8, sl}
     764:	054a1305 	strbeq	r1, [sl, #-773]	; 0xfffffcfb
     768:	0a054d1e 	beq	153be8 <__bss_end+0x13e0a8>
     76c:	4a1d0567 	bmi	741d10 <__bss_end+0x72c1d0>
     770:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
     774:	01010008 	tsteq	r1, r8
     778:	0000052b 	andeq	r0, r0, fp, lsr #10
     77c:	014e0003 	cmpeq	lr, r3
     780:	01020000 	mrseq	r0, (UNDEF: 2)
     784:	000d0efb 	strdeq	r0, [sp], -fp
     788:	01010101 	tsteq	r1, r1, lsl #2
     78c:	01000000 	mrseq	r0, (UNDEF: 0)
     790:	2f010000 	svccs	0x00010000
     794:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     798:	6176752f 	cmnvs	r6, pc, lsr #10
     79c:	6f442f6e 	svcvs	0x00442f6e
     7a0:	6f6c6e77 	svcvs	0x006c6e77
     7a4:	2f736461 	svccs	0x00736461
     7a8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     7ac:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     7b0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     7b4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     7b8:	534f5452 	movtpl	r5, #62546	; 0xf452
     7bc:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     7c0:	4f545265 	svcmi	0x00545265
     7c4:	6f532f53 	svcvs	0x00532f53
     7c8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     7cc:	706f2f00 	rsbvc	r2, pc, r0, lsl #30
     7d0:	63672f74 	cmnvs	r7, #116, 30	; 0x1d0
     7d4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     7d8:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
     7dc:	63672f62 	cmnvs	r7, #392	; 0x188
     7e0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     7e4:	6f6e2d6d 	svcvs	0x006e2d6d
     7e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     7ec:	2f696261 	svccs	0x00696261
     7f0:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
     7f4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     7f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     7fc:	2f006564 	svccs	0x00006564
     800:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     804:	6176752f 	cmnvs	r6, pc, lsr #10
     808:	6f442f6e 	svcvs	0x00442f6e
     80c:	6f6c6e77 	svcvs	0x006c6e77
     810:	2f736461 	svccs	0x00736461
     814:	70736152 	rsbsvc	r6, r3, r2, asr r1
     818:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     81c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     820:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     824:	534f5452 	movtpl	r5, #62546	; 0xf452
     828:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     82c:	4f545265 	svcmi	0x00545265
     830:	6f532f53 	svcvs	0x00532f53
     834:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     838:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     83c:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     840:	43472f65 	movtmi	r2, #32613	; 0x7f65
     844:	61522f43 	cmpvs	r2, r3, asr #30
     848:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     84c:	50797272 	rsbspl	r7, r9, r2, ror r2
     850:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	; <UNPREDICTABLE>
     854:	2f656d6f 	svccs	0x00656d6f
     858:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     85c:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     860:	616f6c6e 	cmnvs	pc, lr, ror #24
     864:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     868:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     86c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     870:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     874:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     878:	2f534f54 	svccs	0x00534f54
     87c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     880:	534f5452 	movtpl	r5, #62546	; 0xf452
     884:	756f532f 	strbvc	r5, [pc, #-815]!	; 55d <_start-0x7aa3>
     888:	2f656372 	svccs	0x00656372
     88c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     890:	00656475 	rsbeq	r6, r5, r5, ror r4
     894:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     898:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
     89c:	00000100 	andeq	r0, r0, r0, lsl #2
     8a0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     8a4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     8a8:	00000200 	andeq	r0, r0, r0, lsl #4
     8ac:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     8b0:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     8b4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     8b8:	6c000003 	stcvs	0, cr0, [r0], {3}
     8bc:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     8c0:	00040068 	andeq	r0, r4, r8, rrx
     8c4:	73617400 	cmnvc	r1, #0, 8
     8c8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     8cc:	00000004 	andeq	r0, r0, r4
     8d0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     8d4:	010ff002 	tsteq	pc, r2	; <UNPREDICTABLE>
     8d8:	02970300 	addseq	r0, r7, #0, 6
     8dc:	a1020501 	tstge	r2, r1, lsl #10
     8e0:	05301c05 	ldreq	r1, [r0, #-3077]!	; 0xfffff3fb
     8e4:	44054a30 	strmi	r4, [r5], #-2608	; 0xfffff5d0
     8e8:	4a3b054a 	bmi	ec1e18 <__bss_end+0xeac2d8>
     8ec:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     8f0:	1e052e13 	mcrne	14, 0, r2, cr5, cr3, {0}
     8f4:	671f054b 	ldrvs	r0, [pc, -fp, asr #10]
     8f8:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
     8fc:	36054b20 	strcc	r4, [r5], -r0, lsr #22
     900:	4a41054a 	bmi	1041e30 <__bss_end+0x102c2f0>
     904:	052e6c05 	streq	r6, [lr, #-3077]!	; 0xfffff3fb
     908:	29054a63 	stmdbcs	r5, {r0, r1, r5, r6, r9, fp, lr}
     90c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
     910:	674b1405 	strbvs	r1, [fp, -r5, lsl #8]
     914:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     918:	06056d08 	streq	r6, [r5], -r8, lsl #26
     91c:	4c23054a 	cfstr32mi	mvfx0, [r3], #-296	; 0xfffffed8
     920:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     924:	06056607 	streq	r6, [r5], -r7, lsl #12
     928:	5104054c 	tstpl	r4, ip, asr #10
     92c:	85020583 	strhi	r0, [r2, #-1411]	; 0xfffffa7d
     930:	05320905 	ldreq	r0, [r2, #-2309]!	; 0xfffff6fb
     934:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     938:	0405d90e 	streq	sp, [r5], #-2318	; 0xfffff6f2
     93c:	681d0551 	ldmdavs	sp, {r0, r4, r6, r8, sl}
     940:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
     944:	16056a33 			; <UNDEFINED> instruction: 0x16056a33
     948:	4c2b0566 	cfstr32mi	mvfx0, [fp], #-408	; 0xfffffe68
     94c:	05661705 	strbeq	r1, [r6, #-1797]!	; 0xfffff8fb
     950:	06054b12 			; <UNDEFINED> instruction: 0x06054b12
     954:	4e1a054a 	cfmac32mi	mvfx0, mvfx10, mvfx10
     958:	05671c05 	strbeq	r1, [r7, #-3077]!	; 0xfffff3fb
     95c:	0d056705 	stceq	7, cr6, [r5, #-20]	; 0xffffffec
     960:	6b05056e 	blvs	141f20 <__bss_end+0x12c3e0>
     964:	05510905 	ldrbeq	r0, [r1, #-2309]	; 0xfffff6fb
     968:	d0032f01 	andle	r2, r3, r1, lsl #30
     96c:	16056601 	strne	r6, [r5], -r1, lsl #12
     970:	030305d7 	movweq	r0, #13783	; 0x35d7
     974:	0f054a0b 	svceq	0x00054a0b
     978:	4a2c0532 	bmi	b01e48 <__bss_end+0xaec308>
     97c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     980:	09054d05 	stmdbeq	r5, {r0, r2, r8, sl, fp, lr}
     984:	4a070586 	bmi	1c1fa4 <__bss_end+0x1ac464>
     988:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     98c:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     990:	50070566 	andpl	r0, r7, r6, ror #10
     994:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
     998:	1605320c 	strne	r3, [r5], -ip, lsl #4
     99c:	2e07054e 	cfsh32cs	mvfx0, mvfx7, #46
     9a0:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     9a4:	0c05330d 	stceq	3, cr3, [r5], {13}
     9a8:	6a06054c 	bvs	181ee0 <__bss_end+0x16c3a0>
     9ac:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
     9b0:	2f334e03 	svccs	0x00334e03
     9b4:	01040200 	mrseq	r0, R12_usr
     9b8:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     9bc:	00660304 	rsbeq	r0, r6, r4, lsl #6
     9c0:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     9c4:	06040200 	streq	r0, [r4], -r0, lsl #4
     9c8:	00070566 	andeq	r0, r7, r6, ror #10
     9cc:	06060402 	streq	r0, [r6], -r2, lsl #8
     9d0:	00050531 	andeq	r0, r5, r1, lsr r5
     9d4:	ba060402 	blt	1819e4 <__bss_end+0x16bea4>
     9d8:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
     9dc:	1c056606 	stcne	6, cr6, [r5], {6}
     9e0:	4a05054d 	bmi	141f1c <__bss_end+0x12c3dc>
     9e4:	51090589 	smlabbpl	r9, r9, r5, r0
     9e8:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     9ec:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     9f0:	4b0e0550 	blmi	381f38 <__bss_end+0x36c3f8>
     9f4:	05500405 	ldrbeq	r0, [r0, #-1029]	; 0xfffffbfb
     9f8:	0b054b0d 	bleq	153634 <__bss_end+0x13daf4>
     9fc:	00010533 	andeq	r0, r1, r3, lsr r5
     a00:	31030402 	tstcc	r3, r2, lsl #8
     a04:	6601d203 	strvs	sp, [r1], -r3, lsl #4
     a08:	0c031905 			; <UNDEFINED> instruction: 0x0c031905
     a0c:	4c0e05d6 	cfstr32mi	mvfx0, [lr], {214}	; 0xd6
     a10:	054a2b05 	strbeq	r2, [sl, #-2821]	; 0xfffff4fb
     a14:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
     a18:	860f054e 	strhi	r0, [pc], -lr, asr #10
     a1c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     a20:	07054c09 	streq	r4, [r5, -r9, lsl #24]
     a24:	4c24054a 	cfstr32mi	mvfx0, [r4], #-296	; 0xfffffed8
     a28:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
     a2c:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     a30:	6823054e 	stmdavs	r3!, {r1, r2, r3, r6, r8, sl}
     a34:	09031005 	stmdbeq	r3, {r0, r2, ip}
     a38:	4a050582 	bmi	142048 <__bss_end+0x12c508>
     a3c:	6b690c05 	blvs	1a43a58 <__bss_end+0x1a2df18>
     a40:	054f0905 	strbeq	r0, [pc, #-2309]	; 143 <_start-0x7ebd>
     a44:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     a48:	0305d716 	movweq	sp, #22294	; 0x5716
     a4c:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
     a50:	0605320f 	streq	r3, [r5], -pc, lsl #4
     a54:	4d1c054a 	cfldr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
     a58:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     a5c:	11056807 	tstne	r5, r7, lsl #16
     a60:	4a06056b 	bmi	182014 <__bss_end+0x16c4d4>
     a64:	0d030a05 	vstreq	s0, [r3, #-20]	; 0xffffffec
     a68:	4a080566 	bmi	202008 <__bss_end+0x1ec4c8>
     a6c:	054c2505 	strbeq	r2, [ip, #-1285]	; 0xfffffafb
     a70:	09054a0b 	stmdbeq	r5, {r0, r1, r3, r9, fp, lr}
     a74:	4c080566 	cfstr32mi	mvfx0, [r8], {102}	; 0x66
     a78:	0a031a05 	beq	c7294 <__bss_end+0xb1754>
     a7c:	6a0a054a 	bvs	281fac <__bss_end+0x26c46c>
     a80:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     a84:	0b054e25 	bleq	154320 <__bss_end+0x13e7e0>
     a88:	6609054a 	strvs	r0, [r9], -sl, asr #10
     a8c:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
     a90:	0c053305 	stceq	3, cr3, [r5], {5}
     a94:	4e16052f 	cfmul64mi	mvdx0, mvdx6, mvdx15
     a98:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     a9c:	0d054e06 	stceq	14, cr4, [r5, #-24]	; 0xffffffe8
     aa0:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     aa4:	056a0605 	strbeq	r0, [sl, #-1541]!	; 0xfffff9fb
     aa8:	03056714 	movweq	r6, #22292	; 0x5714
     aac:	002f334e 	eoreq	r3, pc, lr, asr #6
     ab0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ab4:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     ab8:	02006603 	andeq	r6, r0, #3145728	; 0x300000
     abc:	00820404 	addeq	r0, r2, r4, lsl #8
     ac0:	66060402 	strvs	r0, [r6], -r2, lsl #8
     ac4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
     ac8:	31060604 	tstcc	r6, r4, lsl #12
     acc:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     ad0:	05ba0604 	ldreq	r0, [sl, #1540]!	; 0x604
     ad4:	06054c08 	streq	r4, [r5], -r8, lsl #24
     ad8:	031c0566 	tsteq	ip, #427819008	; 0x19800000
     adc:	05054a11 	streq	r4, [r5, #-2577]	; 0xfffff5ef
     ae0:	0905834a 	stmdbeq	r5, {r1, r3, r6, r8, r9, pc}
     ae4:	4a07054b 	bmi	1c2018 <__bss_end+0x1ac4d8>
     ae8:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
     aec:	0e055005 	cdpeq	0, 0, cr5, cr5, cr5, {0}
     af0:	4f04054b 	svcmi	0x0004054b
     af4:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
     af8:	0105300b 	tsteq	r5, fp
     afc:	03040200 	movweq	r0, #16896	; 0x4200
     b00:	19056a31 	stmdbne	r5, {r0, r4, r5, r9, fp, sp, lr}
     b04:	4d0e05c1 	cfstr32mi	mvfx0, [lr, #-772]	; 0xfffffcfc
     b08:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     b0c:	0f054e04 	svceq	0x00054e04
     b10:	4a040567 	bmi	1020b4 <__bss_end+0xec574>
     b14:	056b0f05 	strbeq	r0, [fp, #-3845]!	; 0xfffff0fb
     b18:	09054a06 	stmdbeq	r5, {r1, r2, r9, fp, lr}
     b1c:	4a07054c 	bmi	1c2054 <__bss_end+0x1ac514>
     b20:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     b24:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     b28:	4e090566 	cfsh32mi	mvfx0, mvfx9, #54
     b2c:	05682305 	strbeq	r2, [r8, #-773]!	; 0xfffffcfb
     b30:	82090310 	andhi	r0, r9, #16, 6	; 0x40000000
     b34:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     b38:	056a690c 	strbeq	r6, [sl, #-2316]!	; 0xfffff6f4
     b3c:	01055009 	tsteq	r5, r9
     b40:	02056a2f 	andeq	r6, r5, #192512	; 0x2f000
     b44:	2f0c0587 	svccs	0x000c0587
     b48:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
     b4c:	01053009 	tsteq	r5, r9
     b50:	0b056a2f 	bleq	15b414 <__bss_end+0x1458d4>
     b54:	68090587 	stmdavs	r9, {r0, r1, r2, r7, r8, sl}
     b58:	862f0105 	strthi	r0, [pc], -r5, lsl #2
     b5c:	05871405 	streq	r1, [r7, #1029]	; 0x405
     b60:	054b4a02 	strbeq	r4, [fp, #-2562]	; 0xfffff5fe
     b64:	22034b01 	andcs	r4, r3, #1024	; 0x400
     b68:	bb0d0566 	bllt	342108 <__bss_end+0x32c5c8>
     b6c:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     b70:	4a0d0309 	bmi	34179c <__bss_end+0x32bc5c>
     b74:	05681d05 	strbeq	r1, [r8, #-3333]!	; 0xfffff2fb
     b78:	03054a4d 	movweq	r4, #23117	; 0x5a4d
     b7c:	6716054a 	ldrvs	r0, [r6, -sl, asr #10]
     b80:	054a2005 	strbeq	r2, [sl, #-5]
     b84:	0e054a16 			; <UNDEFINED> instruction: 0x0e054a16
     b88:	4a240567 	bmi	90212c <__bss_end+0x8ec5ec>
     b8c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     b90:	17054c20 	strne	r4, [r5, -r0, lsr #24]
     b94:	6b1d054a 	blvs	7420c4 <__bss_end+0x72c584>
     b98:	054a4e05 	strbeq	r4, [sl, #-3589]	; 0xfffff1fb
     b9c:	17054a03 	strne	r4, [r5, -r3, lsl #20]
     ba0:	4a210567 	bmi	842144 <__bss_end+0x82c604>
     ba4:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     ba8:	2405830e 	strcs	r8, [r5], #-782	; 0xfffffcf2
     bac:	4a05054a 	bmi	1420dc <__bss_end+0x12c59c>
     bb0:	054c2305 	strbeq	r2, [ip, #-773]	; 0xfffffcfb
     bb4:	2c054a35 			; <UNDEFINED> instruction: 0x2c054a35
     bb8:	4a18054a 	bmi	6020e8 <__bss_end+0x5ec5a8>
     bbc:	054e0d05 	strbeq	r0, [lr, #-3333]	; 0xfffff2fb
     bc0:	01054a02 	tsteq	r5, r2, lsl #20
     bc4:	0d056a67 	vstreq	s12, [r5, #-412]	; 0xfffffe64
     bc8:	4a04059f 	bmi	10224c <__bss_end+0xec70c>
     bcc:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
     bd0:	17054a21 	strne	r4, [r5, -r1, lsr #20]
     bd4:	670e054a 	strvs	r0, [lr, -sl, asr #10]
     bd8:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     bdc:	21054a05 	tstcs	r5, r5, lsl #20
     be0:	4a18054c 	bmi	602118 <__bss_end+0x5ec5d8>
     be4:	054c3205 	strbeq	r3, [ip, #-517]	; 0xfffffdfb
     be8:	03054a54 	movweq	r4, #23124	; 0x5a54
     bec:	6801054a 	stmdavs	r1, {r1, r3, r6, r8, sl}
     bf0:	8902056a 	stmdbhi	r2, {r1, r3, r5, r6, r8, sl}
     bf4:	32310805 	eorscc	r0, r1, #327680	; 0x50000
     bf8:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     bfc:	09054e23 	stmdbeq	r5, {r0, r1, r5, r9, sl, fp, lr}
     c00:	6607054a 	strvs	r0, [r7], -sl, asr #10
     c04:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     c08:	05053110 	streq	r3, [r5, #-272]	; 0xfffffef0
     c0c:	0311054a 	tsteq	r1, #310378496	; 0x12800000
     c10:	08056671 	stmdaeq	r5, {r0, r4, r5, r6, r9, sl, sp, lr}
     c14:	0305054a 	movweq	r0, #21834	; 0x554a
     c18:	14056613 	strne	r6, [r5], #-1555	; 0xfffff9ed
     c1c:	68020532 	stmdavs	r2, {r1, r4, r5, r8, sl}
     c20:	30080531 	andcc	r0, r8, r1, lsr r5
     c24:	4a060530 	bmi	1820ec <__bss_end+0x16c5ac>
     c28:	054c2305 	strbeq	r2, [ip, #-773]	; 0xfffffcfb
     c2c:	07054a09 	streq	r4, [r5, -r9, lsl #20]
     c30:	4c060566 	cfstr32mi	mvfx0, [r6], {102}	; 0x66
     c34:	05311005 	ldreq	r1, [r1, #-5]!
     c38:	11054a05 	tstne	r5, r5, lsl #20
     c3c:	05667703 	strbeq	r7, [r6, #-1795]!	; 0xfffff8fd
     c40:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
     c44:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
     c48:	02053214 	andeq	r3, r5, #20, 4	; 0x40000001
     c4c:	2f010568 	svccs	0x00010568
     c50:	8502056a 	strhi	r0, [r2, #-1386]	; 0xfffffa96
     c54:	052f1605 	streq	r1, [pc, #-1541]!	; 657 <_start-0x79a9>
     c58:	0b054a2a 	bleq	153508 <__bss_end+0x13d9c8>
     c5c:	2f020582 	svccs	0x00020582
     c60:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     c64:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     c68:	29058615 	stmdbcs	r5, {r0, r2, r4, r9, sl, pc}
     c6c:	820a054a 	andhi	r0, sl, #310378496	; 0x12800000
     c70:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     c74:	05862f01 	streq	r2, [r6, #3841]	; 0xf01
     c78:	16058502 	strne	r8, [r5], -r2, lsl #10
     c7c:	4a34052f 	bmi	d02140 <__bss_end+0xcec600>
     c80:	054a2a05 	strbeq	r2, [sl, #-2565]	; 0xfffff5fb
     c84:	0205820b 	andeq	r8, r5, #-1342177280	; 0xb0000000
     c88:	3009052f 	andcc	r0, r9, pc, lsr #10
     c8c:	6a2f0105 	bvs	bc10a8 <__bss_end+0xbab568>
     c90:	05861505 	streq	r1, [r6, #1285]	; 0x505
     c94:	29054a33 	stmdbcs	r5, {r0, r1, r4, r5, r9, fp, lr}
     c98:	820a054a 	andhi	r0, sl, #310378496	; 0x12800000
     c9c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     ca0:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     ca4:	88010100 	stmdahi	r1, {r8}
     ca8:	03000008 	movweq	r0, #8
     cac:	00016a00 	andeq	r6, r1, r0, lsl #20
     cb0:	fb010200 	blx	414ba <__bss_end+0x2b97a>
     cb4:	01000d0e 	tsteq	r0, lr, lsl #26
     cb8:	00010101 	andeq	r0, r1, r1, lsl #2
     cbc:	00010000 	andeq	r0, r1, r0
     cc0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     cc4:	2f656d6f 	svccs	0x00656d6f
     cc8:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     ccc:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     cd0:	616f6c6e 	cmnvs	pc, lr, ror #24
     cd4:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     cd8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     cdc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     ce0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     ce4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     ce8:	2f534f54 	svccs	0x00534f54
     cec:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     cf0:	534f5452 	movtpl	r5, #62546	; 0xf452
     cf4:	756f532f 	strbvc	r5, [pc, #-815]!	; 9cd <_start-0x7633>
     cf8:	00656372 	rsbeq	r6, r5, r2, ror r3
     cfc:	74706f2f 	ldrbtvc	r6, [r0], #-3887	; 0xfffff0d1
     d00:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     d04:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     d08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     d0c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     d10:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     d14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     d18:	61652d65 	cmnvs	r5, r5, ror #26
     d1c:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
     d20:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
     d24:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     d28:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     d2c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     d30:	2f656d6f 	svccs	0x00656d6f
     d34:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     d38:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     d3c:	616f6c6e 	cmnvs	pc, lr, ror #24
     d40:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     d44:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     d48:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     d4c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     d50:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     d54:	2f534f54 	svccs	0x00534f54
     d58:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     d5c:	534f5452 	movtpl	r5, #62546	; 0xf452
     d60:	756f532f 	strbvc	r5, [pc, #-815]!	; a39 <_start-0x75c7>
     d64:	2f656372 	svccs	0x00656372
     d68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d6c:	00656475 	rsbeq	r6, r5, r5, ror r4
     d70:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; cbc <_start-0x7344>
     d74:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     d78:	442f6e61 	strtmi	r6, [pc], #-3681	; d80 <_start-0x7280>
     d7c:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     d80:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     d84:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     d88:	72656270 	rsbvc	r6, r5, #112, 4
     d8c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     d90:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     d94:	4f545265 	svcmi	0x00545265
     d98:	72462f53 	subvc	r2, r6, #332	; 0x14c
     d9c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     da0:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     da4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     da8:	6f702f65 	svcvs	0x00702f65
     dac:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     db0:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     db4:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     db8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     dbc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     dc0:	00006950 	andeq	r6, r0, r0, asr r9
     dc4:	6b736174 	blvs	1cd939c <__bss_end+0x1cc385c>
     dc8:	00632e73 	rsbeq	r2, r3, r3, ror lr
     dcc:	73000001 	movwvc	r0, #1
     dd0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
     dd4:	00682e66 	rsbeq	r2, r8, r6, ror #28
     dd8:	70000002 	andvc	r0, r0, r2
     ddc:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
     de0:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     de4:	00030068 	andeq	r0, r3, r8, rrx
     de8:	726f7000 	rsbvc	r7, pc, #0
     dec:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
     df0:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     df4:	00000400 	andeq	r0, r0, r0, lsl #8
     df8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     dfc:	534f5452 	movtpl	r5, #62546	; 0xf452
     e00:	0300682e 	movweq	r6, #2094	; 0x82e
     e04:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     e08:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     e0c:	00000300 	andeq	r0, r0, r0, lsl #6
     e10:	6b736174 	blvs	1cd93e8 <__bss_end+0x1cc38a8>
     e14:	0300682e 	movweq	r6, #2094	; 0x82e
     e18:	05000000 	streq	r0, [r0, #-0]
     e1c:	02050001 	andeq	r0, r5, #1
     e20:	00011ba0 	andeq	r1, r1, r0, lsr #23
     e24:	01039b03 	tsteq	r3, r3, lsl #22
     e28:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
     e2c:	a00405f2 	strdge	r0, [r4], -r2
     e30:	18031b05 	stmdane	r3, {r0, r2, r8, r9, fp, ip}
     e34:	4a250566 	bmi	9423d4 <__bss_end+0x92c894>
     e38:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
     e3c:	55054b2c 	strpl	r4, [r5, #-2860]	; 0xfffff4d4
     e40:	2e11052e 	cfmul64cs	mvdx0, mvdx1, mvdx14
     e44:	14030305 	strne	r0, [r3], #-773	; 0xfffffcfb
     e48:	031d052e 	tsteq	sp, #192937984	; 0xb800000
     e4c:	1b05d60c 	blne	176684 <__bss_end+0x160b44>
     e50:	5105059e 			; <UNDEFINED> instruction: 0x5105059e
     e54:	056b1305 	strbeq	r1, [fp, #-773]!	; 0xfffffcfb
     e58:	1a056b03 	bne	15ba6c <__bss_end+0x145f2c>
     e5c:	9f150530 	svcls	0x00150530
     e60:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     e64:	20054e12 	andcs	r4, r5, r2, lsl lr
     e68:	4a070568 	bmi	1c2410 <__bss_end+0x1ac8d0>
     e6c:	054f0605 	strbeq	r0, [pc, #-1541]	; 86f <_start-0x7791>
     e70:	0705521b 	smladeq	r5, fp, r2, r5
     e74:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
     e78:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
     e7c:	10056814 	andne	r6, r5, r4, lsl r8
     e80:	4a1d056d 	bmi	74243c <__bss_end+0x72c8fc>
     e84:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     e88:	17054c21 	strne	r4, [r5, -r1, lsr #24]
     e8c:	0310054a 	tsteq	r0, #310378496	; 0x12800000
     e90:	04054a09 	streq	r4, [r5], #-2569	; 0xfffff5f7
     e94:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     e98:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     e9c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     ea0:	02000c05 	andeq	r0, r0, #1280	; 0x500
     ea4:	08060304 	stmdaeq	r6, {r2, r8, r9}
     ea8:	00030592 	muleq	r3, r2, r5
     eac:	4e030402 	cdpmi	4, 0, cr0, cr3, cr2, {0}
     eb0:	054e0b05 	strbeq	r0, [lr, #-2821]	; 0xfffff4fb
     eb4:	19054e04 	stmdbne	r5, {r2, r9, sl, fp, lr}
     eb8:	4a050568 	bmi	142460 <__bss_end+0x12c920>
     ebc:	054e1405 	strbeq	r1, [lr, #-1029]	; 0xfffffbfb
     ec0:	05056606 	streq	r6, [r5, #-1542]	; 0xfffff9fa
     ec4:	33090568 	movwcc	r0, #38248	; 0x9568
     ec8:	052f0105 	streq	r0, [pc, #-261]!	; dcb <_start-0x7235>
     ecc:	05420802 	strbeq	r0, [r2, #-2050]	; 0xfffff7fe
     ed0:	17058503 	strne	r8, [r5, -r3, lsl #10]
     ed4:	4a060532 	bmi	1823a4 <__bss_end+0x16c864>
     ed8:	05681405 	strbeq	r1, [r8, #-1029]!	; 0xfffffbfb
     edc:	02004e0c 	andeq	r4, r0, #12, 28	; 0xc0
     ee0:	66060104 	strvs	r0, [r6], -r4, lsl #2
     ee4:	02040200 	andeq	r0, r4, #0, 4
     ee8:	000a0566 	andeq	r0, sl, r6, ror #10
     eec:	06040402 	streq	r0, [r4], -r2, lsl #8
     ef0:	0004052e 	andeq	r0, r4, lr, lsr #10
     ef4:	34040402 	strcc	r0, [r4], #-1026	; 0xfffffbfe
     ef8:	02001d05 	andeq	r1, r0, #320	; 0x140
     efc:	05850404 	streq	r0, [r5, #1028]	; 0x404
     f00:	04020006 	streq	r0, [r2], #-6
     f04:	05054a04 	streq	r4, [r5, #-2564]	; 0xfffff5fc
     f08:	8504054c 	strhi	r0, [r4, #-1356]	; 0xfffffab4
     f0c:	a21005a3 	andsge	r0, r0, #683671552	; 0x28c00000
     f10:	05a20305 	streq	r0, [r2, #773]!	; 0x305
     f14:	05053119 	streq	r3, [r5, #-281]	; 0xfffffee7
     f18:	4c06054a 	cfstr32mi	mvfx0, [r6], {74}	; 0x4a
     f1c:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     f20:	10033102 	andne	r3, r3, r2, lsl #2
     f24:	a02105f2 	strdge	r0, [r1], -r2	; <UNPREDICTABLE>
     f28:	054f0305 	strbeq	r0, [pc, #-773]	; c2b <_start-0x73d5>
     f2c:	10053112 	andne	r3, r5, r2, lsl r1
     f30:	6815054a 	ldmdavs	r5, {r1, r3, r6, r8, sl}
     f34:	054a1305 	strbeq	r1, [sl, #-773]	; 0xfffffcfb
     f38:	19054a06 	stmdbne	r5, {r1, r2, r9, fp, lr}
     f3c:	4a070551 	bmi	1c2488 <__bss_end+0x1ac948>
     f40:	02004005 	andeq	r4, r0, #5
     f44:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     f48:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
     f4c:	13054a01 	movwne	r4, #23041	; 0x5a01
     f50:	6e190568 	cfmsc32vs	mvfx0, mvfx9, mvfx8
     f54:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     f58:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
     f5c:	2f056601 	svccs	0x00056601
     f60:	01040200 	mrseq	r0, R12_usr
     f64:	6813054a 	ldmdavs	r3, {r1, r3, r6, r8, sl}
     f68:	054f1805 	strbeq	r1, [pc, #-2053]	; 76b <_start-0x7895>
     f6c:	31056806 	tstcc	r5, r6, lsl #16
     f70:	4a05056d 	bmi	14252c <__bss_end+0x12c9ec>
     f74:	4d150567 	cfldr32mi	mvfx0, [r5, #-412]	; 0xfffffe64
     f78:	054e0505 	strbeq	r0, [lr, #-1285]	; 0xfffffafb
     f7c:	02056804 	andeq	r6, r5, #4, 16	; 0x40000
     f80:	1705a630 	smladxne	r5, r0, r6, sl
     f84:	4d050584 	cfstr32mi	mvfx0, [r5, #-528]	; 0xfffffdf0
     f88:	05680405 	strbeq	r0, [r8, #-1029]!	; 0xfffffbfb
     f8c:	2e0e031e 	mcrcs	3, 0, r0, cr14, cr14, {0}
     f90:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
     f94:	05056b31 	streq	r6, [r5, #-2865]	; 0xfffff4cf
     f98:	1605674a 	strne	r6, [r5], -sl, asr #14
     f9c:	4f05054c 	svcmi	0x0005054c
     fa0:	05680405 	strbeq	r0, [r8, #-1029]!	; 0xfffffbfb
     fa4:	05a63002 	streq	r3, [r6, #2]!
     fa8:	0c058603 	stceq	6, cr8, [r5], {3}
     fac:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
     fb0:	00660601 	rsbeq	r0, r6, r1, lsl #12
     fb4:	66020402 	strvs	r0, [r2], -r2, lsl #8
     fb8:	02000a05 	andeq	r0, r0, #20480	; 0x5000
     fbc:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
     fc0:	02000d05 	andeq	r0, r0, #320	; 0x140
     fc4:	052f0404 	streq	r0, [pc, #-1028]!	; bc8 <_start-0x7438>
     fc8:	04020003 	streq	r0, [r2], #-3
     fcc:	0a056804 	beq	15afe4 <__bss_end+0x1454a4>
     fd0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     fd4:	00020530 	andeq	r0, r2, r0, lsr r5
     fd8:	2f040402 	svccs	0x00040402
     fdc:	a110058a 	tstge	r0, sl, lsl #11
     fe0:	054f0505 	strbeq	r0, [pc, #-1285]	; ae3 <_start-0x751d>
     fe4:	03056812 	movweq	r6, #22546	; 0x5812
     fe8:	300f054d 	andcc	r0, pc, sp, asr #10
     fec:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     ff0:	004f680c 	subeq	r6, pc, ip, lsl #16
     ff4:	06010402 	streq	r0, [r1], -r2, lsl #8
     ff8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
     ffc:	0a056602 	beq	15a80c <__bss_end+0x144ccc>
    1000:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1004:	17052e06 	strne	r2, [r5, -r6, lsl #28]
    1008:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    100c:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    1010:	04020006 	streq	r0, [r2], #-6
    1014:	07056a04 	streq	r6, [r5, -r4, lsl #20]
    1018:	84080586 	strhi	r0, [r8], #-1414	; 0xfffffa7a
    101c:	056c1605 	strbeq	r1, [ip, #-1541]!	; 0xfffff9fb
    1020:	1505690c 	strne	r6, [r5, #-2316]	; 0xfffff6f4
    1024:	0318056a 	tsteq	r8, #444596224	; 0x1a800000
    1028:	05054a13 	streq	r4, [r5, #-2579]	; 0xfffff5ed
    102c:	8809056a 	stmdahi	r9, {r1, r3, r5, r6, r8, sl}
    1030:	20080705 	andcs	r0, r8, r5, lsl #14
    1034:	834f0605 	movthi	r0, #62981	; 0xf605
    1038:	01040200 	mrseq	r0, R12_usr
    103c:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    1040:	05820304 	streq	r0, [r2, #772]	; 0x304
    1044:	93080607 	movwls	r0, #34311	; 0x8607
    1048:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    104c:	02053203 	andeq	r3, r5, #805306368	; 0x30000000
    1050:	0305c22f 	movweq	ip, #21039	; 0x522f
    1054:	32180585 	andscc	r0, r8, #557842432	; 0x21400000
    1058:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    105c:	0c056815 	stceq	8, cr6, [r5], {21}
    1060:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
    1064:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1068:	66020402 	strvs	r0, [r2], -r2, lsl #8
    106c:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1070:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    1074:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
    1078:	05330404 	ldreq	r0, [r3, #-1028]!	; 0xfffffbfc
    107c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    1080:	06058504 	streq	r8, [r5], -r4, lsl #10
    1084:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1088:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    108c:	05850405 	streq	r0, [r5, #1029]	; 0x405
    1090:	0505a003 	streq	sl, [r5, #-3]
    1094:	681a0530 	ldmdavs	sl, {r4, r5, r8, sl}
    1098:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    109c:	02054d05 	andeq	r4, r5, #320	; 0x140
    10a0:	052e1503 	streq	r1, [lr, #-1283]!	; 0xfffffafd
    10a4:	2e720309 	cdpcs	3, 7, cr0, cr2, cr9, {0}
    10a8:	054a3805 	strbeq	r3, [sl, #-2053]	; 0xfffff7fb
    10ac:	13054a07 	movwne	r4, #23047	; 0x5a07
    10b0:	6e020550 	cfrshl32vs	mvfx2, mvfx0, r0
    10b4:	052a0605 	streq	r0, [sl, #-1541]!	; 0xfffff9fb
    10b8:	05de3202 	ldrbeq	r3, [lr, #514]	; 0x202
    10bc:	17058310 	smladne	r5, r0, r3, r8
    10c0:	5107054b 	tstpl	r7, fp, asr #10
    10c4:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    10c8:	06056908 	streq	r6, [r5], -r8, lsl #18
    10cc:	6c09054a 	cfstr32vs	mvfx0, [r9], {74}	; 0x4a
    10d0:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    10d4:	0a054c0e 	beq	154114 <__bss_end+0x13e5d4>
    10d8:	2f02054f 	svccs	0x0002054f
    10dc:	8a0905c2 	bhi	2427ec <__bss_end+0x22ccac>
    10e0:	054e0505 	strbeq	r0, [lr, #-1285]	; 0xfffffafb
    10e4:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    10e8:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
    10ec:	01040200 	mrseq	r0, R12_usr
    10f0:	6804054a 	stmdavs	r4, {r1, r3, r6, r8, sl}
    10f4:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    10f8:	06056607 	streq	r6, [r5], -r7, lsl #12
    10fc:	02008350 	andeq	r8, r0, #80, 6	; 0x40000001
    1100:	ba060104 	blt	181518 <__bss_end+0x16b9d8>
    1104:	03040200 	movweq	r0, #16896	; 0x4200
    1108:	000f0582 	andeq	r0, pc, r2, lsl #11
    110c:	06030402 	streq	r0, [r3], -r2, lsl #8
    1110:	2b059308 	blcs	165d38 <__bss_end+0x1501f8>
    1114:	03040200 	movweq	r0, #16896	; 0x4200
    1118:	0008054a 	andeq	r0, r8, sl, asr #10
    111c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1120:	054e0705 	strbeq	r0, [lr, #-1797]	; 0xfffff8fb
    1124:	02053204 	andeq	r3, r5, #4, 4	; 0x40000000
    1128:	ba090330 	blt	241df0 <__bss_end+0x22c2b0>
    112c:	05831005 	streq	r1, [r3, #5]
    1130:	1a055009 	bne	15515c <__bss_end+0x13f61c>
    1134:	4c08054c 	cfstr32mi	mvfx0, [r8], {76}	; 0x4c
    1138:	05660605 	strbeq	r0, [r6, #-1541]!	; 0xfffff9fb
    113c:	07054e1e 	smladeq	r5, lr, lr, r4
    1140:	4c1e054a 	cfldr32mi	mvfx0, [lr], {74}	; 0x4a
    1144:	054a3a05 	strbeq	r3, [sl, #-2565]	; 0xfffff5fb
    1148:	1505662b 	strne	r6, [r5, #-1579]	; 0xfffff9d5
    114c:	2f060582 	svccs	0x00060582
    1150:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
    1154:	00ba0601 	adcseq	r0, sl, r1, lsl #12
    1158:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
    115c:	05b30806 	ldreq	r0, [r3, #2054]!	; 0x806
    1160:	0205a40a 	andeq	sl, r5, #167772160	; 0xa000000
    1164:	0301052f 	movweq	r0, #5423	; 0x152f
    1168:	0d05f20d 	sfmeq	f7, 1, [r5, #-52]	; 0xffffffcc
    116c:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    1170:	080d0304 	stmdaeq	sp, {r2, r8, r9}
    1174:	030305ac 	movweq	r0, #13740	; 0x35ac
    1178:	1505660a 	strne	r6, [r5, #-1546]	; 0xfffff9f6
    117c:	670e05a0 	strvs	r0, [lr, -r0, lsr #11]
    1180:	09030705 	stmdbeq	r3, {r0, r2, r8, r9, sl}
    1184:	03010566 	movweq	r0, #5478	; 0x1566
    1188:	05da2e0d 	ldrbeq	r2, [sl, #3597]	; 0xe0d
    118c:	14054e02 	strne	r4, [r5], #-3586	; 0xfffff1fe
    1190:	6702059f 			; <UNDEFINED> instruction: 0x6702059f
    1194:	6a2f0105 	bvs	bc15b0 <__bss_end+0xbaba70>
    1198:	054d0205 	strbeq	r0, [sp, #-517]	; 0xfffffdfb
    119c:	05a29f01 	streq	r9, [r2, #3841]!	; 0xf01
    11a0:	02056816 	andeq	r6, r5, #1441792	; 0x160000
    11a4:	054a0b03 	strbeq	r0, [sl, #-2819]	; 0xfffff4fd
    11a8:	1c053003 	stcne	0, cr3, [r5], {3}
    11ac:	4a0505a0 	bmi	142834 <__bss_end+0x12ccf4>
    11b0:	054c1f05 	strbeq	r1, [ip, #-3845]	; 0xfffff0fb
    11b4:	13054a06 	movwne	r4, #23046	; 0x5a06
    11b8:	4e0a054c 	cfsh32mi	mvfx0, mvfx10, #44
    11bc:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
    11c0:	06054a0c 	streq	r4, [r5], -ip, lsl #20
    11c4:	0067672f 	rsbeq	r6, r7, pc, lsr #14
    11c8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11cc:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
    11d0:	0f056603 	svceq	0x00056603
    11d4:	03040200 	movweq	r0, #16896	; 0x4200
    11d8:	055c0806 	ldrbeq	r0, [ip, #-2054]	; 0xfffff7fa
    11dc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    11e0:	08052e03 	stmdaeq	r5, {r0, r1, r9, sl, fp, sp}
    11e4:	03040200 	movweq	r0, #16896	; 0x4200
    11e8:	4c160566 	cfldr32mi	mvfx0, [r6], {102}	; 0x66
    11ec:	75030c05 	strvc	r0, [r3, #-3077]	; 0xfffff3fb
    11f0:	4a0a054a 	bmi	282720 <__bss_end+0x26cbe0>
    11f4:	12031705 	andne	r1, r3, #1310720	; 0x140000
    11f8:	4a07054a 	bmi	1c2728 <__bss_end+0x1acbe8>
    11fc:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
    1200:	052f3007 	streq	r3, [pc, #-7]!	; 1201 <_start-0x6dff>
    1204:	0b059b1b 	bleq	167e78 <__bss_end+0x152338>
    1208:	0316054a 	tsteq	r6, #310378496	; 0x12800000
    120c:	07054a0b 	streq	r4, [r5, -fp, lsl #20]
    1210:	0038054f 	eorseq	r0, r8, pc, asr #10
    1214:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1218:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    121c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1220:	13054c16 	movwne	r4, #23574	; 0x5c16
    1224:	6706054b 	strvs	r0, [r6, -fp, asr #10]
    1228:	05330205 	ldreq	r0, [r3, #-517]!	; 0xfffffdfb
    122c:	01053009 	tsteq	r5, r9
    1230:	080e032f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}
    1234:	6a020558 	bvs	8279c <__bss_end+0x6cc5c>
    1238:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    123c:	09056802 	stmdbeq	r5, {r1, fp, sp, lr}
    1240:	2f010530 	svccs	0x00010530
    1244:	6a190586 	bvs	642864 <__bss_end+0x62cd24>
    1248:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    124c:	01056909 	tsteq	r5, r9, lsl #18
    1250:	0905a22f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r9, sp, pc}
    1254:	4b01054d 	blmi	42790 <__bss_end+0x2cc50>
    1258:	9e01ae03 	cdpls	14, 0, cr10, cr1, cr3, {0}
    125c:	056c1b05 	strbeq	r1, [ip, #-2821]!	; 0xfffff4fb
    1260:	03054a04 	movweq	r4, #23044	; 0x5a04
    1264:	9f12054c 	svcls	0x0012054c
    1268:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    126c:	4a09030b 	bmi	241ea0 <__bss_end+0x22c360>
    1270:	05671605 	strbeq	r1, [r7, #-1541]!	; 0xfffff9fb
    1274:	1305831e 	movwne	r8, #21278	; 0x531e
    1278:	a0080567 	andge	r0, r8, r7, ror #10
    127c:	05660605 	strbeq	r0, [r6, #-1541]!	; 0xfffff9fb
    1280:	058a511a 	streq	r5, [sl, #282]	; 0x11a
    1284:	1c05660b 	stcne	6, cr6, [r5], {11}
    1288:	4a1a054b 	bmi	6827bc <__bss_end+0x66cc7c>
    128c:	004f0305 	subeq	r0, pc, r5, lsl #6
    1290:	060c0402 	streq	r0, [ip], -r2, lsl #8
    1294:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    1298:	02009e02 	andeq	r9, r0, #2, 28
    129c:	00820304 	addeq	r0, r2, r4, lsl #6
    12a0:	08040402 	stmdaeq	r4, {r1, sl}
    12a4:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
    12a8:	02008205 	andeq	r8, r0, #1342177280	; 0x50000000
    12ac:	00f20604 	rscseq	r0, r2, r4, lsl #12
    12b0:	82080402 	andhi	r0, r8, #33554432	; 0x2000000
    12b4:	09040200 	stmdbeq	r4, {r9}
    12b8:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    12bc:	0806820b 	stmdaeq	r6, {r0, r1, r3, r9, pc}
    12c0:	030105b0 	movweq	r0, #5552	; 0x15b0
    12c4:	02059e17 	andeq	r9, r5, #368	; 0x170
    12c8:	05059608 	streq	r9, [r5, #-1544]	; 0xfffff9f8
    12cc:	680905a2 	stmdavs	r9, {r1, r5, r7, r8, sl}
    12d0:	4f030586 	svcmi	0x00030586
    12d4:	052f1405 	streq	r1, [pc, #-1029]!	; ed7 <_start-0x7129>
    12d8:	02056703 	andeq	r6, r5, #786432	; 0xc0000
    12dc:	05058a2f 	streq	r8, [r5, #-2607]	; 0xfffff5d1
    12e0:	68090587 	stmdavs	r9, {r0, r1, r2, r7, r8, sl}
    12e4:	4f030586 	svcmi	0x00030586
    12e8:	052f0c05 	streq	r0, [pc, #-3077]!	; 6eb <_start-0x7915>
    12ec:	0a056703 	beq	15af00 <__bss_end+0x1453c0>
    12f0:	2f020530 	svccs	0x00020530
    12f4:	a305058a 	movwge	r0, #21898	; 0x558a
    12f8:	86680905 	strbthi	r0, [r8], -r5, lsl #18
    12fc:	054d0b05 	strbeq	r0, [sp, #-2821]	; 0xfffff4fb
    1300:	12054a05 	andne	r4, r5, #20480	; 0x5000
    1304:	4a0e054c 	bmi	38283c <__bss_end+0x36ccfc>
    1308:	05860c05 	streq	r0, [r6, #3077]	; 0xc05
    130c:	02054d0a 	andeq	r4, r5, #640	; 0x280
    1310:	8801052f 	stmdahi	r1, {r0, r1, r2, r3, r5, r8, sl}
    1314:	05671b05 	strbeq	r1, [r7, #-2821]!	; 0xfffff4fb
    1318:	10054a04 	andne	r4, r5, r4, lsl #20
    131c:	0301054e 	movweq	r0, #5454	; 0x154e
    1320:	04056633 	streq	r6, [r5], #-1587	; 0xfffff9cd
    1324:	052e6e03 	streq	r6, [lr, #-3587]!	; 0xfffff1fd
    1328:	08059b0a 	stmdaeq	r5, {r1, r3, r8, r9, fp, ip, pc}
    132c:	03052008 	movweq	r2, #20488	; 0x5008
    1330:	004a0d03 	subeq	r0, sl, r3, lsl #26
    1334:	06010402 	streq	r0, [r1], -r2, lsl #8
    1338:	00122802 	andseq	r2, r2, r2, lsl #16
    133c:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
    1340:	a6060105 	strge	r0, [r6], -r5, lsl #2
    1344:	47052408 	strmi	r2, [r5, -r8, lsl #8]
    1348:	059e0b03 	ldreq	r0, [lr, #2819]	; 0xb03
    134c:	2e054a02 	vmlacs.f32	s8, s10, s4
    1350:	4a020587 	bmi	82974 <__bss_end+0x6ce34>
    1354:	056b0505 	strbeq	r0, [fp, #-1285]!	; 0xfffffafb
    1358:	04056b54 	streq	r6, [r5], #-2900	; 0xfffff4ac
    135c:	0301054a 	movweq	r0, #5450	; 0x154a
    1360:	1d058212 	sfmne	f0, 1, [r5, #-72]	; 0xffffffb8
    1364:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
    1368:	04054a10 	streq	r4, [r5], #-2576	; 0xfffff5f0
    136c:	03010567 	movweq	r0, #5479	; 0x1567
    1370:	26034a0b 	strcs	r4, [r3], -fp, lsl #20
    1374:	032005ba 			; <UNDEFINED> instruction: 0x032005ba
    1378:	11058211 	tstne	r5, r1, lsl r2
    137c:	4c02054a 	cfstr32mi	mvfx0, [r2], {74}	; 0x4a
    1380:	05841b05 	streq	r1, [r4, #2821]	; 0xb05
    1384:	03054a04 	movweq	r4, #23044	; 0x5a04
    1388:	0200834c 	andeq	r8, r0, #76, 6	; 0x30000001
    138c:	ba060104 	blt	1817a4 <__bss_end+0x16bc64>
    1390:	03040200 	movweq	r0, #16896	; 0x4200
    1394:	b2080682 	andlt	r0, r8, #136314880	; 0x8200000
    1398:	05a11405 	streq	r1, [r1, #1029]!	; 0x405
    139c:	04054a30 	streq	r4, [r5], #-2608	; 0xfffff5d0
    13a0:	500b0566 	andpl	r0, fp, r6, ror #10
    13a4:	4d09056a 	cfstr32mi	mvfx0, [r9, #-424]	; 0xfffffe58
    13a8:	f62f0105 			; <UNDEFINED> instruction: 0xf62f0105
    13ac:	05841c05 	streq	r1, [r4, #3077]	; 0xc05
    13b0:	0105831d 	tsteq	r5, sp, lsl r3
    13b4:	0205be83 	andeq	fp, r5, #2096	; 0x830
    13b8:	340805a4 	strcc	r0, [r8], #-1444	; 0xfffffa5c
    13bc:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    13c0:	25054c0d 	strcs	r4, [r5, #-3085]	; 0xfffff3f3
    13c4:	4a19056b 	bmi	642978 <__bss_end+0x62ce38>
    13c8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    13cc:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
    13d0:	3d054a01 	vstrcc	s8, [r5, #-4]
    13d4:	01040200 	mrseq	r0, R12_usr
    13d8:	0038054a 	eorseq	r0, r8, sl, asr #10
    13dc:	4a010402 	bmi	423ec <__bss_end+0x2c8ac>
    13e0:	05500c05 	ldrbeq	r0, [r0, #-3077]	; 0xfffff3fb
    13e4:	59056821 	stmdbpl	r5, {r0, r5, fp, sp, lr}
    13e8:	4a0e054a 	bmi	382918 <__bss_end+0x36cdd8>
    13ec:	052e7105 	streq	r7, [lr, #-261]!	; 0xfffffefb
    13f0:	18054a0a 	stmdane	r5, {r1, r3, r9, fp, lr}
    13f4:	4a50054d 	bmi	1402930 <__bss_end+0x13ecdf0>
    13f8:	054a3405 	strbeq	r3, [sl, #-1029]	; 0xfffffbfb
    13fc:	04052e13 	streq	r2, [r5], #-3603	; 0xfffff1ed
    1400:	4b0c059f 	blmi	302a84 <__bss_end+0x2ecf44>
    1404:	4d02056a 	cfstr32mi	mvfx0, [r2, #-424]	; 0xfffffe58
    1408:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    140c:	05a22f01 	streq	r2, [r2, #3841]!	; 0xf01
    1410:	01054b0f 	tsteq	r5, pc, lsl #22
    1414:	9e320367 	cdpls	3, 3, cr0, cr2, cr7, {3}
    1418:	05890305 	streq	r0, [r9, #773]	; 0x305
    141c:	2e170308 	cdpcs	3, 1, cr0, cr7, cr8, {0}
    1420:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1424:	03054c05 	movweq	r4, #23557	; 0x5c05
    1428:	052e6703 	streq	r6, [lr, #-1795]!	; 0xfffff8fd
    142c:	4a3a0301 	bmi	e82038 <__bss_end+0xe6c4f8>
    1430:	05db1705 	ldrbeq	r1, [fp, #1797]	; 0x705
    1434:	59054a03 	stmdbpl	r5, {r0, r1, r9, fp, lr}
    1438:	6a040585 	bvs	102a54 <__bss_end+0xecf14>
    143c:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
    1440:	02054d14 	andeq	r4, r5, #20, 26	; 0x500
    1444:	6986836d 	stmibvs	r6, {r0, r2, r3, r5, r6, r8, r9, pc}
    1448:	03140583 	tsteq	r4, #549453824	; 0x20c00000
    144c:	0105660a 	tsteq	r5, sl, lsl #12
    1450:	03661403 	cmneq	r6, #50331648	; 0x3000000
    1454:	12056617 	andne	r6, r5, #24117248	; 0x1700000
    1458:	4a020569 	bmi	82a04 <__bss_end+0x6cec4>
    145c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1460:	05300304 	ldreq	r0, [r0, #-772]!	; 0xfffffcfc
    1464:	04020060 	streq	r0, [r2], #-96	; 0xffffffa0
    1468:	051e0803 	ldreq	r0, [lr, #-2051]	; 0xfffff7fd
    146c:	04020002 	streq	r0, [r2], #-2
    1470:	4b6b6601 	blmi	1adac7c <__bss_end+0x1ac513c>
    1474:	4e03054b 	cfsh32mi	mvfx0, mvfx3, #43
    1478:	50140550 	andspl	r0, r4, r0, asr r5
    147c:	05671c05 	strbeq	r1, [r7, #-3077]!	; 0xfffff3fb
    1480:	5c086701 	stcpl	7, cr6, [r8], {1}
    1484:	056d1605 	strbeq	r1, [sp, #-1541]!	; 0xfffff9fb
    1488:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
    148c:	2f14054c 	svccs	0x0014054c
    1490:	05ba1205 	ldreq	r1, [sl, #517]!	; 0x205
    1494:	06052f04 	streq	r2, [r5], -r4, lsl #30
    1498:	6a050530 	bvs	142960 <__bss_end+0x12ce20>
    149c:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
    14a0:	06054a0c 	streq	r4, [r5], -ip, lsl #20
    14a4:	059f834b 	ldreq	r8, [pc, #843]	; 17f7 <_start-0x6809>
    14a8:	0530a005 	ldreq	sl, [r0, #-5]!
    14ac:	05be4f01 	ldreq	r4, [lr, #3841]!	; 0xf01
    14b0:	12058402 	andne	r8, r5, #33554432	; 0x2000000
    14b4:	4a040584 	bmi	102acc <__bss_end+0xecf8c>
    14b8:	05690305 	strbeq	r0, [r9, #-773]!	; 0xfffffcfb
    14bc:	03054a56 	movweq	r4, #23126	; 0x5a56
    14c0:	0301054a 	movweq	r0, #5450	; 0x154a
    14c4:	0305820f 	movweq	r8, #21007	; 0x520f
    14c8:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
    14cc:	03054a4e 	movweq	r4, #23118	; 0x5a4e
    14d0:	8713054a 	ldrhi	r0, [r3, -sl, asr #10]
    14d4:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    14d8:	01056819 	tsteq	r5, r9, lsl r8
    14dc:	1a05f669 	bne	17ee88 <__bss_end+0x169348>
    14e0:	680405bf 	stmdavs	r4, {r0, r1, r2, r3, r4, r5, r7, r8, sl}
    14e4:	056b1705 	strbeq	r1, [fp, #-1797]!	; 0xfffff8fb
    14e8:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    14ec:	17056601 	strne	r6, [r5, -r1, lsl #12]
    14f0:	02040200 	andeq	r0, r4, #0, 4
    14f4:	001505ba 			; <UNDEFINED> instruction: 0x001505ba
    14f8:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    14fc:	02000f05 	andeq	r0, r0, #5, 30
    1500:	054c0404 	strbeq	r0, [ip, #-1028]	; 0xfffffbfc
    1504:	04020005 	streq	r0, [r2], #-5
    1508:	04054a04 	streq	r4, [r5], #-2564	; 0xfffff5fc
    150c:	4b0d054d 	blmi	342a48 <__bss_end+0x32cf08>
    1510:	056b1405 	strbeq	r1, [fp, #-1029]!	; 0xfffffbfb
    1514:	04054a3b 	streq	r4, [r5], #-2619	; 0xfffff5c5
    1518:	0309052e 	movweq	r0, #38190	; 0x952e
    151c:	0105820a 	tsteq	r5, sl, lsl #4
    1520:	0302052f 	movweq	r0, #9519	; 0x252f
    1524:	0566019d 	strbeq	r0, [r6, #-413]!	; 0xfffffe63
    1528:	05838a03 	streq	r8, [r3, #2563]	; 0xa03
    152c:	06024b02 	streq	r4, [r2], -r2, lsl #22
    1530:	80010100 	andhi	r0, r1, r0, lsl #2
    1534:	03000001 	movweq	r0, #1
    1538:	00005c00 	andeq	r5, r0, r0, lsl #24
    153c:	fb010200 	blx	41d46 <__bss_end+0x2c206>
    1540:	01000d0e 	tsteq	r0, lr, lsl #26
    1544:	00010101 	andeq	r0, r1, r1, lsl #2
    1548:	00010000 	andeq	r0, r1, r0
    154c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1550:	2f656d6f 	svccs	0x00656d6f
    1554:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
    1558:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
    155c:	616f6c6e 	cmnvs	pc, lr, ror #24
    1560:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
    1564:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1568:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    156c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1570:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1574:	2f534f54 	svccs	0x00534f54
    1578:	6f6d6544 	svcvs	0x006d6544
    157c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1580:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1584:	72690000 	rsbvc	r0, r9, #0
    1588:	00632e71 	rsbeq	r2, r3, r1, ror lr
    158c:	69000001 	stmdbvs	r0, {r0}
    1590:	682e7172 	stmdavs	lr!, {r1, r4, r5, r6, r8, ip, sp, lr}
    1594:	00000100 	andeq	r0, r0, r0, lsl #2
    1598:	00010500 	andeq	r0, r1, r0, lsl #10
    159c:	34c40205 	strbcc	r0, [r4], #517	; 0x205
    15a0:	1e030001 	cdpne	0, 0, cr0, cr3, cr1, {0}
    15a4:	9f080501 	svcls	0x00080501
    15a8:	05311b05 	ldreq	r1, [r1, #-2821]!	; 0xfffff4fb
    15ac:	10054a19 	andne	r4, r5, r9, lsl sl
    15b0:	1905312e 	stmdbne	r5, {r1, r2, r3, r5, r8, ip, sp}
    15b4:	66060585 	strvs	r0, [r6], -r5, lsl #11
    15b8:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
    15bc:	14056604 	strne	r6, [r5], #-1540	; 0xfffff9fc
    15c0:	660e05f5 			; <UNDEFINED> instruction: 0x660e05f5
    15c4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    15c8:	66730309 	ldrbtvs	r0, [r3], -r9, lsl #6
    15cc:	0f030105 	svceq	0x00030105
    15d0:	2f05a666 	svccs	0x0005a666
    15d4:	2e19054b 	cfmac32cs	mvfx0, mvfx9, mvfx11
    15d8:	05311505 	ldreq	r1, [r1, #-1285]!	; 0xfffffafb
    15dc:	14052e05 	strne	r2, [r5], #-3589	; 0xfffff1fb
    15e0:	4a28054b 	bmi	a02b14 <__bss_end+0x9ecfd4>
    15e4:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    15e8:	05058515 	streq	r8, [r5, #-1301]	; 0xfffffaeb
    15ec:	4b14052e 	blmi	502aac <__bss_end+0x4ecf6c>
    15f0:	054a2805 	strbeq	r2, [sl, #-2053]	; 0xfffff7fb
    15f4:	15054a03 	strne	r4, [r5, #-2563]	; 0xfffff5fd
    15f8:	2e050585 	cfsh32cs	mvfx0, mvfx5, #-59
    15fc:	054b2e05 	strbeq	r2, [fp, #-3589]	; 0xfffff1fb
    1600:	03054a25 	movweq	r4, #23077	; 0x5a25
    1604:	8301052e 	movwhi	r0, #5422	; 0x152e
    1608:	4b020585 	blmi	82c24 <__bss_end+0x6d0e4>
    160c:	852f0105 	strhi	r0, [pc, #-261]!	; 150f <_start-0x6af1>
    1610:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
    1614:	05852f01 	streq	r2, [r5, #3841]	; 0xf01
    1618:	0305bb05 	movweq	fp, #23301	; 0x5b05
    161c:	2f210567 	svccs	0x00210567
    1620:	bb030583 	bllt	c2c34 <__bss_end+0xad0f4>
    1624:	85300105 	ldrhi	r0, [r0, #-261]!	; 0xfffffefb
    1628:	05832305 	streq	r2, [r3, #773]	; 0x305
    162c:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    1630:	67080568 	strvs	r0, [r8, -r8, ror #10]
    1634:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    1638:	0e054b0a 	vmlaeq.f64	d4, d5, d10
    163c:	0301054a 	movweq	r0, #5450	; 0x154a
    1640:	0a05820a 	beq	161e70 <__bss_end+0x14c330>
    1644:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    1648:	12056708 	andne	r6, r5, #8, 14	; 0x200000
    164c:	4b0a052e 	blmi	282b0c <__bss_end+0x26cfcc>
    1650:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    1654:	0a058801 	beq	163660 <__bss_end+0x14db20>
    1658:	6708052a 	strvs	r0, [r8, -sl, lsr #10]
    165c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    1660:	0e054b0a 	vmlaeq.f64	d4, d5, d10
    1664:	8401054a 	strhi	r0, [r1], #-1354	; 0xfffffab6
    1668:	832305bd 			; <UNDEFINED> instruction: 0x832305bd
    166c:	054a1005 	strbeq	r1, [sl, #-5]
    1670:	08056805 	stmdaeq	r5, {r0, r2, fp, sp, lr}
    1674:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    1678:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    167c:	0e054a11 			; <UNDEFINED> instruction: 0x0e054a11
    1680:	0301054a 	movweq	r0, #5450	; 0x154a
    1684:	0a05660a 	beq	15aeb4 <__bss_end+0x145374>
    1688:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    168c:	13056708 	movwne	r6, #22280	; 0x5708
    1690:	4b0a052e 	blmi	282b50 <__bss_end+0x26d010>
    1694:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    1698:	01054a0e 	tsteq	r5, lr, lsl #20
    169c:	2a0a056c 	bcs	282c54 <__bss_end+0x26d114>
    16a0:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    16a4:	0a052e17 	beq	14cf08 <__bss_end+0x1373c8>
    16a8:	4a11054b 	bmi	442bdc <__bss_end+0x42d09c>
    16ac:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    16b0:	0c026801 	stceq	8, cr6, [r2], {1}
    16b4:	e9010100 	stmdb	r1, {r8}
    16b8:	03000001 	movweq	r0, #1
    16bc:	00005e00 	andeq	r5, r0, r0, lsl #28
    16c0:	fb010200 	blx	41eca <__bss_end+0x2c38a>
    16c4:	01000d0e 	tsteq	r0, lr, lsl #26
    16c8:	00010101 	andeq	r0, r1, r1, lsl #2
    16cc:	00010000 	andeq	r0, r1, r0
    16d0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    16d4:	2f656d6f 	svccs	0x00656d6f
    16d8:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
    16dc:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
    16e0:	616f6c6e 	cmnvs	pc, lr, ror #24
    16e4:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
    16e8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    16ec:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    16f0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    16f4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    16f8:	2f534f54 	svccs	0x00534f54
    16fc:	6f6d6544 	svcvs	0x006d6544
    1700:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1704:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1708:	70670000 	rsbvc	r0, r7, r0
    170c:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1710:	00000100 	andeq	r0, r0, r0, lsl #2
    1714:	6f697067 	svcvs	0x00697067
    1718:	0100682e 	tsteq	r0, lr, lsr #16
    171c:	05000000 	streq	r0, [r0, #-0]
    1720:	02050041 	andeq	r0, r5, #65	; 0x41
    1724:	00013868 	andeq	r3, r1, r8, ror #16
    1728:	0100e803 	tsteq	r0, r3, lsl #16
    172c:	05a01605 	streq	r1, [r0, #1541]!	; 0x605
    1730:	1b058206 	blne	161f50 <__bss_end+0x14c410>
    1734:	2e100530 	cfmvr64hcs	r0, mvdx0
    1738:	05681405 	strbeq	r1, [r8, #-1029]!	; 0xfffffbfb
    173c:	05200806 	streq	r0, [r0, #-2054]!	; 0xfffff7fa
    1740:	0f052f18 	svceq	0x00052f18
    1744:	4a090582 	bmi	242d54 <__bss_end+0x22d214>
    1748:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    174c:	23056713 	movwcs	r6, #22291	; 0x5713
    1750:	821a054a 	andshi	r0, sl, #310378496	; 0x12800000
    1754:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1758:	18056707 	stmdane	r5, {r0, r1, r2, r8, r9, sl, sp, lr}
    175c:	6701052e 	strvs	r0, [r1, -lr, lsr #10]
    1760:	05bc3f05 	ldreq	r3, [ip, #3845]!	; 0xf05
    1764:	0105bb02 	tsteq	r5, r2, lsl #22
    1768:	68380583 	ldmdavs	r8!, {r0, r1, r7, r8, sl}
    176c:	059f1005 	ldreq	r1, [pc, #5]	; 1779 <_start-0x6887>
    1770:	17056720 	strne	r6, [r5, -r0, lsr #14]
    1774:	4a10054a 	bmi	402ca4 <__bss_end+0x3ed164>
    1778:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
    177c:	0f056708 	svceq	0x00056708
    1780:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    1784:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    1788:	0805da01 	stmdaeq	r5, {r0, r9, fp, ip, lr, pc}
    178c:	2e0f052c 	cfsh32cs	mvfx0, mvfx15, #28
    1790:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    1794:	01052e17 	tsteq	r5, r7, lsl lr
    1798:	a02305a0 	eorge	r0, r3, r0, lsr #11
    179c:	05831005 	streq	r1, [r3, #5]
    17a0:	17052e1e 	smladne	r5, lr, lr, r2
    17a4:	822c054a 	eorhi	r0, ip, #310378496	; 0x12800000
    17a8:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    17ac:	01052e31 	tsteq	r5, r1, lsr lr
    17b0:	1705a12f 	strne	sl, [r5, -pc, lsr #2]
    17b4:	661005bb 			; <UNDEFINED> instruction: 0x661005bb
    17b8:	6802052f 	stmdavs	r2, {r0, r1, r2, r3, r5, r8, sl}
    17bc:	5a080805 	bpl	2037d8 <__bss_end+0x1edc98>
    17c0:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    17c4:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    17c8:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    17cc:	05300805 	ldreq	r0, [r0, #-2053]!	; 0xfffff7fb
    17d0:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    17d4:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    17d8:	059f0305 	ldreq	r0, [pc, #773]	; 1ae5 <_start-0x651b>
    17dc:	0f053008 	svceq	0x00053008
    17e0:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    17e4:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    17e8:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    17ec:	2e0f0530 	cfmv64hrcs	mvdx15, r0
    17f0:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    17f4:	03052e17 	movweq	r2, #24087	; 0x5e17
    17f8:	3008059f 	mulcc	r8, pc, r5	; <UNPREDICTABLE>
    17fc:	052e1005 	streq	r1, [lr, #-5]!
    1800:	18059e08 	stmdane	r5, {r3, r9, sl, fp, ip, pc}
    1804:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    1808:	05300805 	ldreq	r0, [r0, #-2053]!	; 0xfffff7fb
    180c:	08052e10 	stmdaeq	r5, {r4, r9, sl, fp, sp}
    1810:	2e180566 	cfmsc32cs	mvfx0, mvfx8, mvfx6
    1814:	309f0305 	addscc	r0, pc, r5, lsl #6
    1818:	a1300105 	teqge	r0, r5, lsl #2
    181c:	05bb2105 	ldreq	r2, [fp, #261]!	; 0x105
    1820:	15054a18 	strne	r4, [r5, #-2584]	; 0xfffff5e8
    1824:	2e10054a 	cfmac32cs	mvfx0, mvfx0, mvfx10
    1828:	6802052f 	stmdavs	r2, {r0, r1, r2, r3, r5, r8, sl}
    182c:	5a080805 	bpl	203848 <__bss_end+0x1edd08>
    1830:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    1834:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    1838:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    183c:	05300805 	ldreq	r0, [r0, #-2053]!	; 0xfffff7fb
    1840:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    1844:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    1848:	059f0305 	ldreq	r0, [pc, #773]	; 1b55 <_start-0x64ab>
    184c:	0f053008 	svceq	0x00053008
    1850:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    1854:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    1858:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    185c:	2e0f0530 	cfmv64hrcs	mvdx15, r0
    1860:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    1864:	03052e17 	movweq	r2, #24087	; 0x5e17
    1868:	3008059f 	mulcc	r8, pc, r5	; <UNPREDICTABLE>
    186c:	052e1005 	streq	r1, [lr, #-5]!
    1870:	18059e08 	stmdane	r5, {r3, r9, sl, fp, ip, pc}
    1874:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    1878:	05300805 	ldreq	r0, [r0, #-2053]!	; 0xfffff7fb
    187c:	08052e10 	stmdaeq	r5, {r4, r9, sl, fp, sp}
    1880:	2e180566 	cfmsc32cs	mvfx0, mvfx8, mvfx6
    1884:	309f0305 	addscc	r0, pc, r5, lsl #6
    1888:	a1300105 	teqge	r0, r5, lsl #2
    188c:	05832005 	streq	r2, [r3, #5]
    1890:	10054a17 	andne	r4, r5, r7, lsl sl
    1894:	07052f4a 	streq	r2, [r5, -sl, asr #30]
    1898:	2e160568 	cfmsc32cs	mvfx0, mvfx6, mvfx8
    189c:	02830105 	addeq	r0, r3, #1073741825	; 0x40000001
    18a0:	0101000a 	tsteq	r1, sl
    18a4:	00000227 	andeq	r0, r0, r7, lsr #4
    18a8:	00a90003 	adceq	r0, r9, r3
    18ac:	01020000 	mrseq	r0, (UNDEF: 2)
    18b0:	000d0efb 	strdeq	r0, [sp], -fp
    18b4:	01010101 	tsteq	r1, r1, lsl #2
    18b8:	01000000 	mrseq	r0, (UNDEF: 0)
    18bc:	2f010000 	svccs	0x00010000
    18c0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    18c4:	6176752f 	cmnvs	r6, pc, lsr #10
    18c8:	6f442f6e 	svcvs	0x00442f6e
    18cc:	6f6c6e77 	svcvs	0x006c6e77
    18d0:	2f736461 	svccs	0x00736461
    18d4:	70736152 	rsbsvc	r6, r3, r2, asr r1
    18d8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    18dc:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    18e0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    18e4:	534f5452 	movtpl	r5, #62546	; 0xf452
    18e8:	72462f2f 	subvc	r2, r6, #47, 30	; 0xbc
    18ec:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    18f0:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
    18f4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    18f8:	6f702f65 	svcvs	0x00702f65
    18fc:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    1900:	4d2f656c 	cfstr32mi	mvfx6, [pc, #-432]!	; 1758 <_start-0x68a8>
    1904:	614d6d65 	cmpvs	sp, r5, ror #26
    1908:	2f00676e 	svccs	0x0000676e
    190c:	2f74706f 	svccs	0x0074706f
    1910:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1914:	2f6d7261 	svccs	0x006d7261
    1918:	2f62696c 	svccs	0x0062696c
    191c:	2f636367 	svccs	0x00636367
    1920:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1924:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1928:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    192c:	30312f69 	eorscc	r2, r1, r9, ror #30
    1930:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    1934:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1938:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    193c:	65680000 	strbvs	r0, [r8, #-0]!
    1940:	345f7061 	ldrbcc	r7, [pc], #-97	; 1948 <_start-0x66b8>
    1944:	0100632e 	tsteq	r0, lr, lsr #6
    1948:	74730000 	ldrbtvc	r0, [r3], #-0
    194c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1950:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1954:	05000000 	streq	r0, [r0, #-0]
    1958:	02050001 	andeq	r0, r5, #1
    195c:	00013e40 	andeq	r3, r1, r0, asr #28
    1960:	01019203 	tsteq	r1, r3, lsl #4
    1964:	05840705 	streq	r0, [r4, #1797]	; 0x705
    1968:	0d054c02 	stceq	12, cr4, [r5, #-8]
    196c:	4a050532 	bmi	142e3c <__bss_end+0x12d2fc>
    1970:	054c0405 	strbeq	r0, [ip, #-1029]	; 0xfffffbfb
    1974:	10053305 	andne	r3, r5, r5, lsl #6
    1978:	a2140568 	andsge	r0, r4, #104, 10	; 0x1a000000
    197c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1980:	05054d11 	streq	r4, [r5, #-3345]	; 0xfffff2ef
    1984:	002c0586 	eoreq	r0, ip, r6, lsl #11
    1988:	66010402 	strvs	r0, [r1], -r2, lsl #8
    198c:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    1990:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    1994:	0c056a14 			; <UNDEFINED> instruction: 0x0c056a14
    1998:	6709054b 	strvs	r0, [r9, -fp, asr #10]
    199c:	05301505 	ldreq	r1, [r0, #-1285]!	; 0xfffffafb
    19a0:	14054b0d 	strne	r4, [r5], #-2829	; 0xfffff4f3
    19a4:	4a090563 	bmi	242f38 <__bss_end+0x22d3f8>
    19a8:	02003d05 	andeq	r3, r0, #320	; 0x140
    19ac:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    19b0:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    19b4:	10054a01 	andne	r4, r5, r1, lsl #20
    19b8:	4a060552 	bmi	182f08 <__bss_end+0x16d3c8>
    19bc:	056a4205 	strbeq	r4, [sl, #-517]!	; 0xfffffdfb
    19c0:	0e054a10 	vmoveq	s10, r4
    19c4:	4e2f052e 	cfsh64mi	mvdx0, mvdx15, #30
    19c8:	054a2605 	strbeq	r2, [sl, #-1541]	; 0xfffff9fb
    19cc:	1f054d12 	svcne	0x00054d12
    19d0:	4a31054a 	bmi	c42f00 <__bss_end+0xc2d3c0>
    19d4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    19d8:	2a054f15 	bcs	155634 <__bss_end+0x13faf4>
    19dc:	4a370586 	bmi	dc2ffc <__bss_end+0xdad4bc>
    19e0:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
    19e4:	06054b1a 			; <UNDEFINED> instruction: 0x06054b1a
    19e8:	4d190569 	cfldr32mi	mvfx0, [r9, #-420]	; 0xfffffe5c
    19ec:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    19f0:	02054a19 	andeq	r4, r5, #102400	; 0x19000
    19f4:	030c056a 	movweq	r0, #50538	; 0xc56a
    19f8:	09052e0c 	stmdbeq	r5, {r2, r3, r9, sl, fp, sp}
    19fc:	2f0105bc 	svccs	0x000105bc
    1a00:	831005da 	tsthi	r0, #914358272	; 0x36800000
    1a04:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
    1a08:	0a056a07 	beq	15c22c <__bss_end+0x1466ec>
    1a0c:	4c0305a1 	cfstr32mi	mvfx0, [r3], {161}	; 0xa1
    1a10:	05312105 	ldreq	r2, [r1, #-261]!	; 0xfffffefb
    1a14:	04054a18 	streq	r4, [r5], #-2584	; 0xfffff5e8
    1a18:	4c03059f 	cfstr32mi	mvfx0, [r3], {159}	; 0x9f
    1a1c:	86300105 	ldrthi	r0, [r0], -r5, lsl #2
    1a20:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    1a24:	4ca24b01 	fstmiaxmi	r2!, {d4-d3}	;@ Deprecated
    1a28:	03190586 	tsteq	r9, #562036736	; 0x21800000
    1a2c:	14056609 	strne	r6, [r5], #-1545	; 0xfffff9f7
    1a30:	6a1c0567 	bvs	702fd4 <__bss_end+0x6ed494>
    1a34:	672e0d05 	strvs	r0, [lr, -r5, lsl #26]!
    1a38:	059f0805 	ldreq	r0, [pc, #2053]	; 2245 <_start-0x5dbb>
    1a3c:	14056807 	strne	r6, [r5], #-2055	; 0xfffff7f9
    1a40:	4b07054a 	blmi	1c2f70 <__bss_end+0x1ad430>
    1a44:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    1a48:	30054e13 	andcc	r4, r5, r3, lsl lr
    1a4c:	661f054b 	ldrvs	r0, [pc], -fp, asr #10
    1a50:	054b2405 	strbeq	r2, [fp, #-1029]	; 0xfffffbfb
    1a54:	01058516 	tsteq	r5, r6, lsl r5
    1a58:	1205f6bb 	andne	pc, r5, #196083712	; 0xbb00000
    1a5c:	4a020588 	bmi	83084 <__bss_end+0x6d544>
    1a60:	02005705 	andeq	r5, r0, #1310720	; 0x140000
    1a64:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    1a68:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    1a6c:	02056601 	andeq	r6, r5, #1048576	; 0x100000
    1a70:	01040200 	mrseq	r0, R12_usr
    1a74:	6d06054a 	cfstr32vs	mvfx0, [r6, #-296]	; 0xfffffed8
    1a78:	054b1805 	strbeq	r1, [fp, #-2053]	; 0xfffff7fb
    1a7c:	04054a0c 	streq	r4, [r5], #-2572	; 0xfffff5f4
    1a80:	681a054a 	ldmdavs	sl, {r1, r3, r6, r8, sl}
    1a84:	054a2c05 	strbeq	r2, [sl, #-3077]	; 0xfffff3fb
    1a88:	13054a1a 	movwne	r4, #23066	; 0x5a1a
    1a8c:	4f060567 	svcmi	0x00060567
    1a90:	054b1d05 	strbeq	r1, [fp, #-3333]	; 0xfffff2fb
    1a94:	4d054a0c 	vstrmi	s8, [r5, #-48]	; 0xffffffd0
    1a98:	4a04054a 	bmi	102fc8 <__bss_end+0xed488>
    1a9c:	054c1105 	strbeq	r1, [ip, #-261]	; 0xfffffefb
    1aa0:	05054a23 	streq	r4, [r5, #-2595]	; 0xfffff5dd
    1aa4:	4d20054a 	cfstr32mi	mvfx0, [r0, #-296]!	; 0xfffffed8
    1aa8:	054a2d05 	strbeq	r2, [sl, #-3333]	; 0xfffff2fb
    1aac:	20054a3e 	andcs	r4, r5, lr, lsr sl
    1ab0:	6731052e 	ldrvs	r0, [r1, -lr, lsr #10]!
    1ab4:	054a4205 	strbeq	r4, [sl, #-517]	; 0xfffffdfb
    1ab8:	056a2e25 	strbeq	r2, [sl, #-3621]!	; 0xfffff1db
    1abc:	2405a330 	strcs	sl, [r5], #-816	; 0xfffffcd0
    1ac0:	5104054a 	tstpl	r4, sl, asr #10
    1ac4:	05841f05 	streq	r1, [r4, #3845]	; 0xf05
    1ac8:	0c026801 	stceq	8, cr6, [r2], {1}
    1acc:	ba010100 	blt	41ed4 <__bss_end+0x2c394>
    1ad0:	03000000 	movweq	r0, #0
    1ad4:	00004c00 	andeq	r4, r0, r0, lsl #24
    1ad8:	fb010200 	blx	422e2 <__bss_end+0x2c7a2>
    1adc:	01000d0e 	tsteq	r0, lr, lsl #26
    1ae0:	00010101 	andeq	r0, r1, r1, lsl #2
    1ae4:	00010000 	andeq	r0, r1, r0
    1ae8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    1aec:	2f656d6f 	svccs	0x00656d6f
    1af0:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
    1af4:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
    1af8:	616f6c6e 	cmnvs	pc, lr, ror #24
    1afc:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
    1b00:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1b04:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1b08:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1b0c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1b10:	2f534f54 	svccs	0x00534f54
    1b14:	6f6d6544 	svcvs	0x006d6544
    1b18:	616d0000 	cmnvs	sp, r0
    1b1c:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    1b20:	00000100 	andeq	r0, r0, r0, lsl #2
    1b24:	001a0500 	andseq	r0, sl, r0, lsl #10
    1b28:	43040205 	movwmi	r0, #16901	; 0x4205
    1b2c:	c9030001 	stmdbgt	r3, {r0}
    1b30:	06050100 	streq	r0, [r5], -r0, lsl #2
    1b34:	00040584 	andeq	r0, r4, r4, lsl #11
    1b38:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    1b3c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1b40:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1b44:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1b48:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
    1b4c:	05480104 	strbeq	r0, [r8, #-260]	; 0xfffffefc
    1b50:	0605341a 			; <UNDEFINED> instruction: 0x0605341a
    1b54:	00040584 	andeq	r0, r4, r4, lsl #11
    1b58:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    1b5c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    1b60:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1b64:	4b010402 	blmi	42b74 <__bss_end+0x2d034>
    1b68:	01040200 	mrseq	r0, R12_usr
    1b6c:	00040567 	andeq	r0, r4, r7, ror #10
    1b70:	47010402 	strmi	r0, [r1, -r2, lsl #8]
    1b74:	0f030105 	svceq	0x00030105
    1b78:	6702052e 	strvs	r0, [r2, -lr, lsr #10]
    1b7c:	08910868 	ldmeq	r1, {r3, r5, r6, fp}
    1b80:	00070592 	muleq	r7, r2, r5
    1b84:	34010402 	strcc	r0, [r1], #-1026	; 0xfffffbfe
    1b88:	01000a02 	tsteq	r0, r2, lsl #20
    1b8c:	Address 0x0000000000001b8c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <__bss_end+0x18c4a28>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	72615070 	rsbvc	r5, r1, #112	; 0x70
      34:	47006d61 	strmi	r6, [r0, -r1, ror #26]
      38:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      3c:	31203731 			; <UNDEFINED> instruction: 0x31203731
      40:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
      44:	30322031 	eorscc	r2, r2, r1, lsr r0
      48:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
      4c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
      50:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
      54:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      58:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      5c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      60:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      64:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      68:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      6c:	206d7261 	rsbcs	r7, sp, r1, ror #4
      70:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      74:	613d6863 	teqvs	sp, r3, ror #16
      78:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      7c:	672d207a 			; <UNDEFINED> instruction: 0x672d207a
      80:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      84:	7000672d 	andvc	r6, r0, sp, lsr #14
      88:	69724f78 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, sl, fp, lr}^
      8c:	616e6967 	cmnvs	lr, r7, ror #18
      90:	534f546c 	movtpl	r5, #62572	; 0xf46c
      94:	43425f00 	movtmi	r5, #12032	; 0x2f00
      98:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
      9c:	49545f35 	ldmdbmi	r4, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      a0:	5f52454d 	svcpl	0x0052454d
      a4:	53474552 	movtpl	r4, #30034	; 0x7552
      a8:	6f687300 	svcvs	0x00687300
      ac:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
      b0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      b4:	2064656e 	rsbcs	r6, r4, lr, ror #10
      b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
      bc:	41546470 	cmpmi	r4, r0, ror r4
      c0:	435f4b53 	cmpmi	pc, #84992	; 0x14c00
      c4:	0045444f 	subeq	r4, r5, pc, asr #8
      c8:	726f5076 	rsbvc	r5, pc, #118	; 0x76
      cc:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
      d0:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
      d4:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
      d8:	54760072 	ldrbtpl	r0, [r6], #-114	; 0xffffff8e
      dc:	496b6369 	stmdbmi	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
      e0:	2f005253 	svccs	0x00005253
      e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      e8:	6176752f 	cmnvs	r6, pc, lsr #10
      ec:	6f442f6e 	svcvs	0x00442f6e
      f0:	6f6c6e77 	svcvs	0x006c6e77
      f4:	2f736461 	svccs	0x00736461
      f8:	70736152 	rsbsvc	r6, r3, r2, asr r1
      fc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     100:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     104:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     108:	534f5452 	movtpl	r5, #62546	; 0xf452
     10c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     110:	4f545265 	svcmi	0x00545265
     114:	6f532f53 	svcvs	0x00532f53
     118:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     11c:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     120:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     124:	43472f65 	movtmi	r2, #32613	; 0x7f65
     128:	61522f43 	cmpvs	r2, r3, asr #30
     12c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     130:	50797272 	rsbspl	r7, r9, r2, ror r2
     134:	6f702f69 	svcvs	0x00702f69
     138:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
     13c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     140:	6f6c2067 	svcvs	0x006c2067
     144:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     148:	7000746e 	andvc	r7, r0, lr, ror #8
     14c:	72615076 	rsbvc	r5, r1, #118	; 0x76
     150:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
     154:	00737265 	rsbseq	r7, r3, r5, ror #4
     158:	67655270 			; <UNDEFINED> instruction: 0x67655270
     15c:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     160:	4f706f54 	svcmi	0x00706f54
     164:	61745366 	cmnvs	r4, r6, ror #6
     168:	6c006b63 			; <UNDEFINED> instruction: 0x6c006b63
     16c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     170:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
     174:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     178:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     17c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     180:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     184:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     188:	70007265 	andvc	r7, r0, r5, ror #4
     18c:	726f5078 	rsbvc	r5, pc, #120	; 0x78
     190:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     194:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     198:	53657369 	cmnpl	r5, #-1543503871	; 0xa4000001
     19c:	6b636174 	blvs	18d8774 <__bss_end+0x18c2c34>
     1a0:	436c7500 	cmnmi	ip, #0, 10
     1a4:	61706d6f 	cmnvs	r0, pc, ror #26
     1a8:	614d6572 	hvcvs	54866	; 0xd652
     1ac:	00686374 	rsbeq	r6, r8, r4, ror r3
     1b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fc <_start-0x7f04>
     1b4:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     1b8:	442f6e61 	strtmi	r6, [pc], #-3681	; 1c0 <_start-0x7e40>
     1bc:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     1c0:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     1c4:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     1c8:	72656270 	rsbvc	r6, r5, #112, 4
     1cc:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     1d0:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     1d4:	4f545265 	svcmi	0x00545265
     1d8:	50760053 	rsbspl	r0, r6, r3, asr r0
     1dc:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     1e0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1e4:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     1e8:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     1ec:	436c7500 	cmnmi	ip, #0, 10
     1f0:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     1f4:	4e6c6163 	powmiez	f6, f4, f3
     1f8:	69747365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     1fc:	7600676e 	strvc	r6, [r0], -lr, ror #14
     200:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     204:	74697845 	strbtvc	r7, [r9], #-2117	; 0xfffff7bb
     208:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     20c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     210:	6f507600 	svcvs	0x00507600
     214:	53497472 	movtpl	r7, #38002	; 0x9472
     218:	61745352 	cmnvs	r4, r2, asr r3
     21c:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
     220:	54747372 	ldrbtpl	r7, [r4], #-882	; 0xfffffc8e
     224:	006b7361 	rsbeq	r7, fp, r1, ror #6
     228:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     22c:	65695974 	strbvs	r5, [r9, #-2420]!	; 0xfffff68c
     230:	7250646c 	subsvc	r6, r0, #108, 8	; 0x6c000000
     234:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
     238:	00726f73 	rsbseq	r6, r2, r3, ror pc
     23c:	65724676 	ldrbvs	r4, [r2, #-1654]!	; 0xfffff98a
     240:	4f545265 	svcmi	0x00545265
     244:	53495f53 	movtpl	r5, #40787	; 0x9f53
     248:	682f0052 	stmdavs	pc!, {r1, r4, r6}	; <UNPREDICTABLE>
     24c:	2f656d6f 	svccs	0x00656d6f
     250:	6e617675 	mcrvs	6, 3, r7, cr1, cr5, {3}
     254:	776f442f 	strbvc	r4, [pc, -pc, lsr #8]!
     258:	616f6c6e 	cmnvs	pc, lr, ror #24
     25c:	522f7364 	eorpl	r7, pc, #100, 6	; 0x90000001
     260:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     264:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     268:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     26c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     270:	2f534f54 	svccs	0x00534f54
     274:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     278:	534f5452 	movtpl	r5, #62546	; 0xf452
     27c:	756f532f 	strbvc	r5, [pc, #-815]!	; ffffff55 <_estack+0xf7feff55>
     280:	2f656372 	svccs	0x00656372
     284:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     288:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     28c:	4343472f 	movtmi	r4, #14127	; 0x372f
     290:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     294:	72656270 	rsbvc	r6, r5, #112, 4
     298:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     29c:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     2a0:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     2a4:	7000632e 	andvc	r6, r0, lr, lsr #6
     2a8:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
     2ac:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     2b0:	00424354 	subeq	r4, r2, r4, asr r3
     2b4:	53625f67 	cmnpl	r2, #412	; 0x19c
     2b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     2bc:	70006465 	andvc	r6, r0, r5, ror #8
     2c0:	626e5578 	rsbvs	r5, lr, #120, 10	; 0x1e000000
     2c4:	6b636f6c 	blvs	18dc07c <__bss_end+0x18c653c>
     2c8:	52436465 	subpl	r6, r3, #1694498816	; 0x65000000
     2cc:	70004243 	andvc	r4, r0, r3, asr #4
     2d0:	6d655478 	cfstrdvs	mvd5, [r5, #-480]!	; 0xfffffe20
     2d4:	72630070 	rsbvc	r0, r3, #112	; 0x70
     2d8:	4f524f43 	svcmi	0x00524f43
     2dc:	4e495455 	mcrmi	4, 2, r5, cr9, cr5, {2}
     2e0:	4f435f45 	svcmi	0x00435f45
     2e4:	70004544 	andvc	r4, r0, r4, asr #10
     2e8:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     2ec:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     2f0:	70007265 	andvc	r7, r0, r5, ror #4
     2f4:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     2f8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     2fc:	7546656e 	strbvc	r6, [r6, #-1390]	; 0xfffffa92
     300:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     304:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     308:	73736150 	cmnvc	r3, #80, 2
     30c:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
     310:	00736b63 	rsbseq	r6, r3, r3, ror #22
     314:	6e497870 	mcrvs	8, 2, r7, cr9, cr0, {3}
     318:	00786564 	rsbseq	r6, r8, r4, ror #10
     31c:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     320:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     324:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     328:	6b636954 	blvs	18da880 <__bss_end+0x18c4d40>
     32c:	446f5473 	strbtmi	r5, [pc], #-1139	; 334 <_start-0x7ccc>
     330:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     334:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     338:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
     33c:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
     340:	656e774f 	strbvs	r7, [lr, #-1871]!	; 0xfffff8b1
     344:	4c780072 	ldclmi	0, cr0, [r8], #-456	; 0xfffffe38
     348:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
     34c:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     350:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     354:	6f437800 	svcvs	0x00437800
     358:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     35c:	54656e69 	strbtpl	r6, [r5], #-3689	; 0xfffff197
     360:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     364:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     368:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     36c:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     370:	004d4554 	subeq	r4, sp, r4, asr r5
     374:	6f437870 	svcvs	0x00437870
     378:	4c74736e 	ldclmi	3, cr7, [r4], #-440	; 0xfffffe48
     37c:	00747369 	rsbseq	r7, r4, r9, ror #6
     380:	526f4376 	rsbpl	r4, pc, #-671088639	; 0xd8000001
     384:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     388:	6441656e 	strbvs	r6, [r1], #-1390	; 0xfffffa92
     38c:	446f5464 	strbtmi	r5, [pc], #-1124	; 394 <_start-0x7c6c>
     390:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     394:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     398:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
     39c:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     3a0:	6f526f43 	svcvs	0x00526f43
     3a4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3a8:	61655265 	cmnvs	r5, r5, ror #4
     3ac:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     3b0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     3b4:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     3b8:	616c6544 	cmnvs	ip, r4, asr #10
     3bc:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     3c0:	756f526f 	strbvc	r5, [pc, #-623]!	; 159 <_start-0x7ea7>
     3c4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     3c8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     3cc:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
     3d0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     3d4:	6f436465 	svcvs	0x00436465
     3d8:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     3dc:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     3e0:	32747369 	rsbscc	r7, r4, #-1543503871	; 0xa4000001
     3e4:	726f6300 	rsbvc	r6, pc, #0, 6
     3e8:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     3ec:	43787000 	cmnmi	r8, #0
     3f0:	00424352 	subeq	r4, r2, r2, asr r3
     3f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 340 <_start-0x7cc0>
     3f8:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     3fc:	442f6e61 	strtmi	r6, [pc], #-3681	; 404 <_start-0x7bfc>
     400:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     404:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     408:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     40c:	72656270 	rsbvc	r6, r5, #112, 4
     410:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     414:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     418:	4f545265 	svcmi	0x00545265
     41c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     420:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     424:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     428:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     42c:	72632f65 	rsbvc	r2, r3, #404	; 0x194
     430:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     434:	632e656e 			; <UNDEFINED> instruction: 0x632e656e
     438:	50787000 	rsbspl	r7, r8, r0
     43c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     440:	0073756f 	rsbseq	r7, r3, pc, ror #10
     444:	6f437870 	svcvs	0x00437870
     448:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     44c:	43656e69 	cmnmi	r5, #1680	; 0x690
     450:	0065646f 	rsbeq	r6, r5, pc, ror #8
     454:	43726f63 	cmnmi	r2, #396	; 0x18c
     458:	756f526f 	strbvc	r5, [pc, #-623]!	; 1f1 <_start-0x7e0f>
     45c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     460:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     464:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     468:	6b636f6c 	blvs	18dc220 <__bss_end+0x18c66e0>
     46c:	6f437800 	svcvs	0x00437800
     470:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     474:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
     478:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     47c:	6f724665 	svcvs	0x00724665
     480:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0xfffffa93
     484:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     488:	70007473 	andvc	r7, r0, r3, ror r4
     48c:	61655278 	smcvs	21800	; 0x5528
     490:	6f437964 	svcvs	0x00437964
     494:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     498:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     49c:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     4a0:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
     4a4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     4a8:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     4ac:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     4b0:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     4b4:	78006d65 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     4b8:	6f526f43 	svcvs	0x00526f43
     4bc:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4c0:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0xfffffc9b
     4c4:	00657461 	rsbeq	r7, r5, r1, ror #8
     4c8:	754e7875 	strbvc	r7, [lr, #-2165]	; 0xfffff78b
     4cc:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     4d0:	7449664f 	strbvc	r6, [r9], #-1615	; 0xfffff9b1
     4d4:	00736d65 	rsbseq	r6, r3, r5, ror #26
     4d8:	75437870 	strbvc	r7, [r3, #-2160]	; 0xfffff790
     4dc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     4e0:	526f4374 	rsbpl	r4, pc, #116, 6	; 0xd0000001
     4e4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4e8:	7500656e 	strvc	r6, [r0, #-1390]	; 0xfffffa92
     4ec:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
     4f0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     4f4:	43780079 	cmnmi	r8, #121	; 0x79
     4f8:	756f526f 	strbvc	r5, [pc, #-623]!	; 291 <_start-0x7d6f>
     4fc:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     500:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     504:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     508:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     50c:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     510:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     514:	6f526f43 	svcvs	0x00526f43
     518:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     51c:	73694c65 	cmnvc	r9, #25856	; 0x6500
     520:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     524:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     528:	45787000 	ldrbmi	r7, [r8, #-0]!
     52c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     530:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     534:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     538:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     53c:	76006d65 	strvc	r6, [r0], -r5, ror #26
     540:	6f526f43 	svcvs	0x00526f43
     544:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     548:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
     54c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     550:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     554:	54656d69 	strbtpl	r6, [r5], #-3433	; 0xfffff297
     558:	6b61576f 	blvs	185631c <__bss_end+0x18407dc>
     55c:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     560:	6f526f43 	svcvs	0x00526f43
     564:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     568:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     56c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     570:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     574:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     578:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     57c:	616c6544 	cmnvs	ip, r4, asr #10
     580:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     584:	756f526f 	strbvc	r5, [pc, #-623]!	; 31d <_start-0x7ce3>
     588:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     58c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     590:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
     594:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	; <UNPREDICTABLE>
     598:	5f545349 	svcpl	0x00545349
     59c:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     5a0:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     5a4:	70005453 	andvc	r5, r0, r3, asr r4
     5a8:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     5ac:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     5b0:	6f526f43 	svcvs	0x00526f43
     5b4:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     5b8:	73694c65 	cmnvc	r9, #25856	; 0x6500
     5bc:	72700074 	rsbsvc	r0, r0, #116	; 0x74
     5c0:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
     5c4:	65506b63 	ldrbvs	r6, [r0, #-2915]	; 0xfffff49d
     5c8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     5cc:	61655267 	cmnvs	r5, r7, ror #4
     5d0:	694c7964 	stmdbvs	ip, {r2, r5, r6, r8, fp, ip, sp, lr}^
     5d4:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     5d8:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     5dc:	4c636972 			; <UNDEFINED> instruction: 0x4c636972
     5e0:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     5e4:	006d6574 	rsbeq	r6, sp, r4, ror r5
     5e8:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     5ec:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     5f0:	73696c61 	cmnvc	r9, #24832	; 0x6100
     5f4:	526f4365 	rsbpl	r4, pc, #-1811939327	; 0x94000001
     5f8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     5fc:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     600:	00737473 	rsbseq	r7, r3, r3, ror r4
     604:	65764578 	ldrbvs	r4, [r6, #-1400]!	; 0xfffffa88
     608:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     60c:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     610:	70006d65 	andvc	r6, r0, r5, ror #26
     614:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     618:	446b6365 	strbtmi	r6, [fp], #-869	; 0xfffffc9b
     61c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     620:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     624:	6c007473 	cfstrsvs	mvf7, [r0], {115}	; 0x73
     628:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     62c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     630:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     634:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     638:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     63c:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
     640:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     644:	63206465 			; <UNDEFINED> instruction: 0x63206465
     648:	00726168 	rsbseq	r6, r2, r8, ror #2
     64c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 598 <_start-0x7a68>
     650:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     654:	442f6e61 	strtmi	r6, [pc], #-3681	; 65c <_start-0x79a4>
     658:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     65c:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     660:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     664:	72656270 	rsbvc	r6, r5, #112, 4
     668:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     66c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     670:	4f545265 	svcmi	0x00545265
     674:	72462f53 	subvc	r2, r6, #332	; 0x14c
     678:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     67c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     680:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     684:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     688:	632e7473 			; <UNDEFINED> instruction: 0x632e7473
     68c:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     690:	546d6574 	strbtpl	r6, [sp], #-1396	; 0xfffffa8c
     694:	6d65526f 	sfmvs	f5, 2, [r5, #-444]!	; 0xfffffe44
     698:	0065766f 	rsbeq	r7, r5, pc, ror #12
     69c:	73694c76 	cmnvc	r9, #30208	; 0x7600
     6a0:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     6a4:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     6a8:	49657369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     6ac:	006d6574 	rsbeq	r6, sp, r4, ror r5
     6b0:	73694c76 	cmnvc	r9, #30208	; 0x7600
     6b4:	736e4974 	cmnvc	lr, #116, 18	; 0x1d0000
     6b8:	45747265 	ldrbmi	r7, [r4, #-613]!	; 0xfffffd9b
     6bc:	7600646e 	strvc	r6, [r0], -lr, ror #8
     6c0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     6c4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     6c8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     6cc:	78006573 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
     6d0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     6d4:	49664f65 	stmdbmi	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, lr}^
     6d8:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     6dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     6e0:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     6e4:	006d6574 	rsbeq	r6, sp, r4, ror r5
     6e8:	73694c76 	cmnvc	r9, #30208	; 0x7600
     6ec:	6d655274 	sfmvs	f5, 2, [r5, #-464]!	; 0xfffffe30
     6f0:	0065766f 	rsbeq	r7, r5, pc, ror #12
     6f4:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     6f8:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     6fc:	7300726f 	movwvc	r7, #623	; 0x26f
     700:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     704:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     708:	4c787000 	ldclmi	0, cr7, [r8], #-0
     70c:	00747369 	rsbseq	r7, r4, r9, ror #6
     710:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
     714:	73694c77 	cmnvc	r9, #30464	; 0x7700
     718:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     71c:	4c76006d 	ldclmi	0, cr0, [r6], #-436	; 0xfffffe4c
     720:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     724:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
     728:	51780074 	cmnpl	r8, r4, ror r0
     72c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     730:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     734:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
     738:	46646e65 	strbtmi	r6, [r4], -r5, ror #28
     73c:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     740:	75005253 	strvc	r5, [r0, #-595]	; 0xfffffdad
     744:	65755163 	ldrbvs	r5, [r5, #-355]!	; 0xfffffe9d
     748:	79546575 	ldmdbvc	r4, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     74c:	78006570 	stmdavc	r0, {r4, r5, r6, r8, sl, sp, lr}
     750:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     754:	51734965 	cmnpl	r3, r5, ror #18
     758:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     75c:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     760:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 650 <_start-0x79b0>
     764:	00525349 	subseq	r5, r2, r9, asr #6
     768:	75517875 	ldrbvc	r7, [r1, #-2165]	; 0xfffff78b
     76c:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	; 0xfffffe6c
     770:	61737365 	cmnvs	r3, r5, ror #6
     774:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     778:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     77c:	7300676e 	movwvc	r6, #1902	; 0x76e
     780:	5f657a69 	svcpl	0x00657a69
     784:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     788:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     78c:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
     790:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     794:	61547974 	cmpvs	r4, r4, ror r9
     798:	6f576b73 	svcvs	0x00576b73
     79c:	006e656b 	rsbeq	r6, lr, fp, ror #10
     7a0:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     7a4:	73496575 	movtvc	r6, #38261	; 0x9575
     7a8:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     7ac:	706d4565 	rsbvc	r4, sp, r5, ror #10
     7b0:	72467974 	subvc	r7, r6, #116, 18	; 0x1d0000
     7b4:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     7b8:	72700052 	rsbsvc	r0, r0, #82	; 0x52
     7bc:	51734976 	cmnpl	r3, r6, ror r9
     7c0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     7c4:	74706d45 	ldrbtvc	r6, [r0], #-3397	; 0xfffff2bb
     7c8:	72700079 	rsbsvc	r0, r0, #121	; 0x79
     7cc:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     7d0:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     7d4:	6f724661 	svcvs	0x00724661
     7d8:	6575516d 	ldrbvs	r5, [r5, #-365]!	; 0xfffffe93
     7dc:	70006575 	andvc	r6, r0, r5, ror r5
     7e0:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
     7e4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     7e8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     7ec:	706f4376 	rsbvc	r4, pc, r6, ror r3	; <UNPREDICTABLE>
     7f0:	74614479 	strbtvc	r4, [r1], #-1145	; 0xfffffb87
     7f4:	516f5461 	cmnpl	pc, r1, ror #8
     7f8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     7fc:	49547800 	ldmdbmi	r4, {fp, ip, sp, lr}^
     800:	4f5f454d 	svcmi	0x005f454d
     804:	78005455 	stmdavc	r0, {r0, r2, r4, r6, sl, ip, lr}
     808:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     80c:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     810:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     814:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
     818:	00657669 	rsbeq	r7, r5, r9, ror #12
     81c:	724f6370 	subvc	r6, pc, #112, 6	; 0xc0000001
     820:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     824:	65526c61 	ldrbvs	r6, [r2, #-3169]	; 0xfffff39f
     828:	6f506461 	svcvs	0x00506461
     82c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     830:	70006e6f 	andvc	r6, r0, pc, ror #28
     834:	61655263 	cmnvs	r5, r3, ror #4
     838:	6f724664 	svcvs	0x00724664
     83c:	4f78006d 	svcmi	0x0078006d
     840:	66726576 			; <UNDEFINED> instruction: 0x66726576
     844:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
     848:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     84c:	75517600 	ldrbvc	r7, [r1, #-1536]	; 0xfffffa00
     850:	44657565 	strbtmi	r7, [r5], #-1381	; 0xfffffa9b
     854:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     858:	63700065 	cmnvs	r0, #101	; 0x65
     85c:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
     860:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     864:	6e4f656d 	cdpvs	5, 4, cr6, cr15, cr13, {3}
     868:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
     86c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     870:	754a7800 	strbvc	r7, [sl, #-2048]	; 0xfffff800
     874:	65507473 	ldrbvs	r7, [r0, #-1139]	; 0xfffffb8d
     878:	6e696b65 	vnmulvs.f64	d22, d9, d21
     87c:	51780067 	cmnpl	r8, r7, rrx
     880:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     884:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     888:	53636972 	cmnpl	r3, #1867776	; 0x1c8000
     88c:	00646e65 	rsbeq	r6, r4, r5, ror #28
     890:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
     894:	74754f65 	ldrbtvc	r4, [r5], #-3941	; 0xfffff09b
     898:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     89c:	52787500 	rsbspl	r7, r8, #0, 10
     8a0:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
     8a4:	5178006e 	cmnpl	r8, lr, rrx
     8a8:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     8ac:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     8b0:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     8b4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     8b8:	63655265 	cmnvs	r5, #1342177286	; 0x50000006
     8bc:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     8c0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 7b0 <_start-0x7850>
     8c4:	00525349 	subseq	r5, r2, r9, asr #6
     8c8:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     8cc:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     8d0:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     8d4:	75006c6c 	strvc	r6, [r0, #-3180]	; 0xfffff394
     8d8:	6e654c78 	mcrvs	12, 3, r4, cr5, cr8, {3}
     8dc:	00687467 	rsbeq	r7, r8, r7, ror #8
     8e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 82c <_start-0x77d4>
     8e4:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     8e8:	442f6e61 	strtmi	r6, [pc], #-3681	; 8f0 <_start-0x7710>
     8ec:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     8f0:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     8f4:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     8f8:	72656270 	rsbvc	r6, r5, #112, 4
     8fc:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     900:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     904:	4f545265 	svcmi	0x00545265
     908:	72462f53 	subvc	r2, r6, #332	; 0x14c
     90c:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     910:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     914:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     918:	75712f65 	ldrbvc	r2, [r1, #-3941]!	; 0xfffff09b
     91c:	2e657565 	cdpcs	5, 6, cr7, cr5, cr5, {3}
     920:	78750063 	ldmdavc	r5!, {r0, r1, r5, r6}^
     924:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     928:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
     92c:	00687467 	rsbeq	r7, r8, r7, ror #8
     930:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     934:	6157736b 	cmpvs	r7, fp, ror #6
     938:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     93c:	526f5467 	rsbpl	r5, pc, #1728053248	; 0x67000000
     940:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     944:	75006576 	strvc	r6, [r0, #-1398]	; 0xfffffa8a
     948:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     94c:	654d6575 	strbvs	r6, [sp, #-1397]	; 0xfffffa8b
     950:	67617373 			; <UNDEFINED> instruction: 0x67617373
     954:	61577365 	cmpvs	r7, r5, ror #6
     958:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     95c:	6f724667 	svcvs	0x00724667
     960:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     964:	49767000 	ldmdbmi	r6!, {ip, sp, lr}^
     968:	546d6574 	strbtpl	r6, [sp], #-1396	; 0xfffffa8c
     96c:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     970:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     974:	55455551 	strbpl	r5, [r5, #-1361]	; 0xfffffaaf
     978:	45780045 	ldrbmi	r0, [r8, #-69]!	; 0xffffffbb
     97c:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     980:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     984:	00746553 	rsbseq	r6, r4, r3, asr r5
     988:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     98c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     990:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     994:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     998:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
     99c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     9a0:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     9a4:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     9a8:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     9ac:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
     9b0:	00657461 	rsbeq	r7, r5, r1, ror #8
     9b4:	61537875 	cmpvs	r3, r5, ror r8
     9b8:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     9bc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9c0:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     9c4:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     9c8:	70007375 	andvc	r7, r0, r5, ror r3
     9cc:	66754276 			; <UNDEFINED> instruction: 0x66754276
     9d0:	00726566 	rsbseq	r6, r2, r6, ror #10
     9d4:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     9d8:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     9dc:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     9e0:	73655263 	cmnvc	r5, #805306374	; 0x30000006
     9e4:	78007465 	stmdavc	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     9e8:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     9ec:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     9f0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9f4:	76727000 	ldrbtvc	r7, [r2], -r0
     9f8:	6f6c6e55 	svcvs	0x006c6e55
     9fc:	75516b63 	ldrbvc	r6, [r1, #-2915]	; 0xfffff49d
     a00:	00657565 	rsbeq	r7, r5, r5, ror #10
     a04:	4c785278 	lfmmi	f5, 2, [r8], #-480	; 0xfffffe20
     a08:	006b636f 	rsbeq	r6, fp, pc, ror #6
     a0c:	61546370 	cmpvs	r4, r0, ror r3
     a10:	78006c69 	stmdavc	r0, {r0, r3, r5, r6, sl, fp, sp, lr}
     a14:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     a18:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     a1c:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
     a20:	61737365 	cmnvs	r3, r5, ror #6
     a24:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     a28:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     a2c:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     a30:	6b736154 	blvs	1cd8f88 <__bss_end+0x1cc3448>
     a34:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a38:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a3c:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xfffff0ac
     a40:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     a44:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     a48:	7a695365 	bvc	1a557e4 <__bss_end+0x1a3fca4>
     a4c:	426e4965 	rsbmi	r4, lr, #1654784	; 0x194000
     a50:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     a54:	51787000 	cmnpl	r8, r0
     a58:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a5c:	57637000 	strbpl	r7, [r3, -r0]!
     a60:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     a64:	75006f54 	strvc	r6, [r0, #-3924]	; 0xfffff0ac
     a68:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     a6c:	7a69536d 	bvc	1a55828 <__bss_end+0x1a3fce8>
     a70:	63700065 	cmnvs	r0, #101	; 0x65
     a74:	6b736154 	blvs	1cd8fcc <__bss_end+0x1cc348c>
     a78:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     a7c:	6b737400 	blvs	1cdda84 <__bss_end+0x1cc7f44>
     a80:	6b736154 	blvs	1cd8fd8 <__bss_end+0x1cc3498>
     a84:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     a88:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     a8c:	6b636f6c 	blvs	18dc844 <__bss_end+0x18c6d04>
     a90:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     a94:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     a98:	754e7465 	strbvc	r7, [lr, #-1125]	; 0xfffffb9b
     a9c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     aa0:	6154664f 	cmpvs	r4, pc, asr #12
     aa4:	00736b73 	rsbseq	r6, r3, r3, ror fp
     aa8:	6f547875 	svcvs	0x00547875
     aac:	61655270 	smcvs	21792	; 0x5520
     ab0:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     ab4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     ab8:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     abc:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     ac0:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     ac4:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
     ac8:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
     acc:	52787000 	rsbspl	r7, r8, #0
     ad0:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     ad4:	6b736154 	blvs	1cd902c <__bss_end+0x1cc34ec>
     ad8:	73694c73 	cmnvc	r9, #29440	; 0x7300
     adc:	76007374 			; <UNDEFINED> instruction: 0x76007374
     ae0:	6b736154 	blvs	1cd9038 <__bss_end+0x1cc34f8>
     ae4:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0xfffffaad
     ae8:	4f656d69 	svcmi	0x00656d69
     aec:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
     af0:	00657461 	rsbeq	r7, r5, r1, ror #8
     af4:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     af8:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     afc:	6b736154 	blvs	1cd9054 <__bss_end+0x1cc3514>
     b00:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     b04:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
     b08:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     b0c:	61546465 	cmpvs	r4, r5, ror #8
     b10:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     b14:	00327473 	eorseq	r7, r2, r3, ror r4
     b18:	61506c75 	cmpvs	r0, r5, ror ip
     b1c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     b20:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     b24:	76727000 	ldrbtvc	r7, [r2], -r0
     b28:	6f6c6c41 	svcvs	0x006c6c41
     b2c:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
     b30:	41424354 	cmpmi	r2, r4, asr r3
     b34:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
     b38:	006b6361 	rsbeq	r6, fp, r1, ror #6
     b3c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     b40:	7465536b 	strbtvc	r5, [r5], #-875	; 0xfffffc95
     b44:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
     b48:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
     b4c:	546e6f69 	strbtpl	r6, [lr], #-3945	; 0xfffff097
     b50:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
     b54:	75006761 	strvc	r6, [r0, #-1889]	; 0xfffff89f
     b58:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     b5c:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
     b60:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     b64:	6b737400 	blvs	1cddb6c <__bss_end+0x1cc802c>
     b68:	00424354 	subeq	r4, r2, r4, asr r3
     b6c:	61547870 	cmpvs	r4, r0, ror r8
     b70:	6f546b73 	svcvs	0x00546b73
     b74:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
     b78:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
     b7c:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     b80:	71655264 	cmnvc	r5, r4, ror #4
     b84:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
     b88:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     b8c:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     b90:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     b94:	42435464 	submi	r5, r3, #100, 8	; 0x64000000
     b98:	53737500 	cmnpl	r3, #0, 10
     b9c:	6b636174 	blvs	18d9174 <__bss_end+0x18c3634>
     ba0:	74706544 	ldrbtvc	r6, [r0], #-1348	; 0xfffffabc
     ba4:	53780068 	cmnpl	r8, #104	; 0x68
     ba8:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     bac:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     bb0:	6b736154 	blvs	1cd9108 <__bss_end+0x1cc35c8>
     bb4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     bb8:	61547800 	cmpvs	r4, r0, lsl #16
     bbc:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     bc0:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     bc4:	756f436b 	strbvc	r4, [pc, #-875]!	; 861 <_start-0x779f>
     bc8:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
     bcc:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     bd0:	50780052 	rsbspl	r0, r8, r2, asr r0
     bd4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     bd8:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     bdc:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     be0:	00747369 	rsbseq	r7, r4, r9, ror #6
     be4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     be8:	5473496b 	ldrbtpl	r4, [r3], #-2411	; 0xfffff695
     bec:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     bf0:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     bf4:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     bf8:	61547800 	cmpvs	r4, r0, lsl #16
     bfc:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     c00:	70704174 	rsbsvc	r4, r0, r4, ror r1
     c04:	6163696c 	cmnvs	r3, ip, ror #18
     c08:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c0c:	6b736154 	blvs	1cd9164 <__bss_end+0x1cc3624>
     c10:	00676154 	rsbeq	r6, r7, r4, asr r1
     c14:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     c18:	59646573 	stmdbpl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c1c:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
     c20:	4f787000 	svcmi	0x00787000
     c24:	66726576 			; <UNDEFINED> instruction: 0x66726576
     c28:	44776f6c 	ldrbtmi	r6, [r7], #-3948	; 0xfffff094
     c2c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     c30:	61546465 	cmpvs	r4, r5, ror #8
     c34:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     c38:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
     c3c:	706f5478 	rsbvc	r5, pc, r8, ror r4	; <UNPREDICTABLE>
     c40:	64657355 	strbtvs	r7, [r5], #-853	; 0xfffffcab
     c44:	6f697250 	svcvs	0x00697250
     c48:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c4c:	61547600 	cmpvs	r4, r0, lsl #12
     c50:	75536b73 	ldrbvc	r6, [r3, #-2931]	; 0xfffff48d
     c54:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     c58:	6c6c4164 	stfvse	f4, [ip], #-400	; 0xfffffe70
     c5c:	61547800 	cmpvs	r4, r0, lsl #16
     c60:	61486b73 	hvcvs	34483	; 0x86b3
     c64:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     c68:	54787000 	ldrbtpl	r7, [r8], #-0
     c6c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     c70:	61576f54 	cmpvs	r7, r4, asr pc
     c74:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
     c78:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     c7c:	6544736b 	strbvs	r7, [r4, #-875]	; 0xfffffc95
     c80:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     c84:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     c88:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     c8c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     c90:	61547600 	cmpvs	r4, r0, lsl #12
     c94:	6e456b73 	vmovvs.8	d5[3], r6
     c98:	68635364 	stmdavs	r3!, {r2, r5, r6, r8, r9, ip, lr}^
     c9c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     ca0:	75007265 	strvc	r7, [r0, #-613]	; 0xfffffd9b
     ca4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     ca8:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
     cac:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     cb0:	74654779 	strbtvc	r4, [r5], #-1913	; 0xfffff887
     cb4:	61547600 	cmpvs	r4, r0, lsl #12
     cb8:	6c506b73 	mrrcvs	11, 7, r6, r0, cr3
     cbc:	4f656361 	svcmi	0x00656361
     cc0:	6576456e 	ldrbvs	r4, [r6, #-1390]!	; 0xfffffa92
     cc4:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     cc8:	76007473 			; <UNDEFINED> instruction: 0x76007473
     ccc:	6b736154 	blvs	1cd9224 <__bss_end+0x1cc36e4>
     cd0:	616c6544 	cmnvs	ip, r4, asr #10
     cd4:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
     cd8:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     cdc:	50746e65 	rsbspl	r6, r4, r5, ror #28
     ce0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     ce4:	00797469 	rsbseq	r7, r9, r9, ror #8
     ce8:	61547870 	cmpvs	r4, r0, ror r8
     cec:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     cf0:	6b736154 	blvs	1cd9248 <__bss_end+0x1cc3708>
     cf4:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     cf8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     cfc:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
     d00:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
     d04:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     d08:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     d0c:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
     d10:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
     d14:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xfffff08e
     d18:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     d1c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     d20:	76727000 	ldrbtvc	r7, [r2], -r0
     d24:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
     d28:	6b736154 	blvs	1cd9280 <__bss_end+0x1cc3740>
     d2c:	54647000 	strbtpl	r7, [r4], #-0
     d30:	5f4b5341 	svcpl	0x004b5341
     d34:	4b4f4f48 	blmi	13d4a5c <__bss_end+0x13bef1c>
     d38:	444f435f 	strbmi	r4, [pc], #-863	; d40 <_start-0x72c0>
     d3c:	4c780045 	ldclmi	0, cr0, [r8], #-276	; 0xfffffeec
     d40:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     d44:	706d4573 	rsbvc	r4, sp, r3, ror r5
     d48:	70007974 	andvc	r7, r0, r4, ror r9
     d4c:	6f6f4878 	svcvs	0x006f4878
     d50:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
     d54:	6f697463 	svcvs	0x00697463
     d58:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     d5c:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
     d60:	70004243 	andvc	r4, r0, r3, asr #4
     d64:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     d68:	646f436b 	strbtvs	r4, [pc], #-875	; d70 <_start-0x7290>
     d6c:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     d70:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     d74:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     d78:	6f436b63 	svcvs	0x00436b63
     d7c:	00746e75 	rsbseq	r6, r4, r5, ror lr
     d80:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     d84:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
     d88:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
     d8c:	6b636f6c 	blvs	18dcb44 <__bss_end+0x18c7004>
     d90:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     d94:	4c6c7500 	cfstr64mi	mvdx7, [ip], #-0
     d98:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     d9c:	426e4968 	rsbmi	r4, lr, #104, 18	; 0x1a0000
     da0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     da4:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
     da8:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
     dac:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     db0:	70007974 	andvc	r7, r0, r4, ror r9
     db4:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
     db8:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     dbc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     dc0:	0074754f 	rsbseq	r7, r4, pc, asr #10
     dc4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d10 <_start-0x72f0>
     dc8:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
     dcc:	442f6e61 	strtmi	r6, [pc], #-3681	; dd4 <_start-0x722c>
     dd0:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
     dd4:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
     dd8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     ddc:	72656270 	rsbvc	r6, r5, #112, 4
     de0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     de4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     de8:	4f545265 	svcmi	0x00545265
     dec:	72462f53 	subvc	r2, r6, #332	; 0x14c
     df0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     df4:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     df8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     dfc:	61742f65 	cmnvs	r4, r5, ror #30
     e00:	2e736b73 	vmovcs.s8	r6, d3[7]
     e04:	78750063 	ldmdavc	r5!, {r0, r1, r5, r6}^
     e08:	6b736154 	blvs	1cd9360 <__bss_end+0x1cc3820>
     e0c:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     e10:	76007265 	strvc	r7, [r0], -r5, ror #4
     e14:	6b736154 	blvs	1cd936c <__bss_end+0x1cc382c>
     e18:	6f697250 	svcvs	0x00697250
     e1c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e20:	00746553 	rsbseq	r6, r4, r3, asr r5
     e24:	6d654d78 	stclvs	13, cr4, [r5, #-480]!	; 0xfffffe20
     e28:	5279726f 	rsbspl	r7, r9, #-268435450	; 0xf0000006
     e2c:	6f696765 	svcvs	0x00696765
     e30:	5476006e 	ldrbtpl	r0, [r6], #-110	; 0xffffff92
     e34:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     e38:	6572636e 	ldrbvs	r6, [r2, #-878]!	; 0xfffffc92
     e3c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     e40:	6b636954 	blvs	18db398 <__bss_end+0x18c5858>
     e44:	68537800 	ldmdavs	r3, {fp, ip, sp, lr}^
     e48:	646c756f 	strbtvs	r7, [ip], #-1391	; 0xfffffa91
     e4c:	616c6544 	cmnvs	ip, r4, asr #10
     e50:	72700079 	rsbsvc	r0, r0, #121	; 0x79
     e54:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
     e58:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
     e5c:	54657369 	strbtpl	r7, [r5], #-873	; 0xfffffc97
     e60:	61564243 	cmpvs	r6, r3, asr #4
     e64:	62616972 	rsbvs	r6, r1, #1867776	; 0x1c8000
     e68:	0073656c 	rsbseq	r6, r3, ip, ror #10
     e6c:	4d454d78 	stclmi	13, cr4, [r5, #-480]	; 0xfffffe20
     e70:	5f59524f 	svcpl	0x0059524f
     e74:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
     e78:	76004e4f 	strvc	r4, [r0], -pc, asr #28
     e7c:	6b736154 	blvs	1cd93d4 <__bss_end+0x1cc3894>
     e80:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     e84:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     e88:	6b736154 	blvs	1cd93e0 <__bss_end+0x1cc38a0>
     e8c:	6c6c6143 	stfvse	f6, [ip], #-268	; 0xfffffef4
     e90:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
     e94:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
     e98:	546e6f69 	strbtpl	r6, [lr], #-3945	; 0xfffff097
     e9c:	486b7361 	stmdami	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     ea0:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
     ea4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     ea8:	6e65476b 	cdpvs	7, 6, cr4, cr5, cr11, {3}
     eac:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
     eb0:	61657243 	cmnvs	r5, r3, asr #4
     eb4:	76006574 			; <UNDEFINED> instruction: 0x76006574
     eb8:	6b736154 	blvs	1cd9410 <__bss_end+0x1cc38d0>
     ebc:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
     ec0:	6f436863 	svcvs	0x00436863
     ec4:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     ec8:	4e780074 	mrcmi	0, 3, r0, cr8, cr4, {3}
     ecc:	664f6d75 			; <UNDEFINED> instruction: 0x664f6d75
     ed0:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     ed4:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     ed8:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     edc:	6b736154 	blvs	1cd9434 <__bss_end+0x1cc38f4>
     ee0:	00676154 	rsbeq	r6, r7, r4, asr r1
     ee4:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     ee8:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
     eec:	41656d75 	smcmi	22229	; 0x56d5
     ef0:	70006c6c 	andvc	r6, r0, ip, ror #24
     ef4:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     ef8:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     efc:	6b736154 	blvs	1cd9454 <__bss_end+0x1cc3914>
     f00:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     f04:	53787000 	cmnpl	r8, #0
     f08:	6b636174 	blvs	18d94e0 <__bss_end+0x18c39a0>
     f0c:	61547800 	cmpvs	r4, r0, lsl #16
     f10:	68436b73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     f14:	466b6365 	strbtmi	r6, [fp], -r5, ror #6
     f18:	6954726f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     f1c:	754f656d 	strbvc	r6, [pc, #-1389]	; 9b7 <_start-0x7649>
     f20:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     f24:	6b736154 	blvs	1cd947c <__bss_end+0x1cc393c>
     f28:	75536f54 	ldrbvc	r6, [r3, #-3924]	; 0xfffff0ac
     f2c:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     f30:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     f34:	76657250 			; <UNDEFINED> instruction: 0x76657250
     f38:	73756f69 	cmnvc	r5, #420	; 0x1a4
     f3c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     f40:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     f44:	54787000 	ldrbtpl	r7, [r8], #-0
     f48:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
     f4c:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
     f50:	00657465 	rsbeq	r7, r5, r5, ror #8
     f54:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     f58:	7365526b 	cmnvc	r5, #-1342177274	; 0xb0000006
     f5c:	46656d75 			; <UNDEFINED> instruction: 0x46656d75
     f60:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     f64:	76005253 			; <UNDEFINED> instruction: 0x76005253
     f68:	6b736154 	blvs	1cd94c0 <__bss_end+0x1cc3980>
     f6c:	7373694d 	cmnvc	r3, #1261568	; 0x134000
     f70:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
     f74:	00646c65 	rsbeq	r6, r4, r5, ror #24
     f78:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     f7c:	7600736b 	strvc	r7, [r0], -fp, ror #6
     f80:	6b736154 	blvs	1cd94d8 <__bss_end+0x1cc3998>
     f84:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     f88:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     f8c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     f90:	70007265 	andvc	r7, r0, r5, ror #4
     f94:	73614276 	cmnvc	r1, #1610612743	; 0x60000007
     f98:	64644165 	strbtvs	r4, [r4], #-357	; 0xfffffe9b
     f9c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     fa0:	61547600 	cmpvs	r4, r0, lsl #12
     fa4:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
     fa8:	5579616c 	ldrbpl	r6, [r9, #-364]!	; 0xfffffe94
     fac:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
     fb0:	76727000 	ldrbtvc	r7, [r2], -r0
     fb4:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     fb8:	43546574 	cmpmi	r4, #116, 10	; 0x1d000000
     fbc:	54760042 	ldrbtpl	r0, [r6], #-66	; 0xffffffbe
     fc0:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     fc4:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     fc8:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     fcc:	65726c41 	ldrbvs	r6, [r2, #-3137]!	; 0xfffff3bf
     fd0:	59796461 	ldmdbpl	r9!, {r0, r5, r6, sl, sp, lr}^
     fd4:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
     fd8:	70006465 	andvc	r6, r0, r5, ror #8
     fdc:	72615076 	rsbvc	r5, r1, #118	; 0x76
     fe0:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
     fe4:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     fe8:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
     fec:	00736e6f 	rsbseq	r6, r3, pc, ror #28
     ff0:	41767270 	cmnmi	r6, r0, ror r2
     ff4:	75436464 	strbvc	r6, [r3, #-1124]	; 0xfffffb9c
     ff8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     ffc:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
    1000:	446f546b 	strbtmi	r5, [pc], #-1131	; 1008 <_start-0x6ff8>
    1004:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1008:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
    100c:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
    1010:	72754378 	rsbsvc	r4, r5, #120, 6	; 0xe0000001
    1014:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    1018:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    101c:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    1020:	6b736154 	blvs	1cd9578 <__bss_end+0x1cc3a38>
    1024:	54780073 	ldrbtpl	r0, [r8], #-115	; 0xffffff8d
    1028:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    102c:	6572636e 	ldrbvs	r6, [r2, #-878]!	; 0xfffffc92
    1030:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1034:	54787000 	ldrbtpl	r7, [r8], #-0
    1038:	75004243 	strvc	r4, [r0, #-579]	; 0xfffffdbd
    103c:	68635378 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, ip, lr}^
    1040:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
    1044:	75537265 	ldrbvc	r7, [r3, #-613]	; 0xfffffd9b
    1048:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
    104c:	00646564 	rsbeq	r6, r4, r4, ror #10
    1050:	53787570 	cmnpl	r8, #112, 10	; 0x1c000000
    1054:	6b636174 	blvs	18d962c <__bss_end+0x18c3aec>
    1058:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    105c:	76007265 	strvc	r7, [r0], -r5, ror #4
    1060:	6b736154 	blvs	1cd95b8 <__bss_end+0x1cc3a78>
    1064:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
    1068:	7000656d 	andvc	r6, r0, sp, ror #10
    106c:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    1070:	61697469 	cmnvs	r9, r9, ror #8
    1074:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    1078:	6b736154 	blvs	1cd95d0 <__bss_end+0x1cc3a90>
    107c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1080:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
    1084:	61657243 	cmnvs	r5, r3, asr #4
    1088:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    108c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1090:	43767270 	cmnmi	r6, #112, 4
    1094:	6b636568 	blvs	18da63c <__bss_end+0x18c4afc>
    1098:	6b736154 	blvs	1cd95f0 <__bss_end+0x1cc3ab0>
    109c:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
    10a0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    10a4:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
    10a8:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
    10ac:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    10b0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    10b4:	31676e69 	cmncc	r7, r9, ror #28
    10b8:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    10bc:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    10c0:	69440032 	stmdbvs	r4, {r1, r4, r5}^
    10c4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    10c8:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    10cc:	2f006369 	svccs	0x00006369
    10d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    10d4:	6176752f 	cmnvs	r6, pc, lsr #10
    10d8:	6f442f6e 	svcvs	0x00442f6e
    10dc:	6f6c6e77 	svcvs	0x006c6e77
    10e0:	2f736461 	svccs	0x00736461
    10e4:	70736152 	rsbsvc	r6, r3, r2, asr r1
    10e8:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    10ec:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    10f0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    10f4:	534f5452 	movtpl	r5, #62546	; 0xf452
    10f8:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    10fc:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1100:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1104:	72692f73 	rsbvc	r2, r9, #460	; 0x1cc
    1108:	00632e71 	rsbeq	r2, r3, r1, ror lr
    110c:	43514946 	cmpmi	r1, #1146880	; 0x118000
    1110:	006c7274 	rsbeq	r7, ip, r4, ror r2
    1114:	52717269 	rsbspl	r7, r1, #-1879048186	; 0x90000006
    1118:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    111c:	00726574 	rsbseq	r6, r2, r4, ror r5
    1120:	42717269 	rsbsmi	r7, r1, #-1879048186	; 0x90000006
    1124:	6b636f6c 	blvs	18dcedc <__bss_end+0x18c739c>
    1128:	4d6c7500 	cfstr64mi	mvdx7, [ip, #-0]
    112c:	656b7361 	strbvs	r7, [fp, #-865]!	; 0xfffffc9f
    1130:	61745364 	cmnvs	r4, r4, ror #6
    1134:	00737574 	rsbseq	r7, r3, r4, ror r5
    1138:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    113c:	616e6500 	cmnvs	lr, r0, lsl #10
    1140:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    1144:	6e657000 	cdpvs	0, 6, cr7, cr5, cr0, {0}
    1148:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    114c:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
    1150:	52656c64 	rsbpl	r6, r5, #100, 24	; 0x6400
    1154:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
    1158:	71726900 	cmnvc	r2, r0, lsl #18
    115c:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    1160:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1164:	6b73616d 	blvs	1cd9720 <__bss_end+0x1cc3be0>
    1168:	71726900 	cmnvc	r2, r0, lsl #18
    116c:	61736944 	cmnvs	r3, r4, asr #18
    1170:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1174:	486e6670 	stmdami	lr!, {r4, r5, r6, r9, sl, sp, lr}^
    1178:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    117c:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
    1180:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
    1184:	495f3533 	ldmdbmi	pc, {r0, r1, r4, r5, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    1188:	5f43544e 	svcpl	0x0043544e
    118c:	53474552 	movtpl	r4, #30034	; 0x7552
    1190:	71726900 	cmnvc	r2, r0, lsl #18
    1194:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1198:	4500656c 	strmi	r6, [r0, #-1388]	; 0xfffffa94
    119c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    11a0:	44003265 	strmi	r3, [r0], #-613	; 0xfffffd9b
    11a4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    11a8:	0031656c 	eorseq	r6, r1, ip, ror #10
    11ac:	61736944 	cmnvs	r3, r4, asr #18
    11b0:	32656c62 	rsbcc	r6, r5, #25088	; 0x6200
    11b4:	565f6700 	ldrbpl	r6, [pc], -r0, lsl #14
    11b8:	6f746365 	svcvs	0x00746365
    11bc:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    11c0:	4700656c 	strmi	r6, [r0, -ip, ror #10]
    11c4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    11c8:	31203731 			; <UNDEFINED> instruction: 0x31203731
    11cc:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
    11d0:	30322031 	eorscc	r2, r2, r1, lsr r0
    11d4:	32313232 	eorscc	r3, r1, #536870915	; 0x20000003
    11d8:	2d203530 	cfstr32cs	mvfx3, [r0, #-192]!	; 0xffffff40
    11dc:	6f6c666d 	svcvs	0x006c666d
    11e0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    11e4:	733d6962 	teqvc	sp, #1605632	; 0x188000
    11e8:	2074666f 	rsbscs	r6, r4, pc, ror #12
    11ec:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    11f0:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
    11f4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    11f8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    11fc:	207a3676 	rsbscs	r3, sl, r6, ror r6
    1200:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    1204:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    1208:	5f4e4600 	svcpl	0x004e4600
    120c:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1210:	50555252 	subspl	r5, r5, r2, asr r2
    1214:	41485f54 	cmpmi	r8, r4, asr pc
    1218:	454c444e 	strbmi	r4, [ip, #-1102]	; 0xfffffbb2
    121c:	4e490052 	mcrmi	0, 2, r0, cr9, cr2, {2}
    1220:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    1224:	5f545055 	svcpl	0x00545055
    1228:	54434556 	strbpl	r4, [r3], #-1366	; 0xfffffaaa
    122c:	6900524f 	stmdbvs	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    1230:	61487172 	hvcvs	34578	; 0x8712
    1234:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1238:	52490072 	subpl	r0, r9, #114	; 0x72
    123c:	73614251 	cmnvc	r1, #268435461	; 0x10000005
    1240:	45006369 	strmi	r6, [r0, #-873]	; 0xfffffc97
    1244:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1248:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    124c:	45006369 	strmi	r6, [r0, #-873]	; 0xfffffc97
    1250:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1254:	2f003165 	svccs	0x00003165
    1258:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    125c:	6176752f 	cmnvs	r6, pc, lsr #10
    1260:	6f442f6e 	svcvs	0x00442f6e
    1264:	6f6c6e77 	svcvs	0x006c6e77
    1268:	2f736461 	svccs	0x00736461
    126c:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1270:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1274:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1278:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    127c:	534f5452 	movtpl	r5, #62546	; 0xf452
    1280:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1284:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1288:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    128c:	70672f73 	rsbvc	r2, r7, r3, ror pc
    1290:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1294:	53504700 	cmppl	r0, #0, 14
    1298:	42005445 	andmi	r5, r0, #1157627904	; 0x45000000
    129c:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
    12a0:	475f3533 	smmlarmi	pc, r3, r5, r3	; <UNPREDICTABLE>
    12a4:	5f4f4950 	svcpl	0x004f4950
    12a8:	53474552 	movtpl	r4, #30034	; 0x7552
    12ac:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    12b0:	006d754e 	rsbeq	r7, sp, lr, asr #10
    12b4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    12b8:	6f697047 	svcvs	0x00697047
    12bc:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    12c0:	6f697047 	svcvs	0x00697047
    12c4:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0xfffff6bc
    12c8:	6f697463 	svcvs	0x00697463
    12cc:	5047006e 	subpl	r0, r7, lr, rrx
    12d0:	00524c43 	subseq	r4, r2, r3, asr #24
    12d4:	45485047 	strbmi	r5, [r8, #-71]	; 0xffffffb9
    12d8:	4544004e 	strbmi	r0, [r4, #-78]	; 0xffffffb2
    12dc:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    12e0:	5349525f 	movtpl	r5, #37471	; 0x925f
    12e4:	5f474e49 	svcpl	0x00474e49
    12e8:	4e595341 	cdpmi	3, 5, cr5, cr9, cr1, {2}
    12ec:	45440043 	strbmi	r0, [r4, #-67]	; 0xffffffbd
    12f0:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    12f4:	4c41465f 	mcrrmi	6, 5, r4, r1, cr15
    12f8:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
    12fc:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    1300:	4300434e 	movwmi	r4, #846	; 0x34e
    1304:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1308:	6f697047 	svcvs	0x00697047
    130c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    1310:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1314:	50470074 	subpl	r0, r7, r4, ror r0
    1318:	4e454641 	cdpmi	6, 4, cr4, cr5, cr1, {2}
    131c:	616e4500 	cmnvs	lr, r0, lsl #10
    1320:	47656c62 	strbmi	r6, [r5, -r2, ror #24]!
    1324:	446f6970 	strbtmi	r6, [pc], #-2416	; 132c <_start-0x6cd4>
    1328:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    132c:	50470074 	subpl	r0, r7, r4, ror r0
    1330:	00445550 	subeq	r5, r4, r0, asr r5
    1334:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    1338:	545f5443 	ldrbpl	r5, [pc], #-1091	; 1340 <_start-0x6cc0>
    133c:	00455059 	subeq	r5, r5, r9, asr r0
    1340:	566e6970 			; <UNDEFINED> instruction: 0x566e6970
    1344:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1348:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    134c:	6553004e 	ldrbvs	r0, [r3, #-78]	; 0xffffffb2
    1350:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    1354:	6e75466f 	cdpvs	6, 7, cr4, cr5, cr15, {3}
    1358:	6f697463 	svcvs	0x00697463
    135c:	5047006e 	subpl	r0, r7, lr, rrx
    1360:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1368 <_start-0x6c98>
    1364:	47005249 	strmi	r5, [r0, -r9, asr #4]
    1368:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
    136c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1370:	4e495f4f 	cdpmi	15, 4, cr5, cr9, cr15, {2}
    1374:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1378:	5f544345 	svcpl	0x00544345
    137c:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
    1380:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1384:	5f544345 	svcpl	0x00544345
    1388:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    138c:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    1390:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    1394:	44555050 	ldrbmi	r5, [r5], #-80	; 0xffffffb0
    1398:	004b4c43 	subeq	r4, fp, r3, asr #24
    139c:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    13a0:	525f5443 	subspl	r5, pc, #1124073472	; 0x43000000
    13a4:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    13a8:	45440047 	strbmi	r0, [r4, #-71]	; 0xffffffb9
    13ac:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    13b0:	574f4c5f 	smlsldpl	r4, pc, pc, ip	; <UNPREDICTABLE>
    13b4:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    13b8:	66005645 	strvs	r5, [r0], -r5, asr #12
    13bc:	4e636e75 	mcrmi	14, 3, r6, cr3, cr5, {3}
    13c0:	47006d75 	smlsdxmi	r0, r5, sp, r6
    13c4:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
    13c8:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0xfffff900
    13cc:	44005344 	strmi	r5, [r0], #-836	; 0xfffffcbc
    13d0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    13d4:	7047656c 	subvc	r6, r7, ip, ror #10
    13d8:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    13dc:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    13e0:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    13e4:	666f0065 	strbtvs	r0, [pc], -r5, rrx
    13e8:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    13ec:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
    13f0:	004c4553 	subeq	r4, ip, r3, asr r5
    13f4:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    13f8:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    13fc:	5200315f 	andpl	r3, r0, #-1073741801	; 0xc0000017
    1400:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1404:	5f646576 	svcpl	0x00646576
    1408:	65520032 	ldrbvs	r0, [r2, #-50]	; 0xffffffce
    140c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1410:	335f6465 	cmpcc	pc, #1694498816	; 0x65000000
    1414:	73655200 	cmnvc	r5, #0, 4
    1418:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    141c:	00345f64 	eorseq	r5, r4, r4, ror #30
    1420:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1424:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1428:	5200355f 	andpl	r3, r0, #398458880	; 0x17c00000
    142c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1430:	5f646576 	svcpl	0x00646576
    1434:	65520036 	ldrbvs	r0, [r2, #-54]	; 0xffffffca
    1438:	76726573 			; <UNDEFINED> instruction: 0x76726573
    143c:	375f6465 	ldrbcc	r6, [pc, -r5, ror #8]
    1440:	73655200 	cmnvc	r5, #0, 4
    1444:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1448:	00385f64 	eorseq	r5, r8, r4, ror #30
    144c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1450:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1454:	4400395f 	strmi	r3, [r0], #-2399	; 0xfffff6a1
    1458:	43455445 	movtmi	r5, #21573	; 0x5445
    145c:	41465f54 	cmpmi	r6, r4, asr pc
    1460:	4e494c4c 	cdpmi	12, 4, cr4, cr9, cr12, {2}
    1464:	65530047 	ldrbvs	r0, [r3, #-71]	; 0xffffffb9
    1468:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    146c:	7469006f 	strbtvc	r0, [r9], #-111	; 0xffffff91
    1470:	52006d65 	andpl	r6, r0, #6464	; 0x1940
    1474:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1478:	5f646576 	svcpl	0x00646576
    147c:	65520041 	ldrbvs	r0, [r2, #-65]	; 0xffffffbf
    1480:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1484:	425f6465 	subsmi	r6, pc, #1694498816	; 0x65000000
    1488:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    148c:	554f5f4f 	strbpl	r5, [pc, #-3919]	; 545 <_start-0x7abb>
    1490:	72700054 	rsbsvc	r0, r0, #84	; 0x54
    1494:	736e4976 	cmnvc	lr, #1933312	; 0x1d8000
    1498:	42747265 	rsbsmi	r7, r4, #1342177286	; 0x50000006
    149c:	6b636f6c 	blvs	18dd254 <__bss_end+0x18c7714>
    14a0:	6f746e49 	svcvs	0x00746e49
    14a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    14a8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    14ac:	6f507800 	svcvs	0x00507800
    14b0:	65477472 	strbvs	r7, [r7, #-1138]	; 0xfffffb8e
    14b4:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    14b8:	61654865 	cmnvs	r5, r5, ror #16
    14bc:	7a695370 	bvc	1a56284 <__bss_end+0x1a40744>
    14c0:	5f410065 	svcpl	0x00410065
    14c4:	434f4c42 	movtmi	r4, #64578	; 0xfc42
    14c8:	494c5f4b 	stmdbmi	ip, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    14cc:	70004b4e 	andvc	r4, r0, lr, asr #22
    14d0:	65487672 	strbvs	r7, [r8, #-1650]	; 0xfffff98e
    14d4:	6e497061 	cdpvs	0, 4, cr7, cr9, cr1, {3}
    14d8:	70007469 	andvc	r7, r0, r9, ror #8
    14dc:	6f6c4278 	svcvs	0x006c4278
    14e0:	70006b63 	andvc	r6, r0, r3, ror #22
    14e4:	6e694c78 	mcrvs	12, 3, r4, cr9, cr8, {3}
    14e8:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
    14ec:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    14f0:	6c6c614d 	stfvse	f6, [ip], #-308	; 0xfffffecc
    14f4:	7000636f 	andvc	r6, r0, pc, ror #6
    14f8:	72694678 	rsbvc	r4, r9, #120, 12	; 0x7800000
    14fc:	72467473 	subvc	r7, r6, #1929379840	; 0x73000000
    1500:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    1504:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1508:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1454 <_start-0x6bac>
    150c:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
    1510:	442f6e61 	strtmi	r6, [pc], #-3681	; 1518 <_start-0x6ae8>
    1514:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
    1518:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
    151c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1520:	72656270 	rsbvc	r6, r5, #112, 4
    1524:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1528:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    152c:	4f545265 	svcmi	0x00545265
    1530:	462f2f53 	qsaxmi	r2, pc, r3	; <UNPREDICTABLE>
    1534:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1538:	2f534f54 	svccs	0x00534f54
    153c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1540:	702f6563 	eorvc	r6, pc, r3, ror #10
    1544:	6174726f 	cmnvs	r4, pc, ror #4
    1548:	2f656c62 	svccs	0x00656c62
    154c:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    1550:	2f676e61 	svccs	0x00676e61
    1554:	70616568 	rsbvc	r6, r1, r8, ror #10
    1558:	632e345f 			; <UNDEFINED> instruction: 0x632e345f
    155c:	54527800 	ldrbpl	r7, [r2], #-2048	; 0xfffff800
    1560:	485f534f 	ldmdami	pc, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    1564:	00504145 	subseq	r4, r0, r5, asr #2
    1568:	65486375 	strbvs	r6, [r8, #-885]	; 0xfffffc8b
    156c:	64007061 	strvs	r7, [r0], #-97	; 0xffffff9f
    1570:	6d6d7544 	cfstr64vs	mvdx7, [sp, #-272]!	; 0xfffffef0
    1574:	42780079 	rsbsmi	r0, r8, #121	; 0x79
    1578:	6b636f6c 	blvs	18dd330 <__bss_end+0x18c77f0>
    157c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    1580:	65487800 	strbvs	r7, [r8, #-2048]	; 0xfffff800
    1584:	70007061 	andvc	r7, r0, r1, rrx
    1588:	646e4578 	strbtvs	r4, [lr], #-1400	; 0xfffffa88
    158c:	50787000 	rsbspl	r7, r8, r0
    1590:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1594:	4273756f 	rsbsmi	r7, r3, #465567744	; 0x1bc00000
    1598:	6b636f6c 	blvs	18dd350 <__bss_end+0x18c7810>
    159c:	6f547800 	svcvs	0x00547800
    15a0:	486c6174 	stmdami	ip!, {r2, r4, r5, r6, r8, sp, lr}^
    15a4:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    15a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    15ac:	65527670 	ldrbvs	r7, [r2, #-1648]	; 0xfffff990
    15b0:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    15b4:	6f507600 	svcvs	0x00507600
    15b8:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    15bc:	61697469 	cmnvs	r9, r9, ror #8
    15c0:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    15c4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    15c8:	6800736b 	stmdavs	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    15cc:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    15d0:	43555254 	cmpmi	r5, #84, 4	; 0x40000005
    15d4:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    15d8:	7800455a 	stmdavc	r0, {r1, r3, r4, r6, r8, sl, lr}
    15dc:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    15e0:	42780074 	rsbsmi	r0, r8, #116	; 0x74
    15e4:	6b636f6c 	blvs	18dd39c <__bss_end+0x18c785c>
    15e8:	6b6e694c 	blvs	1b9bb20 <__bss_end+0x1b85fe0>
    15ec:	6c6c6100 	stfvse	f6, [ip], #-0
    15f0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    15f4:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    15f8:	746e6157 	strbtvc	r6, [lr], #-343	; 0xfffffea9
    15fc:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    1600:	7600657a 			; <UNDEFINED> instruction: 0x7600657a
    1604:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1608:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    160c:	72467800 	subvc	r7, r6, #0, 16
    1610:	79426565 	stmdbvc	r2, {r0, r2, r5, r6, r8, sl, sp, lr}^
    1614:	52736574 	rsbspl	r6, r3, #116, 10	; 0x1d000000
    1618:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    161c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1620:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1624:	6c427765 	mcrrvs	7, 6, r7, r2, cr5
    1628:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    162c:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1630:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    1634:	72467478 	subvc	r7, r6, #120, 8	; 0x78000000
    1638:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    163c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1640:	48637570 	stmdami	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
    1644:	45706165 	ldrbmi	r6, [r0, #-357]!	; 0xfffffe9b
    1648:	7000646e 	andvc	r6, r0, lr, ror #8
    164c:	6f6c4278 	svcvs	0x006c4278
    1650:	6f546b63 	svcvs	0x00546b63
    1654:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
    1658:	74007472 	strvc	r7, [r0], #-1138	; 0xfffffb8e
    165c:	326b7361 	rsbcc	r7, fp, #-2080374783	; 0x84000001
    1660:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
    1664:	6174006e 	cmnvs	r4, lr, rrx
    1668:	00316b73 	eorseq	r6, r1, r3, ror fp
    166c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 15b8 <_start-0x6a48>
    1670:	76752f65 	ldrbtvc	r2, [r5], -r5, ror #30
    1674:	442f6e61 	strtmi	r6, [pc], #-3681	; 167c <_start-0x6984>
    1678:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
    167c:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
    1680:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1684:	72656270 	rsbvc	r6, r5, #112, 4
    1688:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    168c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1690:	4f545265 	svcmi	0x00545265
    1694:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    1698:	6d2f6f6d 	stcvs	15, cr6, [pc, #-436]!	; 14ec <_start-0x6b14>
    169c:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    16a0:	Address 0x00000000000016a0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10bb1e4>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	72412055 	subvc	r2, r1, #85	; 0x55
   c:	6d45206d 	stclvs	0, cr2, [r5, #-436]	; 0xfffffe4c
  10:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  14:	54206465 	strtpl	r6, [r0], #-1125	; 0xfffffb9b
  18:	636c6f6f 	cmnvs	ip, #444	; 0x1bc
  1c:	6e696168 	powvsez	f6, f1, #0.0
  20:	2e303120 	rsfcssp	f3, f0, f0
  24:	30322d33 	eorscc	r2, r2, r3, lsr sp
  28:	312e3132 			; <UNDEFINED> instruction: 0x312e3132
  2c:	31202930 			; <UNDEFINED> instruction: 0x31202930
  30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
  34:	30322031 	eorscc	r2, r2, r1, lsr r0
  38:	38303132 	ldmdacc	r0!, {r1, r4, r5, r8, ip, sp}
  3c:	28203432 	stmdacs	r0!, {r1, r4, r5, sl, ip, sp}
  40:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  44:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  48:	43434700 	movtmi	r4, #14080	; 0x3700
  4c:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  50:	32313a35 	eorscc	r3, r1, #217088	; 0x35000
  54:	722e322e 	eorvc	r3, lr, #-536870910	; 0xe0000002
  58:	2d316c65 	ldccs	12, cr6, [r1, #-404]!	; 0xfffffe6c
  5c:	31202931 			; <UNDEFINED> instruction: 0x31202931
  60:	2e322e32 	mrccs	14, 1, r2, cr2, cr2, {1}
  64:	30322031 	eorscc	r2, r2, r1, lsr r0
  68:	32313232 	eorscc	r3, r1, #536870915	; 0x20000003
  6c:	Address 0x000000000000006c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00010000 	andeq	r0, r1, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xeddf0>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x33acf0>
  28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
  2c:	000ecb42 	andeq	ip, lr, r2, asr #22
  30:	00000018 	andeq	r0, r0, r8, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00010240 	andeq	r0, r1, r0, asr #4
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	8b080e42 	blhi	203950 <__bss_end+0x1ede10>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	00040b0c 	andeq	r0, r4, ip, lsl #22
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	0001025c 	andeq	r0, r1, ip, asr r2
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	8b040e42 	blhi	10396c <__bss_end+0xede2c>
  60:	0b0d4201 	bleq	35086c <__bss_end+0x33ad2c>
  64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
  68:	00000ecb 	andeq	r0, r0, fp, asr #29
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	00010274 	andeq	r0, r1, r4, ror r2
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	8b080e42 	blhi	20398c <__bss_end+0x1ede4c>
  80:	42018e02 	andmi	r8, r1, #2, 28
  84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
  88:	00080d0c 	andeq	r0, r8, ip, lsl #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	000102ac 	andeq	r0, r1, ip, lsr #5
  98:	00000098 	muleq	r0, r8, r0
  9c:	8b080e42 	blhi	2039ac <__bss_end+0x1ede6c>
  a0:	42018e02 	andmi	r8, r1, #2, 28
  a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
  a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  b4:	7c020001 	stcvc	0, cr0, [r2], {1}
  b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	000000ac 	andeq	r0, r0, ip, lsr #1
  c4:	00010344 	andeq	r0, r1, r4, asr #6
  c8:	00000098 	muleq	r0, r8, r0
  cc:	8b040e42 	blhi	1039dc <__bss_end+0xede9c>
  d0:	0b0d4201 	bleq	3508dc <__bss_end+0x33ad9c>
  d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
  d8:	00000ecb 	andeq	r0, r0, fp, asr #29
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000ac 	andeq	r0, r0, ip, lsr #1
  e4:	000103dc 	ldrdeq	r0, [r1], -ip
  e8:	000000b4 	strheq	r0, [r0], -r4
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000ac 	andeq	r0, r0, ip, lsr #1
  f4:	00010490 	muleq	r1, r0, r4
  f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000ac 	andeq	r0, r0, ip, lsr #1
 104:	00010540 	andeq	r0, r1, r0, asr #10
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	8b040e42 	blhi	103a1c <__bss_end+0xededc>
 110:	0b0d4201 	bleq	35091c <__bss_end+0x33addc>
 114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 118:	00000ecb 	andeq	r0, r0, fp, asr #29
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000ac 	andeq	r0, r0, ip, lsr #1
 124:	00010584 	andeq	r0, r1, r4, lsl #11
 128:	00000064 	andeq	r0, r0, r4, rrx
 12c:	8b040e42 	blhi	103a3c <__bss_end+0xedefc>
 130:	0b0d4201 	bleq	35093c <__bss_end+0x33adfc>
 134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
 138:	00000ecb 	andeq	r0, r0, fp, asr #29
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000105f0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 158:	00000168 	andeq	r0, r0, r8, ror #2
 15c:	8b080e42 	blhi	203a6c <__bss_end+0x1edf2c>
 160:	42018e02 	andmi	r8, r1, #2, 28
 164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	00010758 	andeq	r0, r1, r8, asr r7
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	8b080e42 	blhi	203a8c <__bss_end+0x1edf4c>
 180:	42018e02 	andmi	r8, r1, #2, 28
 184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000013c 	andeq	r0, r0, ip, lsr r1
 194:	0001083c 	andeq	r0, r1, ip, lsr r8
 198:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1edf6c>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1a8:	080d0c6c 	stmdaeq	sp, {r2, r3, r5, r6, sl, fp}
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1b4:	0001092c 	andeq	r0, r1, ip, lsr #18
 1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1bc:	8b080e42 	blhi	203acc <__bss_end+0x1edf8c>
 1c0:	42018e02 	andmi	r8, r1, #2, 28
 1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1d4:	00010afc 	strdeq	r0, [r1], -ip
 1d8:	00000124 	andeq	r0, r0, r4, lsr #2
 1dc:	8b080e42 	blhi	203aec <__bss_end+0x1edfac>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 1e8:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1f4:	00010c20 	andeq	r0, r1, r0, lsr #24
 1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 1fc:	8b080e42 	blhi	203b0c <__bss_end+0x1edfcc>
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000013c 	andeq	r0, r0, ip, lsr r1
 214:	00010cc8 	andeq	r0, r1, r8, asr #25
 218:	0000008c 	andeq	r0, r0, ip, lsl #1
 21c:	8b080e42 	blhi	203b2c <__bss_end+0x1edfec>
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
 228:	00080d0c 	andeq	r0, r8, ip, lsl #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	00010d54 	andeq	r0, r1, r4, asr sp
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	8b040e42 	blhi	103b5c <__bss_end+0xee01c>
 250:	0b0d4201 	bleq	350a5c <__bss_end+0x33af1c>
 254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
 258:	00000ecb 	andeq	r0, r0, fp, asr #29
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000022c 	andeq	r0, r0, ip, lsr #4
 264:	00010dbc 			; <UNDEFINED> instruction: 0x00010dbc
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	8b040e42 	blhi	103b7c <__bss_end+0xee03c>
 270:	0b0d4201 	bleq	350a7c <__bss_end+0x33af3c>
 274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 278:	00000ecb 	andeq	r0, r0, fp, asr #29
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000022c 	andeq	r0, r0, ip, lsr #4
 284:	00010de8 	andeq	r0, r1, r8, ror #27
 288:	00000098 	muleq	r0, r8, r0
 28c:	8b040e42 	blhi	103b9c <__bss_end+0xee05c>
 290:	0b0d4201 	bleq	350a9c <__bss_end+0x33af5c>
 294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 298:	000ecb42 	andeq	ip, lr, r2, asr #22
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	00010e80 	andeq	r0, r1, r0, lsl #29
 2a8:	000000d8 	ldrdeq	r0, [r0], -r8
 2ac:	8b040e42 	blhi	103bbc <__bss_end+0xee07c>
 2b0:	0b0d4201 	bleq	350abc <__bss_end+0x33af7c>
 2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	00010f58 	andeq	r0, r1, r8, asr pc
 2c8:	00000098 	muleq	r0, r8, r0
 2cc:	8b040e42 	blhi	103bdc <__bss_end+0xee09c>
 2d0:	0b0d4201 	bleq	350adc <__bss_end+0x33af9c>
 2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	00010ff0 	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 2f8:	00000114 	andeq	r0, r0, r4, lsl r1
 2fc:	8b080e42 	blhi	203c0c <__bss_end+0x1ee0cc>
 300:	42018e02 	andmi	r8, r1, #2, 28
 304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	00011104 	andeq	r1, r1, r4, lsl #2
 318:	000000c8 	andeq	r0, r0, r8, asr #1
 31c:	8b080e42 	blhi	203c2c <__bss_end+0x1ee0ec>
 320:	42018e02 	andmi	r8, r1, #2, 28
 324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	000111cc 	andeq	r1, r1, ip, asr #3
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	8b080e42 	blhi	203c4c <__bss_end+0x1ee10c>
 340:	42018e02 	andmi	r8, r1, #2, 28
 344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	00011370 	andeq	r1, r1, r0, ror r3
 358:	000000dc 	ldrdeq	r0, [r0], -ip
 35c:	8b080e42 	blhi	203c6c <__bss_end+0x1ee12c>
 360:	42018e02 	andmi	r8, r1, #2, 28
 364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	0001144c 	andeq	r1, r1, ip, asr #8
 378:	00000204 	andeq	r0, r0, r4, lsl #4
 37c:	8b080e42 	blhi	203c8c <__bss_end+0x1ee14c>
 380:	42018e02 	andmi	r8, r1, #2, 28
 384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	00011650 	andeq	r1, r1, r0, asr r6
 398:	000000e0 	andeq	r0, r0, r0, ror #1
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1ee16c>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	00011730 	andeq	r1, r1, r0, lsr r7
 3b8:	00000034 	andeq	r0, r0, r4, lsr r0
 3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1ee18c>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	00011764 	andeq	r1, r1, r4, ror #14
 3d8:	00000030 	andeq	r0, r0, r0, lsr r0
 3dc:	8b040e42 	blhi	103cec <__bss_end+0xee1ac>
 3e0:	0b0d4201 	bleq	350bec <__bss_end+0x33b0ac>
 3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
 3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	00011794 	muleq	r1, r4, r7
 3f8:	00000034 	andeq	r0, r0, r4, lsr r0
 3fc:	8b080e42 	blhi	203d0c <__bss_end+0x1ee1cc>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 408:	00080d0c 	andeq	r0, r8, ip, lsl #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	000117c8 	andeq	r1, r1, r8, asr #15
 418:	0000012c 	andeq	r0, r0, ip, lsr #2
 41c:	8b080e42 	blhi	203d2c <__bss_end+0x1ee1ec>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000002dc 	ldrdeq	r0, [r0], -ip
 434:	000118f4 	strdeq	r1, [r1], -r4
 438:	00000090 	muleq	r0, r0, r0
 43c:	8b080e42 	blhi	203d4c <__bss_end+0x1ee20c>
 440:	42018e02 	andmi	r8, r1, #2, 28
 444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000002dc 	ldrdeq	r0, [r0], -ip
 454:	00011984 	andeq	r1, r1, r4, lsl #19
 458:	00000104 	andeq	r0, r0, r4, lsl #2
 45c:	8b080e42 	blhi	203d6c <__bss_end+0x1ee22c>
 460:	42018e02 	andmi	r8, r1, #2, 28
 464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	00011a88 	andeq	r1, r1, r8, lsl #21
 478:	00000044 	andeq	r0, r0, r4, asr #32
 47c:	8b080e42 	blhi	203d8c <__bss_end+0x1ee24c>
 480:	42018e02 	andmi	r8, r1, #2, 28
 484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
 488:	00080d0c 	andeq	r0, r8, ip, lsl #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	00011acc 	andeq	r1, r1, ip, asr #21
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	8b040e42 	blhi	103dac <__bss_end+0xee26c>
 4a0:	0b0d4201 	bleq	350cac <__bss_end+0x33b16c>
 4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	00011b0c 	andeq	r1, r1, ip, lsl #22
 4b8:	0000004c 	andeq	r0, r0, ip, asr #32
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1ee28c>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
 4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	00011b58 	andeq	r1, r1, r8, asr fp
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	8b040e42 	blhi	103dec <__bss_end+0xee2ac>
 4e0:	0b0d4201 	bleq	350cec <__bss_end+0x33b1ac>
 4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
 4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	00011ba0 	andeq	r1, r1, r0, lsr #23
 508:	0000024c 	andeq	r0, r0, ip, asr #4
 50c:	8b080e42 	blhi	203e1c <__bss_end+0x1ee2dc>
 510:	42018e02 	andmi	r8, r1, #2, 28
 514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
 518:	0d0c0112 	stfeqs	f0, [ip, #-72]	; 0xffffffb8
 51c:	00000008 	andeq	r0, r0, r8
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004ec 	andeq	r0, r0, ip, ror #9
 528:	00011dec 	andeq	r1, r1, ip, ror #27
 52c:	00000100 	andeq	r0, r0, r0, lsl #2
 530:	8b080e42 	blhi	203e40 <__bss_end+0x1ee300>
 534:	42018e02 	andmi	r8, r1, #2, 28
 538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004ec 	andeq	r0, r0, ip, ror #9
 548:	00011eec 	andeq	r1, r1, ip, ror #29
 54c:	00000110 	andeq	r0, r0, r0, lsl r1
 550:	8b080e42 	blhi	203e60 <__bss_end+0x1ee320>
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000004ec 	andeq	r0, r0, ip, ror #9
 568:	00011ffc 	strdeq	r1, [r1], -ip
 56c:	00000084 	andeq	r0, r0, r4, lsl #1
 570:	8b080e42 	blhi	203e80 <__bss_end+0x1ee340>
 574:	42018e02 	andmi	r8, r1, #2, 28
 578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	000004ec 	andeq	r0, r0, ip, ror #9
 588:	00012080 	andeq	r2, r1, r0, lsl #1
 58c:	00000058 	andeq	r0, r0, r8, asr r0
 590:	8b080e42 	blhi	203ea0 <__bss_end+0x1ee360>
 594:	42018e02 	andmi	r8, r1, #2, 28
 598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
 59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	000004ec 	andeq	r0, r0, ip, ror #9
 5a8:	000120d8 	ldrdeq	r2, [r1], -r8
 5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x1ee380>
 5b4:	42018e02 	andmi	r8, r1, #2, 28
 5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	000004ec 	andeq	r0, r0, ip, ror #9
 5c8:	00012280 	andeq	r2, r1, r0, lsl #5
 5cc:	00000104 	andeq	r0, r0, r4, lsl #2
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1ee3a0>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	000004ec 	andeq	r0, r0, ip, ror #9
 5e8:	00012384 	andeq	r2, r1, r4, lsl #7
 5ec:	0000007c 	andeq	r0, r0, ip, ror r0
 5f0:	8b040e42 	blhi	103f00 <__bss_end+0xee3c0>
 5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x33b2c0>
 5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
 5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000004ec 	andeq	r0, r0, ip, ror #9
 608:	00012400 	andeq	r2, r1, r0, lsl #8
 60c:	000000f8 	strdeq	r0, [r0], -r8
 610:	8b080e42 	blhi	203f20 <__bss_end+0x1ee3e0>
 614:	42018e02 	andmi	r8, r1, #2, 28
 618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000004ec 	andeq	r0, r0, ip, ror #9
 628:	000124f8 	strdeq	r2, [r1], -r8
 62c:	0000011c 	andeq	r0, r0, ip, lsl r1
 630:	8b080e42 	blhi	203f40 <__bss_end+0x1ee400>
 634:	42018e02 	andmi	r8, r1, #2, 28
 638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000004ec 	andeq	r0, r0, ip, ror #9
 648:	00012614 	andeq	r2, r1, r4, lsl r6
 64c:	0000009c 	muleq	r0, ip, r0
 650:	8b080e42 	blhi	203f60 <__bss_end+0x1ee420>
 654:	42018e02 	andmi	r8, r1, #2, 28
 658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	000004ec 	andeq	r0, r0, ip, ror #9
 668:	000126b0 			; <UNDEFINED> instruction: 0x000126b0
 66c:	00000038 	andeq	r0, r0, r8, lsr r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1ee440>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	000004ec 	andeq	r0, r0, ip, ror #9
 684:	000126e8 	andeq	r2, r1, r8, ror #13
 688:	00000030 	andeq	r0, r0, r0, lsr r0
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xee45c>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x33b35c>
 694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
 698:	00000ecb 	andeq	r0, r0, fp, asr #29
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	000004ec 	andeq	r0, r0, ip, ror #9
 6a4:	00012718 	andeq	r2, r1, r8, lsl r7
 6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
 6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
 6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
 6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x2fb380>
 6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
 6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000004ec 	andeq	r0, r0, ip, ror #9
 6c8:	000128bc 			; <UNDEFINED> instruction: 0x000128bc
 6cc:	00000034 	andeq	r0, r0, r4, lsr r0
 6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x1ee4a0>
 6d4:	42018e02 	andmi	r8, r1, #2, 28
 6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
 6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000004ec 	andeq	r0, r0, ip, ror #9
 6e8:	000128f0 	strdeq	r2, [r1], -r0
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	8b040e42 	blhi	104000 <__bss_end+0xee4c0>
 6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x33b3c0>
 6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
 6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	000004ec 	andeq	r0, r0, ip, ror #9
 708:	00012928 	andeq	r2, r1, r8, lsr #18
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xee4e0>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x33b3e0>
 718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 71c:	00000ecb 	andeq	r0, r0, fp, asr #29
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004ec 	andeq	r0, r0, ip, ror #9
 728:	0001294c 	andeq	r2, r1, ip, asr #18
 72c:	0000021c 	andeq	r0, r0, ip, lsl r2
 730:	8b080e42 	blhi	204040 <__bss_end+0x1ee500>
 734:	42018e02 	andmi	r8, r1, #2, 28
 738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004ec 	andeq	r0, r0, ip, ror #9
 748:	00012b68 	andeq	r2, r1, r8, ror #22
 74c:	0000005c 	andeq	r0, r0, ip, asr r0
 750:	8b080e42 	blhi	204060 <__bss_end+0x1ee520>
 754:	42018e02 	andmi	r8, r1, #2, 28
 758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004ec 	andeq	r0, r0, ip, ror #9
 768:	00012bc4 	andeq	r2, r1, r4, asr #23
 76c:	0000005c 	andeq	r0, r0, ip, asr r0
 770:	8b080e42 	blhi	204080 <__bss_end+0x1ee540>
 774:	42018e02 	andmi	r8, r1, #2, 28
 778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	000004ec 	andeq	r0, r0, ip, ror #9
 788:	00012c20 	andeq	r2, r1, r0, lsr #24
 78c:	0000007c 	andeq	r0, r0, ip, ror r0
 790:	8b080e42 	blhi	2040a0 <__bss_end+0x1ee560>
 794:	42018e02 	andmi	r8, r1, #2, 28
 798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	000004ec 	andeq	r0, r0, ip, ror #9
 7a8:	00012c9c 	muleq	r1, ip, ip
 7ac:	00000108 	andeq	r0, r0, r8, lsl #2
 7b0:	8b040e42 	blhi	1040c0 <__bss_end+0xee580>
 7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x33b480>
 7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
 7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	000004ec 	andeq	r0, r0, ip, ror #9
 7c8:	00012da4 	andeq	r2, r1, r4, lsr #27
 7cc:	0000009c 	muleq	r0, ip, r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1ee5a0>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	000004ec 	andeq	r0, r0, ip, ror #9
 7e8:	00012e40 	andeq	r2, r1, r0, asr #28
 7ec:	00000118 	andeq	r0, r0, r8, lsl r1
 7f0:	8b080e42 	blhi	204100 <__bss_end+0x1ee5c0>
 7f4:	42018e02 	andmi	r8, r1, #2, 28
 7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	000004ec 	andeq	r0, r0, ip, ror #9
 808:	00012f58 	andeq	r2, r1, r8, asr pc
 80c:	00000048 	andeq	r0, r0, r8, asr #32
 810:	8b040e42 	blhi	104120 <__bss_end+0xee5e0>
 814:	0b0d4201 	bleq	351020 <__bss_end+0x33b4e0>
 818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
 81c:	00000ecb 	andeq	r0, r0, fp, asr #29
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	000004ec 	andeq	r0, r0, ip, ror #9
 828:	00012fa0 	andeq	r2, r1, r0, lsr #31
 82c:	000000f4 	strdeq	r0, [r0], -r4
 830:	8b080e42 	blhi	204140 <__bss_end+0x1ee600>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	000004ec 	andeq	r0, r0, ip, ror #9
 848:	00013094 	muleq	r1, r4, r0
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	8b040e42 	blhi	104160 <__bss_end+0xee620>
 854:	0b0d4201 	bleq	351060 <__bss_end+0x33b520>
 858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
 85c:	00000ecb 	andeq	r0, r0, fp, asr #29
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	000004ec 	andeq	r0, r0, ip, ror #9
 868:	000130bc 	strheq	r3, [r1], -ip
 86c:	00000030 	andeq	r0, r0, r0, lsr r0
 870:	8b080e42 	blhi	204180 <__bss_end+0x1ee640>
 874:	42018e02 	andmi	r8, r1, #2, 28
 878:	00040b0c 	andeq	r0, r4, ip, lsl #22
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	000004ec 	andeq	r0, r0, ip, ror #9
 884:	000130ec 	andeq	r3, r1, ip, ror #1
 888:	000000c0 	andeq	r0, r0, r0, asr #1
 88c:	8b080e42 	blhi	20419c <__bss_end+0x1ee65c>
 890:	42018e02 	andmi	r8, r1, #2, 28
 894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	000004ec 	andeq	r0, r0, ip, ror #9
 8a4:	000131ac 	andeq	r3, r1, ip, lsr #3
 8a8:	000000c0 	andeq	r0, r0, r0, asr #1
 8ac:	8b080e42 	blhi	2041bc <__bss_end+0x1ee67c>
 8b0:	42018e02 	andmi	r8, r1, #2, 28
 8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	000004ec 	andeq	r0, r0, ip, ror #9
 8c4:	0001326c 	andeq	r3, r1, ip, ror #4
 8c8:	000000bc 	strheq	r0, [r0], -ip
 8cc:	8b080e42 	blhi	2041dc <__bss_end+0x1ee69c>
 8d0:	42018e02 	andmi	r8, r1, #2, 28
 8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	000004ec 	andeq	r0, r0, ip, ror #9
 8e4:	00013328 	andeq	r3, r1, r8, lsr #6
 8e8:	000000b8 	strheq	r0, [r0], -r8
 8ec:	8b080e42 	blhi	2041fc <__bss_end+0x1ee6bc>
 8f0:	42018e02 	andmi	r8, r1, #2, 28
 8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	000004ec 	andeq	r0, r0, ip, ror #9
 904:	000133e0 	andeq	r3, r1, r0, ror #7
 908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 90c:	8b080e42 	blhi	20421c <__bss_end+0x1ee6dc>
 910:	42018e02 	andmi	r8, r1, #2, 28
 914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	000004ec 	andeq	r0, r0, ip, ror #9
 924:	00013490 	muleq	r1, r0, r4
 928:	00000034 	andeq	r0, r0, r4, lsr r0
 92c:	8b080e42 	blhi	20423c <__bss_end+0x1ee6fc>
 930:	42018e02 	andmi	r8, r1, #2, 28
 934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 938:	00080d0c 	andeq	r0, r8, ip, lsl #26
 93c:	0000000c 	andeq	r0, r0, ip
 940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 944:	7c020001 	stcvc	0, cr0, [r2], {1}
 948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000093c 	andeq	r0, r0, ip, lsr r9
 954:	000134c4 	andeq	r3, r1, r4, asr #9
 958:	000000b4 	strheq	r0, [r0], -r4
 95c:	8b080e42 	blhi	20426c <__bss_end+0x1ee72c>
 960:	42018e02 	andmi	r8, r1, #2, 28
 964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 968:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	0000093c 	andeq	r0, r0, ip, lsr r9
 974:	00013578 	andeq	r3, r1, r8, ror r5
 978:	000000a0 	andeq	r0, r0, r0, lsr #1
 97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
 980:	8b038504 	blhi	e1d98 <__bss_end+0xcc258>
 984:	42018e02 	andmi	r8, r1, #2, 28
 988:	00040b0c 	andeq	r0, r4, ip, lsl #22
 98c:	0000001c 	andeq	r0, r0, ip, lsl r0
 990:	0000093c 	andeq	r0, r0, ip, lsr r9
 994:	00013618 	andeq	r3, r1, r8, lsl r6
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	8b040e42 	blhi	1042ac <__bss_end+0xee76c>
 9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x33b66c>
 9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9b4:	00013634 	andeq	r3, r1, r4, lsr r6
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	8b040e42 	blhi	1042cc <__bss_end+0xee78c>
 9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x33b68c>
 9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
 9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9d4:	00013650 	andeq	r3, r1, r0, asr r6
 9d8:	00000064 	andeq	r0, r0, r4, rrx
 9dc:	8b080e42 	blhi	2042ec <__bss_end+0x1ee7ac>
 9e0:	42018e02 	andmi	r8, r1, #2, 28
 9e4:	6a040b0c 	bvs	10361c <__bss_end+0xedadc>
 9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9f4:	000136b4 			; <UNDEFINED> instruction: 0x000136b4
 9f8:	000000d4 	ldrdeq	r0, [r0], -r4
 9fc:	8b040e42 	blhi	10430c <__bss_end+0xee7cc>
 a00:	0b0d4201 	bleq	35120c <__bss_end+0x33b6cc>
 a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
 a08:	000ecb42 	andeq	ip, lr, r2, asr #22
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0000093c 	andeq	r0, r0, ip, lsr r9
 a14:	00013788 	andeq	r3, r1, r8, lsl #15
 a18:	000000e0 	andeq	r0, r0, r0, ror #1
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xee7ec>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x33b6ec>
 a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 a28:	000ecb42 	andeq	ip, lr, r2, asr #22
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	00013868 	andeq	r3, r1, r8, ror #16
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xee81c>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x33b71c>
 a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
 a58:	000ecb42 	andeq	ip, lr, r2, asr #22
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	00013944 	andeq	r3, r1, r4, asr #18
 a68:	00000034 	andeq	r0, r0, r4, lsr r0
 a6c:	8b080e42 	blhi	20437c <__bss_end+0x1ee83c>
 a70:	42018e02 	andmi	r8, r1, #2, 28
 a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
 a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	00013978 	andeq	r3, r1, r8, ror r9
 a88:	000000b8 	strheq	r0, [r0], -r8
 a8c:	8b040e42 	blhi	10439c <__bss_end+0xee85c>
 a90:	0b0d4201 	bleq	35129c <__bss_end+0x33b75c>
 a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 a98:	000ecb42 	andeq	ip, lr, r2, asr #22
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	00013a30 	andeq	r3, r1, r0, lsr sl
 aa8:	00000050 	andeq	r0, r0, r0, asr r0
 aac:	8b040e42 	blhi	1043bc <__bss_end+0xee87c>
 ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x33b77c>
 ab4:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ac4:	00013a80 	andeq	r3, r1, r0, lsl #21
 ac8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 acc:	8b040e42 	blhi	1043dc <__bss_end+0xee89c>
 ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x33b79c>
 ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
 ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ae4:	00013c30 	andeq	r3, r1, r0, lsr ip
 ae8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 aec:	8b040e42 	blhi	1043fc <__bss_end+0xee8bc>
 af0:	0b0d4201 	bleq	3512fc <__bss_end+0x33b7bc>
 af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
 af8:	000ecb42 	andeq	ip, lr, r2, asr #22
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
 b04:	00013de8 	andeq	r3, r1, r8, ror #27
 b08:	00000058 	andeq	r0, r0, r8, asr r0
 b0c:	8b040e42 	blhi	10441c <__bss_end+0xee8dc>
 b10:	0b0d4201 	bleq	35131c <__bss_end+0x33b7dc>
 b14:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
 b18:	00000ecb 	andeq	r0, r0, fp, asr #29
 b1c:	0000000c 	andeq	r0, r0, ip
 b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b24:	7c020001 	stcvc	0, cr0, [r2], {1}
 b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b34:	00013e40 	andeq	r3, r1, r0, asr #28
 b38:	000001c8 	andeq	r0, r0, r8, asr #3
 b3c:	8b080e42 	blhi	20444c <__bss_end+0x1ee90c>
 b40:	42018e02 	andmi	r8, r1, #2, 28
 b44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b54:	00014008 	andeq	r4, r1, r8
 b58:	0000007c 	andeq	r0, r0, ip, ror r0
 b5c:	8b080e42 	blhi	20446c <__bss_end+0x1ee92c>
 b60:	42018e02 	andmi	r8, r1, #2, 28
 b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b74:	00014084 	andeq	r4, r1, r4, lsl #1
 b78:	00000024 	andeq	r0, r0, r4, lsr #32
 b7c:	8b040e42 	blhi	10448c <__bss_end+0xee94c>
 b80:	0b0d4201 	bleq	35138c <__bss_end+0x33b84c>
 b84:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
 b88:	00000ecb 	andeq	r0, r0, fp, asr #29
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b94:	000140a8 	andeq	r4, r1, r8, lsr #1
 b98:	00000018 	andeq	r0, r0, r8, lsl r0
 b9c:	8b040e42 	blhi	1044ac <__bss_end+0xee96c>
 ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x33b86c>
 ba4:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bb4:	000140c0 	andeq	r4, r1, r0, asr #1
 bb8:	000000d8 	ldrdeq	r0, [r0], -r8
 bbc:	8b040e42 	blhi	1044cc <__bss_end+0xee98c>
 bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x33b88c>
 bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
 bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bd4:	00014198 	muleq	r1, r8, r1
 bd8:	00000154 	andeq	r0, r0, r4, asr r1
 bdc:	8b040e42 	blhi	1044ec <__bss_end+0xee9ac>
 be0:	0b0d4201 	bleq	3513ec <__bss_end+0x33b8ac>
 be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
 be8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	00014304 	andeq	r4, r1, r4, lsl #6
 c08:	0000003c 	andeq	r0, r0, ip, lsr r0
 c0c:	8b080e42 	blhi	20451c <__bss_end+0x1ee9dc>
 c10:	42018e02 	andmi	r8, r1, #2, 28
 c14:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c18:	00000018 	andeq	r0, r0, r8, lsl r0
 c1c:	00000bec 	andeq	r0, r0, ip, ror #23
 c20:	00014340 	andeq	r4, r1, r0, asr #6
 c24:	00000044 	andeq	r0, r0, r4, asr #32
 c28:	8b080e42 	blhi	204538 <__bss_end+0x1ee9f8>
 c2c:	42018e02 	andmi	r8, r1, #2, 28
 c30:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c34:	00000018 	andeq	r0, r0, r8, lsl r0
 c38:	00000bec 	andeq	r0, r0, ip, ror #23
 c3c:	00014384 	andeq	r4, r1, r4, lsl #7
 c40:	00000098 	muleq	r0, r8, r0
 c44:	8b080e42 	blhi	204554 <__bss_end+0x1eea14>
 c48:	42018e02 	andmi	r8, r1, #2, 28
 c4c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c50:	0000000c 	andeq	r0, r0, ip
 c54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c58:	7c020001 	stcvc	0, cr0, [r2], {1}
 c5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c60:	00000024 	andeq	r0, r0, r4, lsr #32
 c64:	00000c50 	andeq	r0, r0, r0, asr ip
 c68:	00014448 	andeq	r4, r1, r8, asr #8
 c6c:	00000120 	andeq	r0, r0, r0, lsr #2
 c70:	84140e4e 	ldrhi	r0, [r4], #-3662	; 0xfffff1b2
 c74:	86048505 	strhi	r8, [r4], -r5, lsl #10
 c78:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 c7c:	ce620201 	cdpgt	2, 6, cr0, cr2, cr1, {0}
 c80:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
 c84:	0000000e 	andeq	r0, r0, lr
 c88:	0000000c 	andeq	r0, r0, ip
 c8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 c90:	7c020001 	stcvc	0, cr0, [r2], {1}
 c94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 c98:	00000034 	andeq	r0, r0, r4, lsr r0
 c9c:	00000c88 	andeq	r0, r0, r8, lsl #25
 ca0:	00014568 	andeq	r4, r1, r8, ror #10
 ca4:	0000011c 	andeq	r0, r0, ip, lsl r1
 ca8:	840c0e62 	strhi	r0, [ip], #-3682	; 0xfffff19e
 cac:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 cb0:	ce4e0201 	cdpgt	2, 4, cr0, cr14, cr1, {0}
 cb4:	000ec4c5 	andeq	ip, lr, r5, asr #9
 cb8:	840c0e52 	strhi	r0, [ip], #-3666	; 0xfffff1ae
 cbc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 cc0:	000e4401 	andeq	r4, lr, r1, lsl #8
 cc4:	44cec5c4 	strbmi	ip, [lr], #1476	; 0x5c4
 cc8:	03840c0e 	orreq	r0, r4, #3584	; 0xe00
 ccc:	018e0285 	orreq	r0, lr, r5, lsl #5
 cd0:	0000000c 	andeq	r0, r0, ip
 cd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 cd8:	7c020001 	stcvc	0, cr0, [r2], {1}
 cdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ce0:	0000002c 	andeq	r0, r0, ip, lsr #32
 ce4:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 ce8:	00014684 	andeq	r4, r1, r4, lsl #13
 cec:	000000cc 	andeq	r0, r0, ip, asr #1
 cf0:	84100e54 	ldrhi	r0, [r0], #-3668	; 0xfffff1ac
 cf4:	86038504 	strhi	r8, [r3], -r4, lsl #10
 cf8:	5c018e02 	stcpl	14, cr8, [r1], {2}
 cfc:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
 d00:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
 d04:	ce0a4e0b 	cdpgt	14, 0, cr4, cr10, cr11, {0}
 d08:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
 d0c:	000b4200 	andeq	r4, fp, r0, lsl #4
